// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for Transport
class TransportBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TransportBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TransportBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int socket(
    int __domain,
    int __type,
    int __protocol,
  ) {
    return _socket(
      __domain,
      __type,
      __protocol,
    );
  }

  late final _socketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'socket');
  late final _socket = _socketPtr.asFunction<int Function(int, int, int)>();

  int socketpair(
    int __domain,
    int __type,
    int __protocol,
    ffi.Pointer<ffi.Int> __fds,
  ) {
    return _socketpair(
      __domain,
      __type,
      __protocol,
      __fds,
    );
  }

  late final _socketpairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('socketpair');
  late final _socketpair = _socketpairPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  int bind(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _bind(
      __fd,
      __addr,
      __len,
    );
  }

  late final _bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('bind');
  late final _bind =
      _bindPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getsockname(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getsockname(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getsocknamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getsockname');
  late final _getsockname = _getsocknamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int connect(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _connect(
      __fd,
      __addr,
      __len,
    );
  }

  late final _connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('connect');
  late final _connect =
      _connectPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getpeername(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getpeername(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getpeernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getpeername');
  late final _getpeername = _getpeernamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int send(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _send(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _sendPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('send');
  late final _send =
      _sendPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int recv(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _recv(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _recvPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('recv');
  late final _recv =
      _recvPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int sendto(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    int __addr_len,
  ) {
    return _sendto(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _sendtoPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
              ffi.Pointer<sockaddr>, socklen_t)>>('sendto');
  late final _sendto = _sendtoPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>, int)>();

  int recvfrom(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _recvfrom(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _recvfromPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
              ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>('recvfrom');
  late final _recvfrom = _recvfromPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>,
          ffi.Pointer<socklen_t>)>();

  int sendmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _sendmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('sendmsg');
  late final _sendmsg =
      _sendmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int recvmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _recvmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('recvmsg');
  late final _recvmsg =
      _recvmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int getsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    ffi.Pointer<socklen_t> __optlen,
  ) {
    return _getsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<socklen_t>)>>('getsockopt');
  late final _getsockopt = _getsockoptPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<socklen_t>)>();

  int setsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    int __optlen,
  ) {
    return _setsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              socklen_t)>>('setsockopt');
  late final _setsockopt = _setsockoptPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int listen(
    int __fd,
    int __n,
  ) {
    return _listen(
      __fd,
      __n,
    );
  }

  late final _listenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('listen');
  late final _listen = _listenPtr.asFunction<int Function(int, int)>();

  int accept(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _accept(
      __fd,
      __addr,
      __addr_len,
    );
  }

  late final _acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('accept');
  late final _accept = _acceptPtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int shutdown(
    int __fd,
    int __how,
  ) {
    return _shutdown(
      __fd,
      __how,
    );
  }

  late final _shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'shutdown');
  late final _shutdown = _shutdownPtr.asFunction<int Function(int, int)>();

  int sockatmark(
    int __fd,
  ) {
    return _sockatmark(
      __fd,
    );
  }

  late final _sockatmarkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sockatmark');
  late final _sockatmark = _sockatmarkPtr.asFunction<int Function(int)>();

  int isfdtype(
    int __fd,
    int __fdtype,
  ) {
    return _isfdtype(
      __fd,
      __fdtype,
    );
  }

  late final _isfdtypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'isfdtype');
  late final _isfdtype = _isfdtypePtr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<in6_addr> _in6addr_any =
      _lookup<in6_addr>('in6addr_any');

  in6_addr get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<in6_addr> _in6addr_loopback =
      _lookup<in6_addr>('in6addr_loopback');

  in6_addr get in6addr_loopback => _in6addr_loopback.ref;

  int ntohl(
    int __netlong,
  ) {
    return _ntohl(
      __netlong,
    );
  }

  late final _ntohlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ntohl');
  late final _ntohl = _ntohlPtr.asFunction<int Function(int)>();

  int ntohs(
    int __netshort,
  ) {
    return _ntohs(
      __netshort,
    );
  }

  late final _ntohsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('ntohs');
  late final _ntohs = _ntohsPtr.asFunction<int Function(int)>();

  int htonl(
    int __hostlong,
  ) {
    return _htonl(
      __hostlong,
    );
  }

  late final _htonlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('htonl');
  late final _htonl = _htonlPtr.asFunction<int Function(int)>();

  int htons(
    int __hostshort,
  ) {
    return _htons(
      __hostshort,
    );
  }

  late final _htonsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('htons');
  late final _htons = _htonsPtr.asFunction<int Function(int)>();

  int bindresvport(
    int __sockfd,
    ffi.Pointer<sockaddr_in> __sock_in,
  ) {
    return _bindresvport(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>>('bindresvport');
  late final _bindresvport = _bindresvportPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in>)>();

  int bindresvport6(
    int __sockfd,
    ffi.Pointer<sockaddr_in6> __sock_in,
  ) {
    return _bindresvport6(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvport6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr_in6>)>>('bindresvport6');
  late final _bindresvport6 = _bindresvport6Ptr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in6>)>();

  int readv(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
  ) {
    return _readv(
      __fd,
      __iovec,
      __count,
    );
  }

  late final _readvPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int)>>('readv');
  late final _readv =
      _readvPtr.asFunction<int Function(int, ffi.Pointer<iovec>, int)>();

  int writev(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
  ) {
    return _writev(
      __fd,
      __iovec,
      __count,
    );
  }

  late final _writevPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int)>>('writev');
  late final _writev =
      _writevPtr.asFunction<int Function(int, ffi.Pointer<iovec>, int)>();

  int preadv(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
    int __offset,
  ) {
    return _preadv(
      __fd,
      __iovec,
      __count,
      __offset,
    );
  }

  late final _preadvPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<iovec>, ffi.Int, ffi.Long)>>('preadv');
  late final _preadv =
      _preadvPtr.asFunction<int Function(int, ffi.Pointer<iovec>, int, int)>();

  int pwritev(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
    int __offset,
  ) {
    return _pwritev(
      __fd,
      __iovec,
      __count,
      __offset,
    );
  }

  late final _pwritevPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<iovec>, ffi.Int, ffi.Long)>>('pwritev');
  late final _pwritev =
      _pwritevPtr.asFunction<int Function(int, ffi.Pointer<iovec>, int, int)>();

  int stat1(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<stat> __buf,
  ) {
    return _stat1(
      __file,
      __buf,
    );
  }

  late final _stat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>>('stat');
  late final _stat1 = _stat1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>();

  int fstat(
    int __fd,
    ffi.Pointer<stat> __buf,
  ) {
    return _fstat(
      __fd,
      __buf,
    );
  }

  late final _fstatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<stat>)>>(
          'fstat');
  late final _fstat =
      _fstatPtr.asFunction<int Function(int, ffi.Pointer<stat>)>();

  int fstatat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<stat> __buf,
    int __flag,
  ) {
    return _fstatat(
      __fd,
      __file,
      __buf,
      __flag,
    );
  }

  late final _fstatatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<stat>,
              ffi.Int)>>('fstatat');
  late final _fstatat = _fstatatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<stat>, int)>();

  int lstat(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<stat> __buf,
  ) {
    return _lstat(
      __file,
      __buf,
    );
  }

  late final _lstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>>('lstat');
  late final _lstat = _lstatPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>();

  int chmod(
    ffi.Pointer<ffi.Char> __file,
    int __mode,
  ) {
    return _chmod(
      __file,
      __mode,
    );
  }

  late final _chmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('chmod');
  late final _chmod =
      _chmodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int lchmod(
    ffi.Pointer<ffi.Char> __file,
    int __mode,
  ) {
    return _lchmod(
      __file,
      __mode,
    );
  }

  late final _lchmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('lchmod');
  late final _lchmod =
      _lchmodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fchmod(
    int __fd,
    int __mode,
  ) {
    return _fchmod(
      __fd,
      __mode,
    );
  }

  late final _fchmodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.UnsignedInt)>>(
          'fchmod');
  late final _fchmod = _fchmodPtr.asFunction<int Function(int, int)>();

  int fchmodat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __mode,
    int __flag,
  ) {
    return _fchmodat(
      __fd,
      __file,
      __mode,
      __flag,
    );
  }

  late final _fchmodatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Int)>>('fchmodat');
  late final _fchmodat = _fchmodatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int umask(
    int __mask,
  ) {
    return _umask(
      __mask,
    );
  }

  late final _umaskPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'umask');
  late final _umask = _umaskPtr.asFunction<int Function(int)>();

  int mkdir(
    ffi.Pointer<ffi.Char> __path,
    int __mode,
  ) {
    return _mkdir(
      __path,
      __mode,
    );
  }

  late final _mkdirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('mkdir');
  late final _mkdir =
      _mkdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkdirat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    int __mode,
  ) {
    return _mkdirat(
      __fd,
      __path,
      __mode,
    );
  }

  late final _mkdiratPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('mkdirat');
  late final _mkdirat =
      _mkdiratPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mknod(
    ffi.Pointer<ffi.Char> __path,
    int __mode,
    int __dev,
  ) {
    return _mknod(
      __path,
      __mode,
      __dev,
    );
  }

  late final _mknodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.UnsignedLong)>>('mknod');
  late final _mknod =
      _mknodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int mknodat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    int __mode,
    int __dev,
  ) {
    return _mknodat(
      __fd,
      __path,
      __mode,
      __dev,
    );
  }

  late final _mknodatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.UnsignedLong)>>('mknodat');
  late final _mknodat = _mknodatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int mkfifo(
    ffi.Pointer<ffi.Char> __path,
    int __mode,
  ) {
    return _mkfifo(
      __path,
      __mode,
    );
  }

  late final _mkfifoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('mkfifo');
  late final _mkfifo =
      _mkfifoPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkfifoat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    int __mode,
  ) {
    return _mkfifoat(
      __fd,
      __path,
      __mode,
    );
  }

  late final _mkfifoatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('mkfifoat');
  late final _mkfifoat =
      _mkfifoatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int utimensat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<timespec> __times,
    int __flags,
  ) {
    return _utimensat(
      __fd,
      __path,
      __times,
      __flags,
    );
  }

  late final _utimensatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<timespec>, ffi.Int)>>('utimensat');
  late final _utimensat = _utimensatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<timespec>, int)>();

  int futimens(
    int __fd,
    ffi.Pointer<timespec> __times,
  ) {
    return _futimens(
      __fd,
      __times,
    );
  }

  late final _futimensPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timespec>)>>(
      'futimens');
  late final _futimens =
      _futimensPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int __sig,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> __handler,
  ) {
    return _signal(
      __sig,
      __handler,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int kill(
    int __pid,
    int __sig,
  ) {
    return _kill(
      __pid,
      __sig,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int __pgrp,
    int __sig,
  ) {
    return _killpg(
      __pgrp,
      __sig,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int raise(
    int __sig,
  ) {
    return _raise(
      __sig,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> ssignal(
    int __sig,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> __handler,
  ) {
    return _ssignal(
      __sig,
      __handler,
    );
  }

  late final _ssignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('ssignal');
  late final _ssignal = _ssignalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int gsignal(
    int __sig,
  ) {
    return _gsignal(
      __sig,
    );
  }

  late final _gsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('gsignal');
  late final _gsignal = _gsignalPtr.asFunction<int Function(int)>();

  void psignal(
    int __sig,
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _psignal(
      __sig,
      __s,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void psiginfo(
    ffi.Pointer<siginfo_t> __pinfo,
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _psiginfo(
      __pinfo,
      __s,
    );
  }

  late final _psiginfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Char>)>>('psiginfo');
  late final _psiginfo = _psiginfoPtr.asFunction<
      void Function(ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Char>)>();

  int sigblock(
    int __mask,
  ) {
    return _sigblock(
      __mask,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int __mask,
  ) {
    return _sigsetmask(
      __mask,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int siggetmask() {
    return _siggetmask();
  }

  late final _siggetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('siggetmask');
  late final _siggetmask = _siggetmaskPtr.asFunction<int Function()>();

  int sigemptyset(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigemptyset(
      __set,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigfillset(
      __set,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigaddset(
      __set,
      __signo,
    );
  }

  late final _sigaddsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigdelset(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigdelset(
      __set,
      __signo,
    );
  }

  late final _sigdelsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigismember(
      __set,
      __signo,
    );
  }

  late final _sigismemberPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigprocmask(
    int __how,
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<sigset_t> __oset,
  ) {
    return _sigprocmask(
      __how,
      __set,
      __oset,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigsuspend(
      __set,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigaction1(
    int __sig,
    ffi.Pointer<sigaction> __act,
    ffi.Pointer<sigaction> __oact,
  ) {
    return _sigaction1(
      __sig,
      __act,
      __oact,
    );
  }

  late final _sigaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction1 = _sigaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigpending(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigpending(
      __set,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<ffi.Int> __sig,
  ) {
    return _sigwait(
      __set,
      __sig,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>>('sigwait');
  late final _sigwait = _sigwaitPtr
      .asFunction<int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>();

  int sigwaitinfo(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<siginfo_t> __info,
  ) {
    return _sigwaitinfo(
      __set,
      __info,
    );
  }

  late final _sigwaitinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>>('sigwaitinfo');
  late final _sigwaitinfo = _sigwaitinfoPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>();

  int sigtimedwait(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<siginfo_t> __info,
    ffi.Pointer<timespec> __timeout,
  ) {
    return _sigtimedwait(
      __set,
      __info,
      __timeout,
    );
  }

  late final _sigtimedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
              ffi.Pointer<timespec>)>>('sigtimedwait');
  late final _sigtimedwait = _sigtimedwaitPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
          ffi.Pointer<timespec>)>();

  int sigqueue(
    int __pid,
    int __sig,
    sigval __val,
  ) {
    return _sigqueue(
      __pid,
      __sig,
      __val,
    );
  }

  late final _sigqueuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, sigval)>>(
          'sigqueue');
  late final _sigqueue =
      _sigqueuePtr.asFunction<int Function(int, int, sigval)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_siglist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_siglist => _sys_siglist.value;

  set sys_siglist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_siglist.value = value;

  int sigreturn(
    ffi.Pointer<sigcontext> __scp,
  ) {
    return _sigreturn(
      __scp,
    );
  }

  late final _sigreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigcontext>)>>(
          'sigreturn');
  late final _sigreturn =
      _sigreturnPtr.asFunction<int Function(ffi.Pointer<sigcontext>)>();

  int siginterrupt(
    int __sig,
    int __interrupt,
  ) {
    return _siginterrupt(
      __sig,
      __interrupt,
    );
  }

  late final _siginterruptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> __ss,
    ffi.Pointer<stack_t> __oss,
  ) {
    return _sigaltstack(
      __ss,
      __oss,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigstack1(
    ffi.Pointer<sigstack> __ss,
    ffi.Pointer<sigstack> __oss,
  ) {
    return _sigstack1(
      __ss,
      __oss,
    );
  }

  late final _sigstack1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>>('sigstack');
  late final _sigstack1 = _sigstack1Ptr
      .asFunction<int Function(ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>();

  int pthread_sigmask(
    int __how,
    ffi.Pointer<__sigset_t> __newmask,
    ffi.Pointer<__sigset_t> __oldmask,
  ) {
    return _pthread_sigmask(
      __how,
      __newmask,
      __oldmask,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<__sigset_t>,
              ffi.Pointer<__sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<__sigset_t>, ffi.Pointer<__sigset_t>)>();

  int pthread_kill(
    int __threadid,
    int __signo,
  ) {
    return _pthread_kill(
      __threadid,
      __signo,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(int, int)>();

  int imaxabs(
    int __n,
  ) {
    return _imaxabs(
      __n,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.Int> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Pointer<ffi.Int>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.Int> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Pointer<ffi.Int>>, int)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  void atomic_thread_fence(
    int arg0,
  ) {
    return _atomic_thread_fence(
      arg0,
    );
  }

  late final _atomic_thread_fencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'atomic_thread_fence');
  late final _atomic_thread_fence =
      _atomic_thread_fencePtr.asFunction<void Function(int)>();

  void atomic_signal_fence(
    int arg0,
  ) {
    return _atomic_signal_fence(
      arg0,
    );
  }

  late final _atomic_signal_fencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'atomic_signal_fence');
  late final _atomic_signal_fence =
      _atomic_signal_fencePtr.asFunction<void Function(int)>();

  bool atomic_flag_test_and_set(
    ffi.Pointer<atomic_flag> arg0,
  ) {
    return _atomic_flag_test_and_set(
      arg0,
    );
  }

  late final _atomic_flag_test_and_setPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<atomic_flag>)>>(
          'atomic_flag_test_and_set');
  late final _atomic_flag_test_and_set = _atomic_flag_test_and_setPtr
      .asFunction<bool Function(ffi.Pointer<atomic_flag>)>();

  bool atomic_flag_test_and_set_explicit(
    ffi.Pointer<atomic_flag> arg0,
    int arg1,
  ) {
    return _atomic_flag_test_and_set_explicit(
      arg0,
      arg1,
    );
  }

  late final _atomic_flag_test_and_set_explicitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<atomic_flag>,
              ffi.Int32)>>('atomic_flag_test_and_set_explicit');
  late final _atomic_flag_test_and_set_explicit =
      _atomic_flag_test_and_set_explicitPtr
          .asFunction<bool Function(ffi.Pointer<atomic_flag>, int)>();

  void atomic_flag_clear(
    ffi.Pointer<atomic_flag> arg0,
  ) {
    return _atomic_flag_clear(
      arg0,
    );
  }

  late final _atomic_flag_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<atomic_flag>)>>(
          'atomic_flag_clear');
  late final _atomic_flag_clear = _atomic_flag_clearPtr
      .asFunction<void Function(ffi.Pointer<atomic_flag>)>();

  void atomic_flag_clear_explicit(
    ffi.Pointer<atomic_flag> arg0,
    int arg1,
  ) {
    return _atomic_flag_clear_explicit(
      arg0,
      arg1,
    );
  }

  late final _atomic_flag_clear_explicitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<atomic_flag>,
              ffi.Int32)>>('atomic_flag_clear_explicit');
  late final _atomic_flag_clear_explicit = _atomic_flag_clear_explicitPtr
      .asFunction<void Function(ffi.Pointer<atomic_flag>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void ibuf_create(
    ffi.Pointer<ibuf> ibuf,
    ffi.Pointer<slab_cache> slabc,
    int start_capacity,
  ) {
    return _ibuf_create(
      ibuf,
      slabc,
      start_capacity,
    );
  }

  late final _ibuf_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ibuf>, ffi.Pointer<slab_cache>,
              ffi.Size)>>('ibuf_create');
  late final _ibuf_create = _ibuf_createPtr.asFunction<
      void Function(ffi.Pointer<ibuf>, ffi.Pointer<slab_cache>, int)>();

  void ibuf_destroy(
    ffi.Pointer<ibuf> ibuf,
  ) {
    return _ibuf_destroy(
      ibuf,
    );
  }

  late final _ibuf_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ibuf>)>>(
          'ibuf_destroy');
  late final _ibuf_destroy =
      _ibuf_destroyPtr.asFunction<void Function(ffi.Pointer<ibuf>)>();

  void ibuf_reinit(
    ffi.Pointer<ibuf> ibuf,
  ) {
    return _ibuf_reinit(
      ibuf,
    );
  }

  late final _ibuf_reinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ibuf>)>>(
          'ibuf_reinit');
  late final _ibuf_reinit =
      _ibuf_reinitPtr.asFunction<void Function(ffi.Pointer<ibuf>)>();

  ffi.Pointer<ffi.Void> ibuf_reserve_slow(
    ffi.Pointer<ibuf> ibuf,
    int size,
  ) {
    return _ibuf_reserve_slow(
      ibuf,
      size,
    );
  }

  late final _ibuf_reserve_slowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ibuf>, ffi.Size)>>('ibuf_reserve_slow');
  late final _ibuf_reserve_slow = _ibuf_reserve_slowPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ibuf>, int)>();

  void obuf_create(
    ffi.Pointer<obuf> buf,
    ffi.Pointer<slab_cache> slabc,
    int start_capacity,
  ) {
    return _obuf_create(
      buf,
      slabc,
      start_capacity,
    );
  }

  late final _obuf_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obuf>, ffi.Pointer<slab_cache>,
              ffi.Size)>>('obuf_create');
  late final _obuf_create = _obuf_createPtr.asFunction<
      void Function(ffi.Pointer<obuf>, ffi.Pointer<slab_cache>, int)>();

  void obuf_destroy(
    ffi.Pointer<obuf> buf,
  ) {
    return _obuf_destroy(
      buf,
    );
  }

  late final _obuf_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obuf>)>>(
          'obuf_destroy');
  late final _obuf_destroy =
      _obuf_destroyPtr.asFunction<void Function(ffi.Pointer<obuf>)>();

  void obuf_reset(
    ffi.Pointer<obuf> buf,
  ) {
    return _obuf_reset(
      buf,
    );
  }

  late final _obuf_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obuf>)>>(
          'obuf_reset');
  late final _obuf_reset =
      _obuf_resetPtr.asFunction<void Function(ffi.Pointer<obuf>)>();

  /// Slow path of obuf_reserve(), which actually reallocates
  /// memory and moves data if necessary.
  ffi.Pointer<ffi.Void> obuf_reserve_slow(
    ffi.Pointer<obuf> buf,
    int size,
  ) {
    return _obuf_reserve_slow(
      buf,
      size,
    );
  }

  late final _obuf_reserve_slowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obuf>, ffi.Size)>>('obuf_reserve_slow');
  late final _obuf_reserve_slow = _obuf_reserve_slowPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<obuf>, int)>();

  /// Append data to the output buffer.
  int obuf_dup(
    ffi.Pointer<obuf> buf,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _obuf_dup(
      buf,
      data,
      size,
    );
  }

  late final _obuf_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<obuf>, ffi.Pointer<ffi.Void>, ffi.Size)>>('obuf_dup');
  late final _obuf_dup = _obuf_dupPtr.asFunction<
      int Function(ffi.Pointer<obuf>, ffi.Pointer<ffi.Void>, int)>();

  /// Forget anything added to output buffer after the savepoint.
  void obuf_rollback_to_svp(
    ffi.Pointer<obuf> buf,
    ffi.Pointer<obuf_svp> svp,
  ) {
    return _obuf_rollback_to_svp(
      buf,
      svp,
    );
  }

  late final _obuf_rollback_to_svpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obuf>,
              ffi.Pointer<obuf_svp>)>>('obuf_rollback_to_svp');
  late final _obuf_rollback_to_svp = _obuf_rollback_to_svpPtr
      .asFunction<void Function(ffi.Pointer<obuf>, ffi.Pointer<obuf_svp>)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> mmap(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
    int __prot,
    int __flags,
    int __fd,
    int __offset,
  ) {
    return _mmap(
      __addr,
      __len,
      __prot,
      __flags,
      __fd,
      __offset,
    );
  }

  late final _mmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Int, ffi.Int, ffi.Int, ffi.Long)>>('mmap');
  late final _mmap = _mmapPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, int, int, int, int)>();

  int munmap(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
  ) {
    return _munmap(
      __addr,
      __len,
    );
  }

  late final _munmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('munmap');
  late final _munmap =
      _munmapPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int mprotect(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
    int __prot,
  ) {
    return _mprotect(
      __addr,
      __len,
      __prot,
    );
  }

  late final _mprotectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('mprotect');
  late final _mprotect =
      _mprotectPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int msync(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
    int __flags,
  ) {
    return _msync(
      __addr,
      __len,
      __flags,
    );
  }

  late final _msyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('msync');
  late final _msync =
      _msyncPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int madvise(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
    int __advice,
  ) {
    return _madvise(
      __addr,
      __len,
      __advice,
    );
  }

  late final _madvisePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('madvise');
  late final _madvise =
      _madvisePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int posix_madvise(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
    int __advice,
  ) {
    return _posix_madvise(
      __addr,
      __len,
      __advice,
    );
  }

  late final _posix_madvisePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('posix_madvise');
  late final _posix_madvise = _posix_madvisePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int mlock(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
  ) {
    return _mlock(
      __addr,
      __len,
    );
  }

  late final _mlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('mlock');
  late final _mlock =
      _mlockPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int munlock(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
  ) {
    return _munlock(
      __addr,
      __len,
    );
  }

  late final _munlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('munlock');
  late final _munlock =
      _munlockPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int mlockall(
    int __flags,
  ) {
    return _mlockall(
      __flags,
    );
  }

  late final _mlockallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('mlockall');
  late final _mlockall = _mlockallPtr.asFunction<int Function(int)>();

  int munlockall() {
    return _munlockall();
  }

  late final _munlockallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('munlockall');
  late final _munlockall = _munlockallPtr.asFunction<int Function()>();

  int mincore(
    ffi.Pointer<ffi.Void> __start,
    int __len,
    ffi.Pointer<ffi.UnsignedChar> __vec,
  ) {
    return _mincore(
      __start,
      __len,
      __vec,
    );
  }

  late final _mincorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>)>>('mincore');
  late final _mincore = _mincorePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int shm_open(
    ffi.Pointer<ffi.Char> __name,
    int __oflag,
    int __mode,
  ) {
    return _shm_open(
      __name,
      __oflag,
      __mode,
    );
  }

  late final _shm_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, mode_t)>>('shm_open');
  late final _shm_open =
      _shm_openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int shm_unlink(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _shm_unlink(
      __name,
    );
  }

  late final _shm_unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'shm_unlink');
  late final _shm_unlink =
      _shm_unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Initialize an arena.
  int slab_arena_create(
    ffi.Pointer<slab_arena> arena,
    ffi.Pointer<quota> quota,
    int prealloc,
    int slab_size,
    int flags,
  ) {
    return _slab_arena_create(
      arena,
      quota,
      prealloc,
      slab_size,
      flags,
    );
  }

  late final _slab_arena_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<slab_arena>, ffi.Pointer<quota>,
              ffi.Size, ffi.Uint32, ffi.Int)>>('slab_arena_create');
  late final _slab_arena_create = _slab_arena_createPtr.asFunction<
      int Function(
          ffi.Pointer<slab_arena>, ffi.Pointer<quota>, int, int, int)>();

  /// Destroy an arena.
  void slab_arena_destroy(
    ffi.Pointer<slab_arena> arena,
  ) {
    return _slab_arena_destroy(
      arena,
    );
  }

  late final _slab_arena_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_arena>)>>(
          'slab_arena_destroy');
  late final _slab_arena_destroy = _slab_arena_destroyPtr
      .asFunction<void Function(ffi.Pointer<slab_arena>)>();

  /// Get a slab.
  ffi.Pointer<ffi.Void> slab_map(
    ffi.Pointer<slab_arena> arena,
  ) {
    return _slab_map(
      arena,
    );
  }

  late final _slab_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<slab_arena>)>>('slab_map');
  late final _slab_map = _slab_mapPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<slab_arena>)>();

  /// Put a slab into cache.
  void slab_unmap(
    ffi.Pointer<slab_arena> arena,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _slab_unmap(
      arena,
      ptr,
    );
  }

  late final _slab_unmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<slab_arena>, ffi.Pointer<ffi.Void>)>>('slab_unmap');
  late final _slab_unmap = _slab_unmapPtr.asFunction<
      void Function(ffi.Pointer<slab_arena>, ffi.Pointer<ffi.Void>)>();

  /// mprotect() the preallocated arena.
  void slab_arena_mprotect(
    ffi.Pointer<slab_arena> arena,
  ) {
    return _slab_arena_mprotect(
      arena,
    );
  }

  late final _slab_arena_mprotectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_arena>)>>(
          'slab_arena_mprotect');
  late final _slab_arena_mprotect = _slab_arena_mprotectPtr
      .asFunction<void Function(ffi.Pointer<slab_arena>)>();

  int sched_setparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setparam(
      __pid,
      __param,
    );
  }

  late final _sched_setparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sched_param>)>>('sched_setparam');
  late final _sched_setparam = _sched_setparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_getparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_getparam(
      __pid,
      __param,
    );
  }

  late final _sched_getparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sched_param>)>>('sched_getparam');
  late final _sched_getparam = _sched_getparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_setscheduler(
    int __pid,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setscheduler(
      __pid,
      __policy,
      __param,
    );
  }

  late final _sched_setschedulerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int,
              ffi.Pointer<sched_param>)>>('sched_setscheduler');
  late final _sched_setscheduler = _sched_setschedulerPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int sched_getscheduler(
    int __pid,
  ) {
    return _sched_getscheduler(
      __pid,
    );
  }

  late final _sched_getschedulerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_getscheduler');
  late final _sched_getscheduler =
      _sched_getschedulerPtr.asFunction<int Function(int)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_max(
    int __algorithm,
  ) {
    return _sched_get_priority_max(
      __algorithm,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  int sched_get_priority_min(
    int __algorithm,
  ) {
    return _sched_get_priority_min(
      __algorithm,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_rr_get_interval(
    int __pid,
    ffi.Pointer<timespec> __t,
  ) {
    return _sched_rr_get_interval(
      __pid,
      __t,
    );
  }

  late final _sched_rr_get_intervalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timespec>)>>(
      'sched_rr_get_interval');
  late final _sched_rr_get_interval = _sched_rr_get_intervalPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int pthread_create(
    ffi.Pointer<pthread_t> __newthread,
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        __start_routine,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _pthread_create(
      __newthread,
      __attr,
      __start_routine,
      __arg,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> __retval,
  ) {
    return _pthread_exit(
      __retval,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_join(
    int __th,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
  ) {
    return _pthread_join(
      __th,
      __thread_return,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_detach(
    int __th,
  ) {
    return _pthread_detach(
      __th,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(int)>();

  int pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self = _pthread_selfPtr.asFunction<int Function()>();

  int pthread_equal(
    int __thread1,
    int __thread2,
  ) {
    return _pthread_equal(
      __thread1,
      __thread2,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(int, int)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_init(
      __attr,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_destroy(
      __attr,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __detachstate,
  ) {
    return _pthread_attr_getdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    int __detachstate,
  ) {
    return _pthread_attr_setdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __guardsize,
  ) {
    return _pthread_attr_getguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __guardsize,
  ) {
    return _pthread_attr_setguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_getschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_setschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __policy,
  ) {
    return _pthread_attr_getschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    int __policy,
  ) {
    return _pthread_attr_setschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __inherit,
  ) {
    return _pthread_attr_getinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    int __inherit,
  ) {
    return _pthread_attr_setinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __scope,
  ) {
    return _pthread_attr_getscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> __attr,
    int __scope,
  ) {
    return _pthread_attr_setscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ) {
    return _pthread_attr_getstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
  ) {
    return _pthread_attr_setstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __stacksize,
  ) {
    return _pthread_attr_setstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
    int __stacksize,
  ) {
    return _pthread_attr_setstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_setschedparam(
    int __target_thread,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_setschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int pthread_getschedparam(
    int __target_thread,
    ffi.Pointer<ffi.Int> __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_getschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  int pthread_setschedprio(
    int __target_thread,
    int __prio,
  ) {
    return _pthread_setschedprio(
      __target_thread,
      __prio,
    );
  }

  late final _pthread_setschedprioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_setschedprio');
  late final _pthread_setschedprio =
      _pthread_setschedprioPtr.asFunction<int Function(int, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> __once_control,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
  ) {
    return _pthread_once(
      __once_control,
      __init_routine,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_setcancelstate(
    int __state,
    ffi.Pointer<ffi.Int> __oldstate,
  ) {
    return _pthread_setcancelstate(
      __state,
      __oldstate,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int __type,
    ffi.Pointer<ffi.Int> __oldtype,
  ) {
    return _pthread_setcanceltype(
      __type,
      __oldtype,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_cancel(
    int __th,
  ) {
    return _pthread_cancel(
      __th,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(int)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<pthread_mutexattr_t> __mutexattr,
  ) {
    return _pthread_mutex_init(
      __mutex,
      __mutexattr,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_destroy(
      __mutex,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_trylock(
      __mutex,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_lock(
      __mutex,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_timedlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_mutex_timedlock(
      __mutex,
      __abstime,
    );
  }

  late final _pthread_mutex_timedlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_mutex_timedlock');
  late final _pthread_mutex_timedlock = _pthread_mutex_timedlockPtr.asFunction<
      int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_unlock(
      __mutex,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutex_getprioceiling(
      __mutex,
      __prioceiling,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    int __prioceiling,
    ffi.Pointer<ffi.Int> __old_ceiling,
  ) {
    return _pthread_mutex_setprioceiling(
      __mutex,
      __prioceiling,
      __old_ceiling,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_consistent(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_consistent(
      __mutex,
    );
  }

  late final _pthread_mutex_consistentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_consistent');
  late final _pthread_mutex_consistent = _pthread_mutex_consistentPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_init(
      __attr,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_destroy(
      __attr,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_mutexattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_mutexattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __kind,
  ) {
    return _pthread_mutexattr_gettype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __kind,
  ) {
    return _pthread_mutexattr_settype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __protocol,
  ) {
    return _pthread_mutexattr_getprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __protocol,
  ) {
    return _pthread_mutexattr_setprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutexattr_getprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __prioceiling,
  ) {
    return _pthread_mutexattr_setprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __robustness,
  ) {
    return _pthread_mutexattr_getrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_getrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getrobust');
  late final _pthread_mutexattr_getrobust =
      _pthread_mutexattr_getrobustPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __robustness,
  ) {
    return _pthread_mutexattr_setrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_setrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setrobust');
  late final _pthread_mutexattr_setrobust = _pthread_mutexattr_setrobustPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlock_init(
      __rwlock,
      __attr,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_destroy(
      __rwlock,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_rdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_tryrdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedrdlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedrdlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedrdlock');
  late final _pthread_rwlock_timedrdlock =
      _pthread_rwlock_timedrdlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_wrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_trywrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedwrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedwrlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedwrlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedwrlock');
  late final _pthread_rwlock_timedwrlock =
      _pthread_rwlock_timedwrlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_unlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_init(
      __attr,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_destroy(
      __attr,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_rwlockattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_rwlockattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_rwlockattr_getkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pref,
  ) {
    return _pthread_rwlockattr_getkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_getkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getkind_np');
  late final _pthread_rwlockattr_getkind_np =
      _pthread_rwlockattr_getkind_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pref,
  ) {
    return _pthread_rwlockattr_setkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_setkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setkind_np');
  late final _pthread_rwlockattr_setkind_np = _pthread_rwlockattr_setkind_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_condattr_t> __cond_attr,
  ) {
    return _pthread_cond_init(
      __cond,
      __cond_attr,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_destroy(
      __cond,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_signal(
      __cond,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_broadcast(
      __cond,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_cond_wait(
      __cond,
      __mutex,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_cond_timedwait(
      __cond,
      __mutex,
      __abstime,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_init(
      __attr,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_destroy(
      __attr,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_condattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_condattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_condattr_getclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<ffi.Int> __clock_id,
  ) {
    return _pthread_condattr_getclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_getclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getclock');
  late final _pthread_condattr_getclock =
      _pthread_condattr_getclockPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __clock_id,
  ) {
    return _pthread_condattr_setclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_setclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setclock');
  late final _pthread_condattr_setclock = _pthread_condattr_setclockPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_barrier_init(
    ffi.Pointer<pthread_barrier_t> __barrier,
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __count,
  ) {
    return _pthread_barrier_init(
      __barrier,
      __attr,
      __count,
    );
  }

  late final _pthread_barrier_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrier_t>,
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.UnsignedInt)>>('pthread_barrier_init');
  late final _pthread_barrier_init = _pthread_barrier_initPtr.asFunction<
      int Function(ffi.Pointer<pthread_barrier_t>,
          ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_barrier_destroy(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_destroy(
      __barrier,
    );
  }

  late final _pthread_barrier_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_destroy');
  late final _pthread_barrier_destroy = _pthread_barrier_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrier_wait(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_wait(
      __barrier,
    );
  }

  late final _pthread_barrier_waitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_wait');
  late final _pthread_barrier_wait = _pthread_barrier_waitPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrierattr_init(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_init(
      __attr,
    );
  }

  late final _pthread_barrierattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrierattr_t>)>>('pthread_barrierattr_init');
  late final _pthread_barrierattr_init = _pthread_barrierattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_destroy(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_destroy(
      __attr,
    );
  }

  late final _pthread_barrierattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>(
      'pthread_barrierattr_destroy');
  late final _pthread_barrierattr_destroy = _pthread_barrierattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_getpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_barrierattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_barrierattr_getpshared');
  late final _pthread_barrierattr_getpshared =
      _pthread_barrierattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_barrierattr_setpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_barrierattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Int)>>('pthread_barrierattr_setpshared');
  late final _pthread_barrierattr_setpshared =
      _pthread_barrierattr_setpsharedPtr
          .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> __key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        __destr_function,
  ) {
    return _pthread_key_create(
      __key,
      __destr_function,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int __key,
  ) {
    return _pthread_key_delete(
      __key,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int __key,
  ) {
    return _pthread_getspecific(
      __key,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_setspecific(
    int __key,
    ffi.Pointer<ffi.Void> __pointer,
  ) {
    return _pthread_setspecific(
      __key,
      __pointer,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int pthread_getcpuclockid(
    int __thread_id,
    ffi.Pointer<ffi.Int> __clock_id,
  ) {
    return _pthread_getcpuclockid(
      __thread_id,
      __clock_id,
    );
  }

  late final _pthread_getcpuclockidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Int>)>>('pthread_getcpuclockid');
  late final _pthread_getcpuclockid = _pthread_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
  ) {
    return _pthread_atfork(
      __prepare,
      __parent,
      __child,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  late final ffi.Pointer<ffi.Uint32> _slab_magic =
      _lookup<ffi.Uint32>('slab_magic');

  int get slab_magic => _slab_magic.value;

  set slab_magic(int value) => _slab_magic.value = value;

  void slab_cache_create(
    ffi.Pointer<slab_cache> cache,
    ffi.Pointer<slab_arena> arena,
  ) {
    return _slab_cache_create(
      cache,
      arena,
    );
  }

  late final _slab_cache_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<slab_cache>,
              ffi.Pointer<slab_arena>)>>('slab_cache_create');
  late final _slab_cache_create = _slab_cache_createPtr.asFunction<
      void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab_arena>)>();

  void slab_cache_destroy(
    ffi.Pointer<slab_cache> cache,
  ) {
    return _slab_cache_destroy(
      cache,
    );
  }

  late final _slab_cache_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_cache>)>>(
          'slab_cache_destroy');
  late final _slab_cache_destroy = _slab_cache_destroyPtr
      .asFunction<void Function(ffi.Pointer<slab_cache>)>();

  /// Allocate ordered slab
  /// @see slab_order()
  ffi.Pointer<slab> slab_get_with_order(
    ffi.Pointer<slab_cache> cache,
    int order,
  ) {
    return _slab_get_with_order(
      cache,
      order,
    );
  }

  late final _slab_get_with_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<slab> Function(
              ffi.Pointer<slab_cache>, ffi.Uint8)>>('slab_get_with_order');
  late final _slab_get_with_order = _slab_get_with_orderPtr
      .asFunction<ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, int)>();

  /// Deallocate ordered slab
  void slab_put_with_order(
    ffi.Pointer<slab_cache> cache,
    ffi.Pointer<slab> slab,
  ) {
    return _slab_put_with_order(
      cache,
      slab,
    );
  }

  late final _slab_put_with_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<slab_cache>,
              ffi.Pointer<slab>)>>('slab_put_with_order');
  late final _slab_put_with_order = _slab_put_with_orderPtr
      .asFunction<void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>();

  /// Allocate large slab.
  /// @pre size > slab_order_size(cache->arena->slab_size)
  ffi.Pointer<slab> slab_get_large(
    ffi.Pointer<slab_cache> slab,
    int size,
  ) {
    return _slab_get_large(
      slab,
      size,
    );
  }

  late final _slab_get_largePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<slab> Function(
              ffi.Pointer<slab_cache>, ffi.Size)>>('slab_get_large');
  late final _slab_get_large = _slab_get_largePtr
      .asFunction<ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, int)>();

  /// Deallocate large slab.
  /// @pre slab was allocated with slab_get_large()
  void slab_put_large(
    ffi.Pointer<slab_cache> cache,
    ffi.Pointer<slab> slab,
  ) {
    return _slab_put_large(
      cache,
      slab,
    );
  }

  late final _slab_put_largePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>>('slab_put_large');
  late final _slab_put_large = _slab_put_largePtr
      .asFunction<void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>();

  /// A shortcut for slab_get_with_order()/slab_get_large()
  /// @see slab_get_with_order()
  /// @see slab_get_large()
  ffi.Pointer<slab> slab_get(
    ffi.Pointer<slab_cache> cache,
    int size,
  ) {
    return _slab_get(
      cache,
      size,
    );
  }

  late final _slab_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<slab> Function(
              ffi.Pointer<slab_cache>, ffi.Size)>>('slab_get');
  late final _slab_get = _slab_getPtr
      .asFunction<ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, int)>();

  /// Shortcut for slab_put_with_order()/slab_put_large()
  /// @see slab_get_with_order()
  /// @see slab_get_large()
  void slab_put(
    ffi.Pointer<slab_cache> cache,
    ffi.Pointer<slab> slab,
  ) {
    return _slab_put(
      cache,
      slab,
    );
  }

  late final _slab_putPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>>('slab_put');
  late final _slab_put = _slab_putPtr
      .asFunction<void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>();

  void slab_cache_check(
    ffi.Pointer<slab_cache> cache,
  ) {
    return _slab_cache_check(
      cache,
    );
  }

  late final _slab_cache_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_cache>)>>(
          'slab_cache_check');
  late final _slab_cache_check =
      _slab_cache_checkPtr.asFunction<void Function(ffi.Pointer<slab_cache>)>();

  /// Mempool will try to allocate blocks large enough to ensure
  /// the overhead from internal fragmentation is less than the
  /// specified below.
  late final ffi.Pointer<ffi.Double> _OVERHEAD_RATIO =
      _lookup<ffi.Double>('OVERHEAD_RATIO');

  double get OVERHEAD_RATIO => _OVERHEAD_RATIO.value;

  set OVERHEAD_RATIO(double value) => _OVERHEAD_RATIO.value = value;

  void mempool_stats1(
    ffi.Pointer<mempool> mempool,
    ffi.Pointer<mempool_stats> stats,
  ) {
    return _mempool_stats1(
      mempool,
      stats,
    );
  }

  late final _mempool_stats1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mempool>,
              ffi.Pointer<mempool_stats>)>>('mempool_stats');
  late final _mempool_stats1 = _mempool_stats1Ptr.asFunction<
      void Function(ffi.Pointer<mempool>, ffi.Pointer<mempool_stats>)>();

  /// @todo: struct mempool_iterator
  void mempool_create_with_order(
    ffi.Pointer<mempool> pool,
    ffi.Pointer<slab_cache> cache,
    int objsize,
    int order,
  ) {
    return _mempool_create_with_order(
      pool,
      cache,
      objsize,
      order,
    );
  }

  late final _mempool_create_with_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mempool>, ffi.Pointer<slab_cache>,
              ffi.Uint32, ffi.Uint8)>>('mempool_create_with_order');
  late final _mempool_create_with_order =
      _mempool_create_with_orderPtr.asFunction<
          void Function(
              ffi.Pointer<mempool>, ffi.Pointer<slab_cache>, int, int)>();

  /// Free the memory pool and release all cached memory blocks.
  /// @sa mempool_create()
  void mempool_destroy(
    ffi.Pointer<mempool> pool,
  ) {
    return _mempool_destroy(
      pool,
    );
  }

  late final _mempool_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mempool>)>>(
          'mempool_destroy');
  late final _mempool_destroy =
      _mempool_destroyPtr.asFunction<void Function(ffi.Pointer<mempool>)>();

  /// Allocate an object.
  ffi.Pointer<ffi.Void> mempool_alloc(
    ffi.Pointer<mempool> pool,
  ) {
    return _mempool_alloc(
      pool,
    );
  }

  late final _mempool_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<mempool>)>>('mempool_alloc');
  late final _mempool_alloc = _mempool_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<mempool>)>();

  void mslab_free(
    ffi.Pointer<mempool> pool,
    ffi.Pointer<mslab> slab,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _mslab_free(
      pool,
      slab,
      ptr,
    );
  }

  late final _mslab_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mempool>, ffi.Pointer<mslab>,
              ffi.Pointer<ffi.Void>)>>('mslab_free');
  late final _mslab_free = _mslab_freePtr.asFunction<
      void Function(
          ffi.Pointer<mempool>, ffi.Pointer<mslab>, ffi.Pointer<ffi.Void>)>();

  /// Create an instance of small_class evaluator. All args must meet the
  /// requirements, undefined behaviour otherwise (at least assert).
  /// @param sc - instance to create.
  /// @param granularity - any class size will be a multiple of this value.
  /// Must be a power of 2 (and thus greater than zero).
  /// @param desired_factor - desired factor of growth of class size.
  /// Must be in (1, 2] range. Actual factor can be different.
  /// @param min_alloc - the lowest class size, must be greater than zero.
  /// The good choice is the same value as granularity.
  /// @param actual_factor calculated on the basis of desired factor
  void small_class_create(
    ffi.Pointer<small_class> sc,
    int granularity,
    double desired_factor,
    int min_alloc,
    ffi.Pointer<ffi.Float> actual_factor,
  ) {
    return _small_class_create(
      sc,
      granularity,
      desired_factor,
      min_alloc,
      actual_factor,
    );
  }

  late final _small_class_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<small_class>,
              ffi.UnsignedInt,
              ffi.Float,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Float>)>>('small_class_create');
  late final _small_class_create = _small_class_createPtr.asFunction<
      void Function(ffi.Pointer<small_class>, int, double, int,
          ffi.Pointer<ffi.Float>)>();

  /// Initialize a small memory allocator.
  /// @param alloc - instance to create.
  /// @param cache - pointer to used slab cache.
  /// @param objsize_min - minimal object size.
  /// @param granularity - alignment of objects in pools
  /// @param alloc_factor - desired factor of growth object size.
  /// Must be in (1, 2] range.
  /// @param actual_alloc_factor real allocation factor calculated the basis of
  /// desired alloc_factor
  void small_alloc_create(
    ffi.Pointer<small_alloc> alloc,
    ffi.Pointer<slab_cache> cache,
    int objsize_min,
    int granularity,
    double alloc_factor,
    ffi.Pointer<ffi.Float> actual_alloc_factor,
  ) {
    return _small_alloc_create(
      alloc,
      cache,
      objsize_min,
      granularity,
      alloc_factor,
      actual_alloc_factor,
    );
  }

  late final _small_alloc_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<small_alloc>,
              ffi.Pointer<slab_cache>,
              ffi.Uint32,
              ffi.UnsignedInt,
              ffi.Float,
              ffi.Pointer<ffi.Float>)>>('small_alloc_create');
  late final _small_alloc_create = _small_alloc_createPtr.asFunction<
      void Function(ffi.Pointer<small_alloc>, ffi.Pointer<slab_cache>, int, int,
          double, ffi.Pointer<ffi.Float>)>();

  /// Enter or leave delayed mode - in delayed mode smfree_delayed()
  /// doesn't free chunks but puts them into a pool.
  void small_alloc_setopt(
    ffi.Pointer<small_alloc> alloc,
    int opt,
    bool val,
  ) {
    return _small_alloc_setopt(
      alloc,
      opt,
      val,
    );
  }

  late final _small_alloc_setoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Int32,
              ffi.Bool)>>('small_alloc_setopt');
  late final _small_alloc_setopt = _small_alloc_setoptPtr
      .asFunction<void Function(ffi.Pointer<small_alloc>, int, bool)>();

  /// Destroy the allocator and all allocated memory.
  void small_alloc_destroy(
    ffi.Pointer<small_alloc> alloc,
  ) {
    return _small_alloc_destroy(
      alloc,
    );
  }

  late final _small_alloc_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<small_alloc>)>>(
          'small_alloc_destroy');
  late final _small_alloc_destroy = _small_alloc_destroyPtr
      .asFunction<void Function(ffi.Pointer<small_alloc>)>();

  /// Allocate a piece of memory in the small allocator.
  ///
  /// @retval NULL   the requested size is beyond objsize_max
  /// or out of memory
  ffi.Pointer<ffi.Void> smalloc(
    ffi.Pointer<small_alloc> alloc,
    int size,
  ) {
    return _smalloc(
      alloc,
      size,
    );
  }

  late final _smallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<small_alloc>, ffi.Size)>>('smalloc');
  late final _smalloc = _smallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<small_alloc>, int)>();

  /// Free memory chunk allocated by the small allocator. */
  /// /**
  /// Free a small objects.
  ///
  /// This boils down to finding the object's mempool and delegating
  /// to mempool_free().
  void smfree(
    ffi.Pointer<small_alloc> alloc,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _smfree(
      alloc,
      ptr,
      size,
    );
  }

  late final _smfreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('smfree');
  late final _smfree = _smfreePtr.asFunction<
      void Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>, int)>();

  /// Free memory chunk allocated by the small allocator
  /// if not in snapshot mode, otherwise put to the delayed
  /// free list.
  void smfree_delayed(
    ffi.Pointer<small_alloc> alloc,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _smfree_delayed(
      alloc,
      ptr,
      size,
    );
  }

  late final _smfree_delayedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('smfree_delayed');
  late final _smfree_delayed = _smfree_delayedPtr.asFunction<
      void Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>, int)>();

  /// @brief Return an unique index associated with a chunk allocated
  /// by the allocator.
  ///
  /// This index space is more dense than the pointers space,
  /// especially in the least significant bits.  This number is
  /// needed because some types of box's indexes (e.g. BITSET) have
  /// better performance then they operate on sequential offsets
  /// (i.e. dense space) instead of memory pointers (sparse space).
  ///
  /// The calculation is based on SLAB number and the position of an
  /// item within it. Current implementation only guarantees that
  /// adjacent chunks from one SLAB will have consecutive indexes.
  /// That is, if two chunks were sequentially allocated from one
  /// chunk they will have sequential ids. If a second chunk was
  /// allocated from another SLAB thеn the difference between indexes
  /// may be more than one.
  ///
  /// @param ptr pointer to memory allocated in small_alloc
  /// @return unique index
  int small_ptr_compress(
    ffi.Pointer<small_alloc> alloc,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _small_ptr_compress(
      alloc,
      ptr,
    );
  }

  late final _small_ptr_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<small_alloc>,
              ffi.Pointer<ffi.Void>)>>('small_ptr_compress');
  late final _small_ptr_compress = _small_ptr_compressPtr.asFunction<
      int Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>)>();

  /// Perform the opposite action of small_ptr_compress().
  ffi.Pointer<ffi.Void> small_ptr_decompress(
    ffi.Pointer<small_alloc> alloc,
    int val,
  ) {
    return _small_ptr_decompress(
      alloc,
      val,
    );
  }

  late final _small_ptr_decompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<small_alloc>, ffi.Size)>>('small_ptr_decompress');
  late final _small_ptr_decompress = _small_ptr_decompressPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<small_alloc>, int)>();

  void small_stats1(
    ffi.Pointer<small_alloc> alloc,
    ffi.Pointer<small_stats> totals,
    mempool_stats_cb cb,
    ffi.Pointer<ffi.Void> cb_ctx,
  ) {
    return _small_stats1(
      alloc,
      totals,
      cb,
      cb_ctx,
    );
  }

  late final _small_stats1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Pointer<small_stats>,
              mempool_stats_cb, ffi.Pointer<ffi.Void>)>>('small_stats');
  late final _small_stats1 = _small_stats1Ptr.asFunction<
      void Function(ffi.Pointer<small_alloc>, ffi.Pointer<small_stats>,
          mempool_stats_cb, ffi.Pointer<ffi.Void>)>();

  /// Is this an error handle?
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsError(
    Object handle,
  ) {
    return _Dart_IsError(
      handle,
    );
  }

  late final _Dart_IsErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsError');
  late final _Dart_IsError =
      _Dart_IsErrorPtr.asFunction<bool Function(Object)>();

  /// Is this an api error handle?
  ///
  /// Api error handles are produced when an api function is misused.
  /// This happens when a Dart embedding api function is called with
  /// invalid arguments or in an invalid context.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsApiError(
    Object handle,
  ) {
    return _Dart_IsApiError(
      handle,
    );
  }

  late final _Dart_IsApiErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsApiError');
  late final _Dart_IsApiError =
      _Dart_IsApiErrorPtr.asFunction<bool Function(Object)>();

  /// Is this an unhandled exception error handle?
  ///
  /// Unhandled exception error handles are produced when, during the
  /// execution of Dart code, an exception is thrown but not caught.
  /// This can occur in any function which triggers the execution of Dart
  /// code.
  ///
  /// See Dart_ErrorGetException and Dart_ErrorGetStackTrace.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsUnhandledExceptionError(
    Object handle,
  ) {
    return _Dart_IsUnhandledExceptionError(
      handle,
    );
  }

  late final _Dart_IsUnhandledExceptionErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsUnhandledExceptionError');
  late final _Dart_IsUnhandledExceptionError =
      _Dart_IsUnhandledExceptionErrorPtr.asFunction<bool Function(Object)>();

  /// Is this a compilation error handle?
  ///
  /// Compilation error handles are produced when, during the execution
  /// of Dart code, a compile-time error occurs.  This can occur in any
  /// function which triggers the execution of Dart code.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsCompilationError(
    Object handle,
  ) {
    return _Dart_IsCompilationError(
      handle,
    );
  }

  late final _Dart_IsCompilationErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsCompilationError');
  late final _Dart_IsCompilationError =
      _Dart_IsCompilationErrorPtr.asFunction<bool Function(Object)>();

  /// Is this a fatal error handle?
  ///
  /// Fatal error handles are produced when the system wants to shut down
  /// the current isolate.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsFatalError(
    Object handle,
  ) {
    return _Dart_IsFatalError(
      handle,
    );
  }

  late final _Dart_IsFatalErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsFatalError');
  late final _Dart_IsFatalError =
      _Dart_IsFatalErrorPtr.asFunction<bool Function(Object)>();

  /// Gets the error message from an error handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A C string containing an error message if the handle is
  /// error. An empty C string ("") if the handle is valid. This C
  /// String is scope allocated and is only valid until the next call
  /// to Dart_ExitScope.
  ffi.Pointer<ffi.Char> Dart_GetError(
    Object handle,
  ) {
    return _Dart_GetError(
      handle,
    );
  }

  late final _Dart_GetErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'Dart_GetError');
  late final _Dart_GetError =
      _Dart_GetErrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  /// Is this an error handle for an unhandled exception?
  bool Dart_ErrorHasException(
    Object handle,
  ) {
    return _Dart_ErrorHasException(
      handle,
    );
  }

  late final _Dart_ErrorHasExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_ErrorHasException');
  late final _Dart_ErrorHasException =
      _Dart_ErrorHasExceptionPtr.asFunction<bool Function(Object)>();

  /// Gets the exception Object from an unhandled exception error handle.
  Object Dart_ErrorGetException(
    Object handle,
  ) {
    return _Dart_ErrorGetException(
      handle,
    );
  }

  late final _Dart_ErrorGetExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ErrorGetException');
  late final _Dart_ErrorGetException =
      _Dart_ErrorGetExceptionPtr.asFunction<Object Function(Object)>();

  /// Gets the stack trace Object from an unhandled exception error handle.
  Object Dart_ErrorGetStackTrace(
    Object handle,
  ) {
    return _Dart_ErrorGetStackTrace(
      handle,
    );
  }

  late final _Dart_ErrorGetStackTracePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ErrorGetStackTrace');
  late final _Dart_ErrorGetStackTrace =
      _Dart_ErrorGetStackTracePtr.asFunction<Object Function(Object)>();

  /// Produces an api error handle with the provided error message.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param error the error message.
  Object Dart_NewApiError(
    ffi.Pointer<ffi.Char> error,
  ) {
    return _Dart_NewApiError(
      error,
    );
  }

  late final _Dart_NewApiErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewApiError');
  late final _Dart_NewApiError =
      _Dart_NewApiErrorPtr.asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object Dart_NewCompilationError(
    ffi.Pointer<ffi.Char> error,
  ) {
    return _Dart_NewCompilationError(
      error,
    );
  }

  late final _Dart_NewCompilationErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewCompilationError');
  late final _Dart_NewCompilationError = _Dart_NewCompilationErrorPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  /// Produces a new unhandled exception error handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param exception An instance of a Dart object to be thrown or
  /// an ApiError or CompilationError handle.
  /// When an ApiError or CompilationError handle is passed in
  /// a string object of the error message is created and it becomes
  /// the Dart object to be thrown.
  Object Dart_NewUnhandledExceptionError(
    Object exception,
  ) {
    return _Dart_NewUnhandledExceptionError(
      exception,
    );
  }

  late final _Dart_NewUnhandledExceptionErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewUnhandledExceptionError');
  late final _Dart_NewUnhandledExceptionError =
      _Dart_NewUnhandledExceptionErrorPtr.asFunction<Object Function(Object)>();

  /// Propagates an error.
  ///
  /// If the provided handle is an unhandled exception error, this
  /// function will cause the unhandled exception to be rethrown.  This
  /// will proceed in the standard way, walking up Dart frames until an
  /// appropriate 'catch' block is found, executing 'finally' blocks,
  /// etc.
  ///
  /// If the error is not an unhandled exception error, we will unwind
  /// the stack to the next C frame.  Intervening Dart frames will be
  /// discarded; specifically, 'finally' blocks will not execute.  This
  /// is the standard way that compilation errors (and the like) are
  /// handled by the Dart runtime.
  ///
  /// In either case, when an error is propagated any current scopes
  /// created by Dart_EnterScope will be exited.
  ///
  /// See the additional discussion under "Propagating Errors" at the
  /// beginning of this file.
  ///
  /// \param handle An error handle (See Dart_IsError)
  ///
  /// On success, this function does not return.  On failure, the
  /// process is terminated.
  void Dart_PropagateError(
    Object handle,
  ) {
    return _Dart_PropagateError(
      handle,
    );
  }

  late final _Dart_PropagateErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_PropagateError');
  late final _Dart_PropagateError =
      _Dart_PropagateErrorPtr.asFunction<void Function(Object)>();

  /// Converts an object to a string.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return The converted string if no error occurs during
  /// the conversion. If an error does occur, an error handle is
  /// returned.
  Object Dart_ToString(
    Object object,
  ) {
    return _Dart_ToString(
      object,
    );
  }

  late final _Dart_ToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ToString');
  late final _Dart_ToString =
      _Dart_ToStringPtr.asFunction<Object Function(Object)>();

  /// Checks to see if two handles refer to identically equal objects.
  ///
  /// If both handles refer to instances, this is equivalent to using the top-level
  /// function identical() from dart:core. Otherwise, returns whether the two
  /// argument handles refer to the same object.
  ///
  /// \param obj1 An object to be compared.
  /// \param obj2 An object to be compared.
  ///
  /// \return True if the objects are identically equal.  False otherwise.
  bool Dart_IdentityEquals(
    Object obj1,
    Object obj2,
  ) {
    return _Dart_IdentityEquals(
      obj1,
      obj2,
    );
  }

  late final _Dart_IdentityEqualsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle, ffi.Handle)>>(
          'Dart_IdentityEquals');
  late final _Dart_IdentityEquals =
      _Dart_IdentityEqualsPtr.asFunction<bool Function(Object, Object)>();

  /// Allocates a handle in the current scope from a persistent handle.
  Object Dart_HandleFromPersistent(
    Object object,
  ) {
    return _Dart_HandleFromPersistent(
      object,
    );
  }

  late final _Dart_HandleFromPersistentPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_HandleFromPersistent');
  late final _Dart_HandleFromPersistent =
      _Dart_HandleFromPersistentPtr.asFunction<Object Function(Object)>();

  /// Allocates a handle in the current scope from a weak persistent handle.
  ///
  /// This will be a handle to Dart_Null if the object has been garbage collected.
  Object Dart_HandleFromWeakPersistent(
    Dart_WeakPersistentHandle object,
  ) {
    return _Dart_HandleFromWeakPersistent(
      object,
    );
  }

  late final _Dart_HandleFromWeakPersistentPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_WeakPersistentHandle)>>(
      'Dart_HandleFromWeakPersistent');
  late final _Dart_HandleFromWeakPersistent = _Dart_HandleFromWeakPersistentPtr
      .asFunction<Object Function(Dart_WeakPersistentHandle)>();

  /// Allocates a persistent handle for an object.
  ///
  /// This handle has the lifetime of the current isolate unless it is
  /// explicitly deallocated by calling Dart_DeletePersistentHandle.
  ///
  /// Requires there to be a current isolate.
  Object Dart_NewPersistentHandle(
    Object object,
  ) {
    return _Dart_NewPersistentHandle(
      object,
    );
  }

  late final _Dart_NewPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewPersistentHandle');
  late final _Dart_NewPersistentHandle =
      _Dart_NewPersistentHandlePtr.asFunction<Object Function(Object)>();

  /// Assign value of local handle to a persistent handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param obj1 A persistent handle whose value needs to be set.
  /// \param obj2 An object whose value needs to be set to the persistent handle.
  void Dart_SetPersistentHandle(
    Object obj1,
    Object obj2,
  ) {
    return _Dart_SetPersistentHandle(
      obj1,
      obj2,
    );
  }

  late final _Dart_SetPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'Dart_SetPersistentHandle');
  late final _Dart_SetPersistentHandle =
      _Dart_SetPersistentHandlePtr.asFunction<void Function(Object, Object)>();

  /// Deallocates a persistent handle.
  ///
  /// Requires there to be a current isolate group.
  void Dart_DeletePersistentHandle(
    Object object,
  ) {
    return _Dart_DeletePersistentHandle(
      object,
    );
  }

  late final _Dart_DeletePersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_DeletePersistentHandle');
  late final _Dart_DeletePersistentHandle =
      _Dart_DeletePersistentHandlePtr.asFunction<void Function(Object)>();

  /// Allocates a weak persistent handle for an object.
  ///
  /// This handle has the lifetime of the current isolate. The handle can also be
  /// explicitly deallocated by calling Dart_DeleteWeakPersistentHandle.
  ///
  /// If the object becomes unreachable the callback is invoked with the peer as
  /// argument. The callback can be executed on any thread, will have a current
  /// isolate group, but will not have a current isolate. The callback can only
  /// call Dart_DeletePersistentHandle or Dart_DeleteWeakPersistentHandle. This
  /// gives the embedder the ability to cleanup data associated with the object.
  /// The handle will point to the Dart_Null object after the finalizer has been
  /// run. It is illegal to call into the VM with any other Dart_* functions from
  /// the callback. If the handle is deleted before the object becomes
  /// unreachable, the callback is never invoked.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param object An object with identity.
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The weak persistent handle or NULL. NULL is returned in case of bad
  /// parameters.
  Dart_WeakPersistentHandle Dart_NewWeakPersistentHandle(
    Object object,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewWeakPersistentHandle(
      object,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewWeakPersistentHandlePtr = _lookup<
      ffi.NativeFunction<
          Dart_WeakPersistentHandle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewWeakPersistentHandle');
  late final _Dart_NewWeakPersistentHandle =
      _Dart_NewWeakPersistentHandlePtr.asFunction<
          Dart_WeakPersistentHandle Function(
              Object, ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Deletes the given weak persistent [object] handle.
  ///
  /// Requires there to be a current isolate group.
  void Dart_DeleteWeakPersistentHandle(
    Dart_WeakPersistentHandle object,
  ) {
    return _Dart_DeleteWeakPersistentHandle(
      object,
    );
  }

  late final _Dart_DeleteWeakPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_WeakPersistentHandle)>>(
          'Dart_DeleteWeakPersistentHandle');
  late final _Dart_DeleteWeakPersistentHandle =
      _Dart_DeleteWeakPersistentHandlePtr.asFunction<
          void Function(Dart_WeakPersistentHandle)>();

  /// Updates the external memory size for the given weak persistent handle.
  ///
  /// May trigger garbage collection.
  void Dart_UpdateExternalSize(
    Dart_WeakPersistentHandle object,
    int external_allocation_size,
  ) {
    return _Dart_UpdateExternalSize(
      object,
      external_allocation_size,
    );
  }

  late final _Dart_UpdateExternalSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_WeakPersistentHandle,
              ffi.IntPtr)>>('Dart_UpdateExternalSize');
  late final _Dart_UpdateExternalSize = _Dart_UpdateExternalSizePtr.asFunction<
      void Function(Dart_WeakPersistentHandle, int)>();

  /// Allocates a finalizable handle for an object.
  ///
  /// This handle has the lifetime of the current isolate group unless the object
  /// pointed to by the handle is garbage collected, in this case the VM
  /// automatically deletes the handle after invoking the callback associated
  /// with the handle. The handle can also be explicitly deallocated by
  /// calling Dart_DeleteFinalizableHandle.
  ///
  /// If the object becomes unreachable the callback is invoked with the
  /// the peer as argument. The callback can be executed on any thread, will have
  /// an isolate group, but will not have a current isolate. The callback can only
  /// call Dart_DeletePersistentHandle or Dart_DeleteWeakPersistentHandle.
  /// This gives the embedder the ability to cleanup data associated with the
  /// object and clear out any cached references to the handle. All references to
  /// this handle after the callback will be invalid. It is illegal to call into
  /// the VM with any other Dart_* functions from the callback. If the handle is
  /// deleted before the object becomes unreachable, the callback is never
  /// invoked.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param object An object with identity.
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The finalizable handle or NULL. NULL is returned in case of bad
  /// parameters.
  Dart_FinalizableHandle Dart_NewFinalizableHandle(
    Object object,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewFinalizableHandle(
      object,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewFinalizableHandlePtr = _lookup<
      ffi.NativeFunction<
          Dart_FinalizableHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
              ffi.IntPtr, Dart_HandleFinalizer)>>('Dart_NewFinalizableHandle');
  late final _Dart_NewFinalizableHandle =
      _Dart_NewFinalizableHandlePtr.asFunction<
          Dart_FinalizableHandle Function(
              Object, ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Deletes the given finalizable [object] handle.
  ///
  /// The caller has to provide the actual Dart object the handle was created from
  /// to prove the object (and therefore the finalizable handle) is still alive.
  ///
  /// Requires there to be a current isolate.
  void Dart_DeleteFinalizableHandle(
    Dart_FinalizableHandle object,
    Object strong_ref_to_object,
  ) {
    return _Dart_DeleteFinalizableHandle(
      object,
      strong_ref_to_object,
    );
  }

  late final _Dart_DeleteFinalizableHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_FinalizableHandle,
              ffi.Handle)>>('Dart_DeleteFinalizableHandle');
  late final _Dart_DeleteFinalizableHandle = _Dart_DeleteFinalizableHandlePtr
      .asFunction<void Function(Dart_FinalizableHandle, Object)>();

  /// Updates the external memory size for the given finalizable handle.
  ///
  /// The caller has to provide the actual Dart object the handle was created from
  /// to prove the object (and therefore the finalizable handle) is still alive.
  ///
  /// May trigger garbage collection.
  void Dart_UpdateFinalizableExternalSize(
    Dart_FinalizableHandle object,
    Object strong_ref_to_object,
    int external_allocation_size,
  ) {
    return _Dart_UpdateFinalizableExternalSize(
      object,
      strong_ref_to_object,
      external_allocation_size,
    );
  }

  late final _Dart_UpdateFinalizableExternalSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_FinalizableHandle, ffi.Handle,
              ffi.IntPtr)>>('Dart_UpdateFinalizableExternalSize');
  late final _Dart_UpdateFinalizableExternalSize =
      _Dart_UpdateFinalizableExternalSizePtr.asFunction<
          void Function(Dart_FinalizableHandle, Object, int)>();

  /// Gets the version string for the Dart VM.
  ///
  /// The version of the Dart VM can be accessed without initializing the VM.
  ///
  /// \return The version string for the embedded Dart VM.
  ffi.Pointer<ffi.Char> Dart_VersionString() {
    return _Dart_VersionString();
  }

  late final _Dart_VersionStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Dart_VersionString');
  late final _Dart_VersionString =
      _Dart_VersionStringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Initialize Dart_IsolateFlags with correct version and default values.
  void Dart_IsolateFlagsInitialize(
    ffi.Pointer<Dart_IsolateFlags> flags,
  ) {
    return _Dart_IsolateFlagsInitialize(
      flags,
    );
  }

  late final _Dart_IsolateFlagsInitializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Dart_IsolateFlags>)>>('Dart_IsolateFlagsInitialize');
  late final _Dart_IsolateFlagsInitialize = _Dart_IsolateFlagsInitializePtr
      .asFunction<void Function(ffi.Pointer<Dart_IsolateFlags>)>();

  /// Initializes the VM.
  ///
  /// \param params A struct containing initialization information. The version
  /// field of the struct must be DART_INITIALIZE_PARAMS_CURRENT_VERSION.
  ///
  /// \return NULL if initialization is successful. Returns an error message
  /// otherwise. The caller is responsible for freeing the error message.
  ffi.Pointer<ffi.Char> Dart_Initialize(
    ffi.Pointer<Dart_InitializeParams> params,
  ) {
    return _Dart_Initialize(
      params,
    );
  }

  late final _Dart_InitializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Dart_InitializeParams>)>>('Dart_Initialize');
  late final _Dart_Initialize = _Dart_InitializePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Dart_InitializeParams>)>();

  /// Cleanup state in the VM before process termination.
  ///
  /// \return NULL if cleanup is successful. Returns an error message otherwise.
  /// The caller is responsible for freeing the error message.
  ///
  /// NOTE: This function must not be called on a thread that was created by the VM
  /// itself.
  ffi.Pointer<ffi.Char> Dart_Cleanup() {
    return _Dart_Cleanup();
  }

  late final _Dart_CleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Dart_Cleanup');
  late final _Dart_Cleanup =
      _Dart_CleanupPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Sets command line flags. Should be called before Dart_Initialize.
  ///
  /// \param argc The length of the arguments array.
  /// \param argv An array of arguments.
  ///
  /// \return NULL if successful. Returns an error message otherwise.
  /// The caller is responsible for freeing the error message.
  ///
  /// NOTE: This call does not store references to the passed in c-strings.
  ffi.Pointer<ffi.Char> Dart_SetVMFlags(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _Dart_SetVMFlags(
      argc,
      argv,
    );
  }

  late final _Dart_SetVMFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_SetVMFlags');
  late final _Dart_SetVMFlags = _Dart_SetVMFlagsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Returns true if the named VM flag is of boolean type, specified, and set to
  /// true.
  ///
  /// \param flag_name The name of the flag without leading punctuation
  /// (example: "enable_asserts").
  bool Dart_IsVMFlagSet(
    ffi.Pointer<ffi.Char> flag_name,
  ) {
    return _Dart_IsVMFlagSet(
      flag_name,
    );
  }

  late final _Dart_IsVMFlagSetPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_IsVMFlagSet');
  late final _Dart_IsVMFlagSet =
      _Dart_IsVMFlagSetPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  /// Creates a new isolate. The new isolate becomes the current isolate.
  ///
  /// A snapshot can be used to restore the VM quickly to a saved state
  /// and is useful for fast startup. If snapshot data is provided, the
  /// isolate will be started using that snapshot data. Requires a core snapshot or
  /// an app snapshot created by Dart_CreateSnapshot or
  /// Dart_CreatePrecompiledSnapshot* from a VM with the same version.
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param script_uri The main source file or snapshot this isolate will load.
  /// The VM will provide this URI to the Dart_IsolateGroupCreateCallback when a
  /// child isolate is created by Isolate.spawn. The embedder should use a URI
  /// that allows it to load the same program into such a child isolate.
  /// \param name A short name for the isolate to improve debugging messages.
  /// Typically of the format 'foo.dart:main()'.
  /// \param isolate_snapshot_data Buffer containing the snapshot data of the
  /// isolate or NULL if no snapshot is provided. If provided, the buffer must
  /// remain valid until the isolate shuts down.
  /// \param isolate_snapshot_instructions Buffer containing the snapshot
  /// instructions of the isolate or NULL if no snapshot is provided. If
  /// provided, the buffer must remain valid until the isolate shuts down.
  /// \param flags Pointer to VM specific flags or NULL for default flags.
  /// \param isolate_group_data Embedder group data. This data can be obtained
  /// by calling Dart_IsolateGroupData and will be passed to the
  /// Dart_IsolateShutdownCallback, Dart_IsolateCleanupCallback, and
  /// Dart_IsolateGroupCleanupCallback.
  /// \param isolate_data Embedder data.  This data will be passed to
  /// the Dart_IsolateGroupCreateCallback when new isolates are spawned from
  /// this parent isolate.
  /// \param error Returns NULL if creation is successful, an error message
  /// otherwise. The caller is responsible for calling free() on the error
  /// message.
  ///
  /// \return The new isolate on success, or NULL if isolate creation failed.
  Dart_Isolate Dart_CreateIsolateGroup(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Uint8> isolate_snapshot_data,
    ffi.Pointer<ffi.Uint8> isolate_snapshot_instructions,
    ffi.Pointer<Dart_IsolateFlags> flags,
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateGroup(
      script_uri,
      name,
      isolate_snapshot_data,
      isolate_snapshot_instructions,
      flags,
      isolate_group_data,
      isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateGroupPtr = _lookup<
      ffi.NativeFunction<
          Dart_Isolate Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<Dart_IsolateFlags>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_CreateIsolateGroup');
  late final _Dart_CreateIsolateGroup = _Dart_CreateIsolateGroupPtr.asFunction<
      Dart_Isolate Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<Dart_IsolateFlags>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Creates a new isolate inside the isolate group of [group_member].
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param group_member An isolate from the same group into which the newly created
  /// isolate should be born into. Other threads may not have entered / enter this
  /// member isolate.
  /// \param name A short name for the isolate for debugging purposes.
  /// \param shutdown_callback A callback to be called when the isolate is being
  /// shutdown (may be NULL).
  /// \param cleanup_callback A callback to be called when the isolate is being
  /// cleaned up (may be NULL).
  /// \param isolate_data The embedder-specific data associated with this isolate.
  /// \param error Set to NULL if creation is successful, set to an error
  /// message otherwise. The caller is responsible for calling free() on the
  /// error message.
  ///
  /// \return The newly created isolate on success, or NULL if isolate creation
  /// failed.
  ///
  /// If successful, the newly created isolate will become the current isolate.
  Dart_Isolate Dart_CreateIsolateInGroup(
    Dart_Isolate group_member,
    ffi.Pointer<ffi.Char> name,
    Dart_IsolateShutdownCallback shutdown_callback,
    Dart_IsolateCleanupCallback cleanup_callback,
    ffi.Pointer<ffi.Void> child_isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateInGroup(
      group_member,
      name,
      shutdown_callback,
      cleanup_callback,
      child_isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateInGroupPtr = _lookup<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  Dart_Isolate,
                  ffi.Pointer<ffi.Char>,
                  Dart_IsolateShutdownCallback,
                  Dart_IsolateCleanupCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Dart_CreateIsolateInGroup');
  late final _Dart_CreateIsolateInGroup =
      _Dart_CreateIsolateInGroupPtr.asFunction<
          Dart_Isolate Function(
              Dart_Isolate,
              ffi.Pointer<ffi.Char>,
              Dart_IsolateShutdownCallback,
              Dart_IsolateCleanupCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Creates a new isolate from a Dart Kernel file. The new isolate
  /// becomes the current isolate.
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param script_uri The main source file or snapshot this isolate will load.
  /// The VM will provide this URI to the Dart_IsolateGroupCreateCallback when a
  /// child isolate is created by Isolate.spawn. The embedder should use a URI that
  /// allows it to load the same program into such a child isolate.
  /// \param name A short name for the isolate to improve debugging messages.
  /// Typically of the format 'foo.dart:main()'.
  /// \param kernel_buffer A buffer which contains a kernel/DIL program. Must
  /// remain valid until isolate shutdown.
  /// \param kernel_buffer_size The size of `kernel_buffer`.
  /// \param flags Pointer to VM specific flags or NULL for default flags.
  /// \param isolate_group_data Embedder group data. This data can be obtained
  /// by calling Dart_IsolateGroupData and will be passed to the
  /// Dart_IsolateShutdownCallback, Dart_IsolateCleanupCallback, and
  /// Dart_IsolateGroupCleanupCallback.
  /// \param isolate_data Embedder data.  This data will be passed to
  /// the Dart_IsolateGroupCreateCallback when new isolates are spawned from
  /// this parent isolate.
  /// \param error Returns NULL if creation is successful, an error message
  /// otherwise. The caller is responsible for calling free() on the error
  /// message.
  ///
  /// \return The new isolate on success, or NULL if isolate creation failed.
  Dart_Isolate Dart_CreateIsolateGroupFromKernel(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
    ffi.Pointer<Dart_IsolateFlags> flags,
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateGroupFromKernel(
      script_uri,
      name,
      kernel_buffer,
      kernel_buffer_size,
      flags,
      isolate_group_data,
      isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateGroupFromKernelPtr = _lookup<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.IntPtr,
                  ffi.Pointer<Dart_IsolateFlags>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Dart_CreateIsolateGroupFromKernel');
  late final _Dart_CreateIsolateGroupFromKernel =
      _Dart_CreateIsolateGroupFromKernelPtr.asFunction<
          Dart_Isolate Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<Dart_IsolateFlags>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Shuts down the current isolate. After this call, the current isolate is NULL.
  /// Any current scopes created by Dart_EnterScope will be exited. Invokes the
  /// shutdown callback and any callbacks of remaining weak persistent handles.
  ///
  /// Requires there to be a current isolate.
  void Dart_ShutdownIsolate() {
    return _Dart_ShutdownIsolate();
  }

  late final _Dart_ShutdownIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ShutdownIsolate');
  late final _Dart_ShutdownIsolate =
      _Dart_ShutdownIsolatePtr.asFunction<void Function()>();

  /// Returns the current isolate. Will return NULL if there is no
  /// current isolate.
  Dart_Isolate Dart_CurrentIsolate() {
    return _Dart_CurrentIsolate();
  }

  late final _Dart_CurrentIsolatePtr =
      _lookup<ffi.NativeFunction<Dart_Isolate Function()>>(
          'Dart_CurrentIsolate');
  late final _Dart_CurrentIsolate =
      _Dart_CurrentIsolatePtr.asFunction<Dart_Isolate Function()>();

  /// Returns the callback data associated with the current isolate. This
  /// data was set when the isolate got created or initialized.
  ffi.Pointer<ffi.Void> Dart_CurrentIsolateData() {
    return _Dart_CurrentIsolateData();
  }

  late final _Dart_CurrentIsolateDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'Dart_CurrentIsolateData');
  late final _Dart_CurrentIsolateData = _Dart_CurrentIsolateDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function()>();

  /// Returns the callback data associated with the given isolate. This
  /// data was set when the isolate got created or initialized.
  ffi.Pointer<ffi.Void> Dart_IsolateData(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateData(
      isolate,
    );
  }

  late final _Dart_IsolateDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>(
          'Dart_IsolateData');
  late final _Dart_IsolateData = _Dart_IsolateDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(Dart_Isolate)>();

  /// Returns the current isolate group. Will return NULL if there is no
  /// current isolate group.
  Dart_IsolateGroup Dart_CurrentIsolateGroup() {
    return _Dart_CurrentIsolateGroup();
  }

  late final _Dart_CurrentIsolateGroupPtr =
      _lookup<ffi.NativeFunction<Dart_IsolateGroup Function()>>(
          'Dart_CurrentIsolateGroup');
  late final _Dart_CurrentIsolateGroup =
      _Dart_CurrentIsolateGroupPtr.asFunction<Dart_IsolateGroup Function()>();

  /// Returns the callback data associated with the current isolate group. This
  /// data was passed to the isolate group when it was created.
  ffi.Pointer<ffi.Void> Dart_CurrentIsolateGroupData() {
    return _Dart_CurrentIsolateGroupData();
  }

  late final _Dart_CurrentIsolateGroupDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'Dart_CurrentIsolateGroupData');
  late final _Dart_CurrentIsolateGroupData = _Dart_CurrentIsolateGroupDataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  int Dart_CurrentIsolateGroupId() {
    return _Dart_CurrentIsolateGroupId();
  }

  late final _Dart_CurrentIsolateGroupIdPtr =
      _lookup<ffi.NativeFunction<Dart_IsolateGroupId Function()>>(
          'Dart_CurrentIsolateGroupId');
  late final _Dart_CurrentIsolateGroupId =
      _Dart_CurrentIsolateGroupIdPtr.asFunction<int Function()>();

  /// Returns the callback data associated with the specified isolate group. This
  /// data was passed to the isolate when it was created.
  /// The embedder is responsible for ensuring the consistency of this data
  /// with respect to the lifecycle of an isolate group.
  ffi.Pointer<ffi.Void> Dart_IsolateGroupData(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateGroupData(
      isolate,
    );
  }

  late final _Dart_IsolateGroupDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>(
          'Dart_IsolateGroupData');
  late final _Dart_IsolateGroupData = _Dart_IsolateGroupDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(Dart_Isolate)>();

  /// Returns the debugging name for the current isolate.
  ///
  /// This name is unique to each isolate and should only be used to make
  /// debugging messages more comprehensible.
  Object Dart_DebugName() {
    return _Dart_DebugName();
  }

  late final _Dart_DebugNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_DebugName');
  late final _Dart_DebugName =
      _Dart_DebugNamePtr.asFunction<Object Function()>();

  /// Returns the ID for an isolate which is used to query the service protocol.
  ///
  /// It is the responsibility of the caller to free the returned ID.
  ffi.Pointer<ffi.Char> Dart_IsolateServiceId(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateServiceId(
      isolate,
    );
  }

  late final _Dart_IsolateServiceIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>>(
          'Dart_IsolateServiceId');
  late final _Dart_IsolateServiceId = _Dart_IsolateServiceIdPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(Dart_Isolate)>();

  /// Enters an isolate. After calling this function,
  /// the current isolate will be set to the provided isolate.
  ///
  /// Requires there to be no current isolate. Multiple threads may not be in
  /// the same isolate at once.
  void Dart_EnterIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_EnterIsolate(
      isolate,
    );
  }

  late final _Dart_EnterIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>(
          'Dart_EnterIsolate');
  late final _Dart_EnterIsolate =
      _Dart_EnterIsolatePtr.asFunction<void Function(Dart_Isolate)>();

  /// Kills the given isolate.
  ///
  /// This function has the same effect as dart:isolate's
  /// Isolate.kill(priority:immediate).
  /// It can interrupt ordinary Dart code but not native code. If the isolate is
  /// in the middle of a long running native function, the isolate will not be
  /// killed until control returns to Dart.
  ///
  /// Does not require a current isolate. It is safe to kill the current isolate if
  /// there is one.
  void Dart_KillIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_KillIsolate(
      isolate,
    );
  }

  late final _Dart_KillIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>(
          'Dart_KillIsolate');
  late final _Dart_KillIsolate =
      _Dart_KillIsolatePtr.asFunction<void Function(Dart_Isolate)>();

  /// Notifies the VM that the embedder expects to be idle until |deadline|. The VM
  /// may use this time to perform garbage collection or other tasks to avoid
  /// delays during execution of Dart code in the future.
  ///
  /// |deadline| is measured in microseconds against the system's monotonic time.
  /// This clock can be accessed via Dart_TimelineGetMicros().
  ///
  /// Requires there to be a current isolate.
  void Dart_NotifyIdle(
    int deadline,
  ) {
    return _Dart_NotifyIdle(
      deadline,
    );
  }

  late final _Dart_NotifyIdlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'Dart_NotifyIdle');
  late final _Dart_NotifyIdle =
      _Dart_NotifyIdlePtr.asFunction<void Function(int)>();

  /// Notifies the VM that the embedder expects the application's working set has
  /// recently shrunk significantly and is not expected to rise in the near future.
  /// The VM may spend O(heap-size) time performing clean up work.
  ///
  /// Requires there to be a current isolate.
  void Dart_NotifyDetach() {
    return _Dart_NotifyDetach();
  }

  late final _Dart_NotifyDetachPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_NotifyDetach');
  late final _Dart_NotifyDetach =
      _Dart_NotifyDetachPtr.asFunction<void Function()>();

  /// Notifies the VM that the system is running low on memory.
  ///
  /// Does not require a current isolate. Only valid after calling Dart_Initialize.
  void Dart_NotifyLowMemory() {
    return _Dart_NotifyLowMemory();
  }

  late final _Dart_NotifyLowMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_NotifyLowMemory');
  late final _Dart_NotifyLowMemory =
      _Dart_NotifyLowMemoryPtr.asFunction<void Function()>();

  /// Set the desired performance trade-off.
  ///
  /// Requires a current isolate.
  ///
  /// Returns the previous performance mode.
  int Dart_SetPerformanceMode(
    int mode,
  ) {
    return _Dart_SetPerformanceMode(
      mode,
    );
  }

  late final _Dart_SetPerformanceModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Dart_SetPerformanceMode');
  late final _Dart_SetPerformanceMode =
      _Dart_SetPerformanceModePtr.asFunction<int Function(int)>();

  /// Starts the CPU sampling profiler.
  void Dart_StartProfiling() {
    return _Dart_StartProfiling();
  }

  late final _Dart_StartProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_StartProfiling');
  late final _Dart_StartProfiling =
      _Dart_StartProfilingPtr.asFunction<void Function()>();

  /// Stops the CPU sampling profiler.
  ///
  /// Note that some profile samples might still be taken after this fucntion
  /// returns due to the asynchronous nature of the implementation on some
  /// platforms.
  void Dart_StopProfiling() {
    return _Dart_StopProfiling();
  }

  late final _Dart_StopProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_StopProfiling');
  late final _Dart_StopProfiling =
      _Dart_StopProfilingPtr.asFunction<void Function()>();

  /// Notifies the VM that the current thread should not be profiled until a
  /// matching call to Dart_ThreadEnableProfiling is made.
  ///
  /// NOTE: By default, if a thread has entered an isolate it will be profiled.
  /// This function should be used when an embedder knows a thread is about
  /// to make a blocking call and wants to avoid unnecessary interrupts by
  /// the profiler.
  void Dart_ThreadDisableProfiling() {
    return _Dart_ThreadDisableProfiling();
  }

  late final _Dart_ThreadDisableProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'Dart_ThreadDisableProfiling');
  late final _Dart_ThreadDisableProfiling =
      _Dart_ThreadDisableProfilingPtr.asFunction<void Function()>();

  /// Notifies the VM that the current thread should be profiled.
  ///
  /// NOTE: It is only legal to call this function *after* calling
  /// Dart_ThreadDisableProfiling.
  ///
  /// NOTE: By default, if a thread has entered an isolate it will be profiled.
  void Dart_ThreadEnableProfiling() {
    return _Dart_ThreadEnableProfiling();
  }

  late final _Dart_ThreadEnableProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'Dart_ThreadEnableProfiling');
  late final _Dart_ThreadEnableProfiling =
      _Dart_ThreadEnableProfilingPtr.asFunction<void Function()>();

  /// Register symbol information for the Dart VM's profiler and crash dumps.
  ///
  /// This consumes the output of //topaz/runtime/dart/profiler_symbols, which
  /// should be treated as opaque.
  void Dart_AddSymbols(
    ffi.Pointer<ffi.Char> dso_name,
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _Dart_AddSymbols(
      dso_name,
      buffer,
      buffer_size,
    );
  }

  late final _Dart_AddSymbolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.IntPtr)>>('Dart_AddSymbols');
  late final _Dart_AddSymbols = _Dart_AddSymbolsPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  /// Exits an isolate. After this call, Dart_CurrentIsolate will
  /// return NULL.
  ///
  /// Requires there to be a current isolate.
  void Dart_ExitIsolate() {
    return _Dart_ExitIsolate();
  }

  late final _Dart_ExitIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ExitIsolate');
  late final _Dart_ExitIsolate =
      _Dart_ExitIsolatePtr.asFunction<void Function()>();

  /// Creates a full snapshot of the current isolate heap.
  ///
  /// A full snapshot is a compact representation of the dart vm isolate heap
  /// and dart isolate heap states. These snapshots are used to initialize
  /// the vm isolate on startup and fast initialization of an isolate.
  /// A Snapshot of the heap is created before any dart code has executed.
  ///
  /// Requires there to be a current isolate. Not available in the precompiled
  /// runtime (check Dart_IsPrecompiledRuntime).
  ///
  /// \param vm_snapshot_data_buffer Returns a pointer to a buffer containing the
  /// vm snapshot. This buffer is scope allocated and is only valid
  /// until the next call to Dart_ExitScope.
  /// \param vm_snapshot_data_size Returns the size of vm_snapshot_data_buffer.
  /// \param isolate_snapshot_data_buffer Returns a pointer to a buffer containing
  /// the isolate snapshot. This buffer is scope allocated and is only valid
  /// until the next call to Dart_ExitScope.
  /// \param isolate_snapshot_data_size Returns the size of
  /// isolate_snapshot_data_buffer.
  /// \param is_core Create a snapshot containing core libraries.
  /// Such snapshot should be agnostic to null safety mode.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateSnapshot(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    bool is_core,
  ) {
    return _Dart_CreateSnapshot(
      vm_snapshot_data_buffer,
      vm_snapshot_data_size,
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      is_core,
    );
  }

  late final _Dart_CreateSnapshotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Bool)>>('Dart_CreateSnapshot');
  late final _Dart_CreateSnapshot = _Dart_CreateSnapshotPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>,
          bool)>();

  /// Returns whether the buffer contains a kernel file.
  ///
  /// \param buffer Pointer to a buffer that might contain a kernel binary.
  /// \param buffer_size Size of the buffer.
  ///
  /// \return Whether the buffer contains a kernel binary (full or partial).
  bool Dart_IsKernel(
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_size,
  ) {
    return _Dart_IsKernel(
      buffer,
      buffer_size,
    );
  }

  late final _Dart_IsKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('Dart_IsKernel');
  late final _Dart_IsKernel = _Dart_IsKernelPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Make isolate runnable.
  ///
  /// When isolates are spawned, this function is used to indicate that
  /// the creation and initialization (including script loading) of the
  /// isolate is complete and the isolate can start.
  /// This function expects there to be no current isolate.
  ///
  /// \param isolate The isolate to be made runnable.
  ///
  /// \return NULL if successful. Returns an error message otherwise. The caller
  /// is responsible for freeing the error message.
  ffi.Pointer<ffi.Char> Dart_IsolateMakeRunnable(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateMakeRunnable(
      isolate,
    );
  }

  late final _Dart_IsolateMakeRunnablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>>(
          'Dart_IsolateMakeRunnable');
  late final _Dart_IsolateMakeRunnable = _Dart_IsolateMakeRunnablePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>();

  /// Allows embedders to provide a custom wakeup mechanism for the delivery of
  /// inter-isolate messages. This setting only applies to the current isolate.
  ///
  /// This mechanism is optional: if not provided, the isolate will be scheduled on
  /// a VM-managed thread pool. An embedder should provide this callback if it
  /// wants to run an isolate on a specific thread or to interleave handling of
  /// inter-isolate messages with other event sources.
  ///
  /// Most embedders will only call this function once, before isolate
  /// execution begins. If this function is called after isolate
  /// execution begins, the embedder is responsible for threading issues.
  void Dart_SetMessageNotifyCallback(
    Dart_MessageNotifyCallback message_notify_callback,
  ) {
    return _Dart_SetMessageNotifyCallback(
      message_notify_callback,
    );
  }

  late final _Dart_SetMessageNotifyCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Dart_MessageNotifyCallback)>>(
      'Dart_SetMessageNotifyCallback');
  late final _Dart_SetMessageNotifyCallback = _Dart_SetMessageNotifyCallbackPtr
      .asFunction<void Function(Dart_MessageNotifyCallback)>();

  /// Query the current message notify callback for the isolate.
  ///
  /// \return The current message notify callback for the isolate.
  Dart_MessageNotifyCallback Dart_GetMessageNotifyCallback() {
    return _Dart_GetMessageNotifyCallback();
  }

  late final _Dart_GetMessageNotifyCallbackPtr =
      _lookup<ffi.NativeFunction<Dart_MessageNotifyCallback Function()>>(
          'Dart_GetMessageNotifyCallback');
  late final _Dart_GetMessageNotifyCallback = _Dart_GetMessageNotifyCallbackPtr
      .asFunction<Dart_MessageNotifyCallback Function()>();

  /// If the VM flag `--pause-isolates-on-start` was passed this will be true.
  ///
  /// \return A boolean value indicating if pause on start was requested.
  bool Dart_ShouldPauseOnStart() {
    return _Dart_ShouldPauseOnStart();
  }

  late final _Dart_ShouldPauseOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_ShouldPauseOnStart');
  late final _Dart_ShouldPauseOnStart =
      _Dart_ShouldPauseOnStartPtr.asFunction<bool Function()>();

  /// Override the VM flag `--pause-isolates-on-start` for the current isolate.
  ///
  /// \param should_pause Should the isolate be paused on start?
  ///
  /// NOTE: This must be called before Dart_IsolateMakeRunnable.
  void Dart_SetShouldPauseOnStart(
    bool should_pause,
  ) {
    return _Dart_SetShouldPauseOnStart(
      should_pause,
    );
  }

  late final _Dart_SetShouldPauseOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetShouldPauseOnStart');
  late final _Dart_SetShouldPauseOnStart =
      _Dart_SetShouldPauseOnStartPtr.asFunction<void Function(bool)>();

  /// Is the current isolate paused on start?
  ///
  /// \return A boolean value indicating if the isolate is paused on start.
  bool Dart_IsPausedOnStart() {
    return _Dart_IsPausedOnStart();
  }

  late final _Dart_IsPausedOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_IsPausedOnStart');
  late final _Dart_IsPausedOnStart =
      _Dart_IsPausedOnStartPtr.asFunction<bool Function()>();

  /// Called when the embedder has paused the current isolate on start and when
  /// the embedder has resumed the isolate.
  ///
  /// \param paused Is the isolate paused on start?
  void Dart_SetPausedOnStart(
    bool paused,
  ) {
    return _Dart_SetPausedOnStart(
      paused,
    );
  }

  late final _Dart_SetPausedOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetPausedOnStart');
  late final _Dart_SetPausedOnStart =
      _Dart_SetPausedOnStartPtr.asFunction<void Function(bool)>();

  /// If the VM flag `--pause-isolates-on-exit` was passed this will be true.
  ///
  /// \return A boolean value indicating if pause on exit was requested.
  bool Dart_ShouldPauseOnExit() {
    return _Dart_ShouldPauseOnExit();
  }

  late final _Dart_ShouldPauseOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_ShouldPauseOnExit');
  late final _Dart_ShouldPauseOnExit =
      _Dart_ShouldPauseOnExitPtr.asFunction<bool Function()>();

  /// Override the VM flag `--pause-isolates-on-exit` for the current isolate.
  ///
  /// \param should_pause Should the isolate be paused on exit?
  void Dart_SetShouldPauseOnExit(
    bool should_pause,
  ) {
    return _Dart_SetShouldPauseOnExit(
      should_pause,
    );
  }

  late final _Dart_SetShouldPauseOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetShouldPauseOnExit');
  late final _Dart_SetShouldPauseOnExit =
      _Dart_SetShouldPauseOnExitPtr.asFunction<void Function(bool)>();

  /// Is the current isolate paused on exit?
  ///
  /// \return A boolean value indicating if the isolate is paused on exit.
  bool Dart_IsPausedOnExit() {
    return _Dart_IsPausedOnExit();
  }

  late final _Dart_IsPausedOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_IsPausedOnExit');
  late final _Dart_IsPausedOnExit =
      _Dart_IsPausedOnExitPtr.asFunction<bool Function()>();

  /// Called when the embedder has paused the current isolate on exit and when
  /// the embedder has resumed the isolate.
  ///
  /// \param paused Is the isolate paused on exit?
  void Dart_SetPausedOnExit(
    bool paused,
  ) {
    return _Dart_SetPausedOnExit(
      paused,
    );
  }

  late final _Dart_SetPausedOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetPausedOnExit');
  late final _Dart_SetPausedOnExit =
      _Dart_SetPausedOnExitPtr.asFunction<void Function(bool)>();

  /// Called when the embedder has caught a top level unhandled exception error
  /// in the current isolate.
  ///
  /// NOTE: It is illegal to call this twice on the same isolate without first
  /// clearing the sticky error to null.
  ///
  /// \param error The unhandled exception error.
  void Dart_SetStickyError(
    Object error,
  ) {
    return _Dart_SetStickyError(
      error,
    );
  }

  late final _Dart_SetStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_SetStickyError');
  late final _Dart_SetStickyError =
      _Dart_SetStickyErrorPtr.asFunction<void Function(Object)>();

  /// Does the current isolate have a sticky error?
  bool Dart_HasStickyError() {
    return _Dart_HasStickyError();
  }

  late final _Dart_HasStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_HasStickyError');
  late final _Dart_HasStickyError =
      _Dart_HasStickyErrorPtr.asFunction<bool Function()>();

  /// Gets the sticky error for the current isolate.
  ///
  /// \return A handle to the sticky error object or null.
  Object Dart_GetStickyError() {
    return _Dart_GetStickyError();
  }

  late final _Dart_GetStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_GetStickyError');
  late final _Dart_GetStickyError =
      _Dart_GetStickyErrorPtr.asFunction<Object Function()>();

  /// Handles the next pending message for the current isolate.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_HandleMessage() {
    return _Dart_HandleMessage();
  }

  late final _Dart_HandleMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_HandleMessage');
  late final _Dart_HandleMessage =
      _Dart_HandleMessagePtr.asFunction<Object Function()>();

  /// Drains the microtask queue, then blocks the calling thread until the current
  /// isolate receives a message, then handles all messages.
  ///
  /// \param timeout_millis When non-zero, the call returns after the indicated
  /// number of milliseconds even if no message was received.
  /// \return A valid handle if no error occurs, otherwise an error handle.
  Object Dart_WaitForEvent(
    int timeout_millis,
  ) {
    return _Dart_WaitForEvent(
      timeout_millis,
    );
  }

  late final _Dart_WaitForEventPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>(
          'Dart_WaitForEvent');
  late final _Dart_WaitForEvent =
      _Dart_WaitForEventPtr.asFunction<Object Function(int)>();

  /// Handles any pending messages for the vm service for the current
  /// isolate.
  ///
  /// This function may be used by an embedder at a breakpoint to avoid
  /// pausing the vm service.
  ///
  /// This function can indirectly cause the message notify callback to
  /// be called.
  ///
  /// \return true if the vm service requests the program resume
  /// execution, false otherwise
  bool Dart_HandleServiceMessages() {
    return _Dart_HandleServiceMessages();
  }

  late final _Dart_HandleServiceMessagesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_HandleServiceMessages');
  late final _Dart_HandleServiceMessages =
      _Dart_HandleServiceMessagesPtr.asFunction<bool Function()>();

  /// Does the current isolate have pending service messages?
  ///
  /// \return true if the isolate has pending service messages, false otherwise.
  bool Dart_HasServiceMessages() {
    return _Dart_HasServiceMessages();
  }

  late final _Dart_HasServiceMessagesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_HasServiceMessages');
  late final _Dart_HasServiceMessages =
      _Dart_HasServiceMessagesPtr.asFunction<bool Function()>();

  /// Processes any incoming messages for the current isolate.
  ///
  /// This function may only be used when the embedder has not provided
  /// an alternate message delivery mechanism with
  /// Dart_SetMessageCallbacks. It is provided for convenience.
  ///
  /// This function waits for incoming messages for the current
  /// isolate. As new messages arrive, they are handled using
  /// Dart_HandleMessage. The routine exits when all ports to the
  /// current isolate are closed.
  ///
  /// \return A valid handle if the run loop exited successfully.  If an
  /// exception or other error occurs while processing messages, an
  /// error handle is returned.
  Object Dart_RunLoop() {
    return _Dart_RunLoop();
  }

  late final _Dart_RunLoopPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_RunLoop');
  late final _Dart_RunLoop = _Dart_RunLoopPtr.asFunction<Object Function()>();

  /// Lets the VM run message processing for the isolate.
  ///
  /// This function expects there to a current isolate and the current isolate
  /// must not have an active api scope. The VM will take care of making the
  /// isolate runnable (if not already), handles its message loop and will take
  /// care of shutting the isolate down once it's done.
  ///
  /// \param errors_are_fatal Whether uncaught errors should be fatal.
  /// \param on_error_port A port to notify on uncaught errors (or ILLEGAL_PORT).
  /// \param on_exit_port A port to notify on exit (or ILLEGAL_PORT).
  /// \param error A non-NULL pointer which will hold an error message if the call
  /// fails. The error has to be free()ed by the caller.
  ///
  /// \return If successful the VM takes owernship of the isolate and takes care
  /// of its message loop. If not successful the caller retains owernship of the
  /// isolate.
  bool Dart_RunLoopAsync(
    bool errors_are_fatal,
    int on_error_port,
    int on_exit_port,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_RunLoopAsync(
      errors_are_fatal,
      on_error_port,
      on_exit_port,
      error,
    );
  }

  late final _Dart_RunLoopAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Bool, Dart_Port, Dart_Port,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_RunLoopAsync');
  late final _Dart_RunLoopAsync = _Dart_RunLoopAsyncPtr.asFunction<
      bool Function(bool, int, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Gets the main port id for the current isolate.
  int Dart_GetMainPortId() {
    return _Dart_GetMainPortId();
  }

  late final _Dart_GetMainPortIdPtr =
      _lookup<ffi.NativeFunction<Dart_Port Function()>>('Dart_GetMainPortId');
  late final _Dart_GetMainPortId =
      _Dart_GetMainPortIdPtr.asFunction<int Function()>();

  /// Does the current isolate have live ReceivePorts?
  ///
  /// A ReceivePort is live when it has not been closed.
  bool Dart_HasLivePorts() {
    return _Dart_HasLivePorts();
  }

  late final _Dart_HasLivePortsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_HasLivePorts');
  late final _Dart_HasLivePorts =
      _Dart_HasLivePortsPtr.asFunction<bool Function()>();

  /// Posts a message for some isolate. The message is a serialized
  /// object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// For posting messages outside of an isolate see \ref Dart_PostCObject.
  ///
  /// \param port_id The destination port.
  /// \param object An object from the current isolate.
  ///
  /// \return True if the message was posted.
  bool Dart_Post(
    int port_id,
    Object object,
  ) {
    return _Dart_Post(
      port_id,
      object,
    );
  }

  late final _Dart_PostPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port, ffi.Handle)>>(
          'Dart_Post');
  late final _Dart_Post =
      _Dart_PostPtr.asFunction<bool Function(int, Object)>();

  /// Returns a new SendPort with the provided port id.
  ///
  /// \param port_id The destination port.
  ///
  /// \return A new SendPort if no errors occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewSendPort(
    int port_id,
  ) {
    return _Dart_NewSendPort(
      port_id,
    );
  }

  late final _Dart_NewSendPortPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(Dart_Port)>>(
          'Dart_NewSendPort');
  late final _Dart_NewSendPort =
      _Dart_NewSendPortPtr.asFunction<Object Function(int)>();

  /// Gets the SendPort id for the provided SendPort.
  /// \param port A SendPort object whose id is desired.
  /// \param port_id Returns the id of the SendPort.
  /// \return Success if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_SendPortGetId(
    Object port,
    ffi.Pointer<Dart_Port> port_id,
  ) {
    return _Dart_SendPortGetId(
      port,
      port_id,
    );
  }

  late final _Dart_SendPortGetIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<Dart_Port>)>>('Dart_SendPortGetId');
  late final _Dart_SendPortGetId = _Dart_SendPortGetIdPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_Port>)>();

  /// Enters a new scope.
  ///
  /// All new local handles will be created in this scope. Additionally,
  /// some functions may return "scope allocated" memory which is only
  /// valid within this scope.
  ///
  /// Requires there to be a current isolate.
  void Dart_EnterScope() {
    return _Dart_EnterScope();
  }

  late final _Dart_EnterScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_EnterScope');
  late final _Dart_EnterScope =
      _Dart_EnterScopePtr.asFunction<void Function()>();

  /// Exits a scope.
  ///
  /// The previous scope (if any) becomes the current scope.
  ///
  /// Requires there to be a current isolate.
  void Dart_ExitScope() {
    return _Dart_ExitScope();
  }

  late final _Dart_ExitScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ExitScope');
  late final _Dart_ExitScope = _Dart_ExitScopePtr.asFunction<void Function()>();

  /// The Dart VM uses "zone allocation" for temporary structures. Zones
  /// support very fast allocation of small chunks of memory. The chunks
  /// cannot be deallocated individually, but instead zones support
  /// deallocating all chunks in one fast operation.
  ///
  /// This function makes it possible for the embedder to allocate
  /// temporary data in the VMs zone allocator.
  ///
  /// Zone allocation is possible:
  /// 1. when inside a scope where local handles can be allocated
  /// 2. when processing a message from a native port in a native port
  /// handler
  ///
  /// All the memory allocated this way will be reclaimed either on the
  /// next call to Dart_ExitScope or when the native port handler exits.
  ///
  /// \param size Size of the memory to allocate.
  ///
  /// \return A pointer to the allocated memory. NULL if allocation
  /// failed. Failure might due to is no current VM zone.
  ffi.Pointer<ffi.Uint8> Dart_ScopeAllocate(
    int size,
  ) {
    return _Dart_ScopeAllocate(
      size,
    );
  }

  late final _Dart_ScopeAllocatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr)>>(
          'Dart_ScopeAllocate');
  late final _Dart_ScopeAllocate =
      _Dart_ScopeAllocatePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  /// Returns the null object.
  ///
  /// \return A handle to the null object.
  Object Dart_Null() {
    return _Dart_Null();
  }

  late final _Dart_NullPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_Null');
  late final _Dart_Null = _Dart_NullPtr.asFunction<Object Function()>();

  /// Is this object null?
  bool Dart_IsNull(
    Object object,
  ) {
    return _Dart_IsNull(
      object,
    );
  }

  late final _Dart_IsNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsNull');
  late final _Dart_IsNull = _Dart_IsNullPtr.asFunction<bool Function(Object)>();

  /// Returns the empty string object.
  ///
  /// \return A handle to the empty string object.
  Object Dart_EmptyString() {
    return _Dart_EmptyString();
  }

  late final _Dart_EmptyStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_EmptyString');
  late final _Dart_EmptyString =
      _Dart_EmptyStringPtr.asFunction<Object Function()>();

  /// Returns types that are not classes, and which therefore cannot be looked up
  /// as library members by Dart_GetType.
  ///
  /// \return A handle to the dynamic, void or Never type.
  Object Dart_TypeDynamic() {
    return _Dart_TypeDynamic();
  }

  late final _Dart_TypeDynamicPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeDynamic');
  late final _Dart_TypeDynamic =
      _Dart_TypeDynamicPtr.asFunction<Object Function()>();

  Object Dart_TypeVoid() {
    return _Dart_TypeVoid();
  }

  late final _Dart_TypeVoidPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeVoid');
  late final _Dart_TypeVoid = _Dart_TypeVoidPtr.asFunction<Object Function()>();

  Object Dart_TypeNever() {
    return _Dart_TypeNever();
  }

  late final _Dart_TypeNeverPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeNever');
  late final _Dart_TypeNever =
      _Dart_TypeNeverPtr.asFunction<Object Function()>();

  /// Checks if the two objects are equal.
  ///
  /// The result of the comparison is returned through the 'equal'
  /// parameter. The return value itself is used to indicate success or
  /// failure, not equality.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param obj1 An object to be compared.
  /// \param obj2 An object to be compared.
  /// \param equal Returns the result of the equality comparison.
  ///
  /// \return A valid handle if no error occurs during the comparison.
  Object Dart_ObjectEquals(
    Object obj1,
    Object obj2,
    ffi.Pointer<ffi.Bool> equal,
  ) {
    return _Dart_ObjectEquals(
      obj1,
      obj2,
      equal,
    );
  }

  late final _Dart_ObjectEqualsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Pointer<ffi.Bool>)>>('Dart_ObjectEquals');
  late final _Dart_ObjectEquals = _Dart_ObjectEqualsPtr.asFunction<
      Object Function(Object, Object, ffi.Pointer<ffi.Bool>)>();

  /// Is this object an instance of some type?
  ///
  /// The result of the test is returned through the 'instanceof' parameter.
  /// The return value itself is used to indicate success or failure.
  ///
  /// \param object An object.
  /// \param type A type.
  /// \param instanceof Return true if 'object' is an instance of type 'type'.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ObjectIsType(
    Object object,
    Object type,
    ffi.Pointer<ffi.Bool> instanceof,
  ) {
    return _Dart_ObjectIsType(
      object,
      type,
      instanceof,
    );
  }

  late final _Dart_ObjectIsTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Pointer<ffi.Bool>)>>('Dart_ObjectIsType');
  late final _Dart_ObjectIsType = _Dart_ObjectIsTypePtr.asFunction<
      Object Function(Object, Object, ffi.Pointer<ffi.Bool>)>();

  /// Query object type.
  ///
  /// \param object Some Object.
  ///
  /// \return true if Object is of the specified type.
  bool Dart_IsInstance(
    Object object,
  ) {
    return _Dart_IsInstance(
      object,
    );
  }

  late final _Dart_IsInstancePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsInstance');
  late final _Dart_IsInstance =
      _Dart_IsInstancePtr.asFunction<bool Function(Object)>();

  bool Dart_IsNumber(
    Object object,
  ) {
    return _Dart_IsNumber(
      object,
    );
  }

  late final _Dart_IsNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsNumber');
  late final _Dart_IsNumber =
      _Dart_IsNumberPtr.asFunction<bool Function(Object)>();

  bool Dart_IsInteger(
    Object object,
  ) {
    return _Dart_IsInteger(
      object,
    );
  }

  late final _Dart_IsIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsInteger');
  late final _Dart_IsInteger =
      _Dart_IsIntegerPtr.asFunction<bool Function(Object)>();

  bool Dart_IsDouble(
    Object object,
  ) {
    return _Dart_IsDouble(
      object,
    );
  }

  late final _Dart_IsDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsDouble');
  late final _Dart_IsDouble =
      _Dart_IsDoublePtr.asFunction<bool Function(Object)>();

  bool Dart_IsBoolean(
    Object object,
  ) {
    return _Dart_IsBoolean(
      object,
    );
  }

  late final _Dart_IsBooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsBoolean');
  late final _Dart_IsBoolean =
      _Dart_IsBooleanPtr.asFunction<bool Function(Object)>();

  bool Dart_IsString(
    Object object,
  ) {
    return _Dart_IsString(
      object,
    );
  }

  late final _Dart_IsStringPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsString');
  late final _Dart_IsString =
      _Dart_IsStringPtr.asFunction<bool Function(Object)>();

  bool Dart_IsStringLatin1(
    Object object,
  ) {
    return _Dart_IsStringLatin1(
      object,
    );
  }

  late final _Dart_IsStringLatin1Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsStringLatin1');
  late final _Dart_IsStringLatin1 =
      _Dart_IsStringLatin1Ptr.asFunction<bool Function(Object)>();

  bool Dart_IsExternalString(
    Object object,
  ) {
    return _Dart_IsExternalString(
      object,
    );
  }

  late final _Dart_IsExternalStringPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsExternalString');
  late final _Dart_IsExternalString =
      _Dart_IsExternalStringPtr.asFunction<bool Function(Object)>();

  bool Dart_IsList(
    Object object,
  ) {
    return _Dart_IsList(
      object,
    );
  }

  late final _Dart_IsListPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsList');
  late final _Dart_IsList = _Dart_IsListPtr.asFunction<bool Function(Object)>();

  bool Dart_IsMap(
    Object object,
  ) {
    return _Dart_IsMap(
      object,
    );
  }

  late final _Dart_IsMapPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsMap');
  late final _Dart_IsMap = _Dart_IsMapPtr.asFunction<bool Function(Object)>();

  bool Dart_IsLibrary(
    Object object,
  ) {
    return _Dart_IsLibrary(
      object,
    );
  }

  late final _Dart_IsLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsLibrary');
  late final _Dart_IsLibrary =
      _Dart_IsLibraryPtr.asFunction<bool Function(Object)>();

  bool Dart_IsType(
    Object handle,
  ) {
    return _Dart_IsType(
      handle,
    );
  }

  late final _Dart_IsTypePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsType');
  late final _Dart_IsType = _Dart_IsTypePtr.asFunction<bool Function(Object)>();

  bool Dart_IsFunction(
    Object handle,
  ) {
    return _Dart_IsFunction(
      handle,
    );
  }

  late final _Dart_IsFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsFunction');
  late final _Dart_IsFunction =
      _Dart_IsFunctionPtr.asFunction<bool Function(Object)>();

  bool Dart_IsVariable(
    Object handle,
  ) {
    return _Dart_IsVariable(
      handle,
    );
  }

  late final _Dart_IsVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsVariable');
  late final _Dart_IsVariable =
      _Dart_IsVariablePtr.asFunction<bool Function(Object)>();

  bool Dart_IsTypeVariable(
    Object handle,
  ) {
    return _Dart_IsTypeVariable(
      handle,
    );
  }

  late final _Dart_IsTypeVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsTypeVariable');
  late final _Dart_IsTypeVariable =
      _Dart_IsTypeVariablePtr.asFunction<bool Function(Object)>();

  bool Dart_IsClosure(
    Object object,
  ) {
    return _Dart_IsClosure(
      object,
    );
  }

  late final _Dart_IsClosurePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsClosure');
  late final _Dart_IsClosure =
      _Dart_IsClosurePtr.asFunction<bool Function(Object)>();

  bool Dart_IsTypedData(
    Object object,
  ) {
    return _Dart_IsTypedData(
      object,
    );
  }

  late final _Dart_IsTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsTypedData');
  late final _Dart_IsTypedData =
      _Dart_IsTypedDataPtr.asFunction<bool Function(Object)>();

  bool Dart_IsByteBuffer(
    Object object,
  ) {
    return _Dart_IsByteBuffer(
      object,
    );
  }

  late final _Dart_IsByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsByteBuffer');
  late final _Dart_IsByteBuffer =
      _Dart_IsByteBufferPtr.asFunction<bool Function(Object)>();

  bool Dart_IsFuture(
    Object object,
  ) {
    return _Dart_IsFuture(
      object,
    );
  }

  late final _Dart_IsFuturePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsFuture');
  late final _Dart_IsFuture =
      _Dart_IsFuturePtr.asFunction<bool Function(Object)>();

  /// Gets the type of a Dart language object.
  ///
  /// \param instance Some Dart object.
  ///
  /// \return If no error occurs, the type is returned. Otherwise an
  /// error handle is returned.
  Object Dart_InstanceGetType(
    Object instance,
  ) {
    return _Dart_InstanceGetType(
      instance,
    );
  }

  late final _Dart_InstanceGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_InstanceGetType');
  late final _Dart_InstanceGetType =
      _Dart_InstanceGetTypePtr.asFunction<Object Function(Object)>();

  /// Returns the name for the provided class type.
  ///
  /// \return A valid string handle if no error occurs during the
  /// operation.
  Object Dart_ClassName(
    Object cls_type,
  ) {
    return _Dart_ClassName(
      cls_type,
    );
  }

  late final _Dart_ClassNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClassName');
  late final _Dart_ClassName =
      _Dart_ClassNamePtr.asFunction<Object Function(Object)>();

  /// Returns the name for the provided function or method.
  ///
  /// \return A valid string handle if no error occurs during the
  /// operation.
  Object Dart_FunctionName(
    Object function,
  ) {
    return _Dart_FunctionName(
      function,
    );
  }

  late final _Dart_FunctionNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_FunctionName');
  late final _Dart_FunctionName =
      _Dart_FunctionNamePtr.asFunction<Object Function(Object)>();

  /// Returns a handle to the owner of a function.
  ///
  /// The owner of an instance method or a static method is its defining
  /// class. The owner of a top-level function is its defining
  /// library. The owner of the function of a non-implicit closure is the
  /// function of the method or closure that defines the non-implicit
  /// closure.
  ///
  /// \return A valid handle to the owner of the function, or an error
  /// handle if the argument is not a valid handle to a function.
  Object Dart_FunctionOwner(
    Object function,
  ) {
    return _Dart_FunctionOwner(
      function,
    );
  }

  late final _Dart_FunctionOwnerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_FunctionOwner');
  late final _Dart_FunctionOwner =
      _Dart_FunctionOwnerPtr.asFunction<Object Function(Object)>();

  /// Determines whether a function handle referes to a static function
  /// of method.
  ///
  /// For the purposes of the embedding API, a top-level function is
  /// implicitly declared static.
  ///
  /// \param function A handle to a function or method declaration.
  /// \param is_static Returns whether the function or method is declared static.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_FunctionIsStatic(
    Object function,
    ffi.Pointer<ffi.Bool> is_static,
  ) {
    return _Dart_FunctionIsStatic(
      function,
      is_static,
    );
  }

  late final _Dart_FunctionIsStaticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_FunctionIsStatic');
  late final _Dart_FunctionIsStatic = _Dart_FunctionIsStaticPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Is this object a closure resulting from a tear-off (closurized method)?
  ///
  /// Returns true for closures produced when an ordinary method is accessed
  /// through a getter call. Returns false otherwise, in particular for closures
  /// produced from local function declarations.
  ///
  /// \param object Some Object.
  ///
  /// \return true if Object is a tear-off.
  bool Dart_IsTearOff(
    Object object,
  ) {
    return _Dart_IsTearOff(
      object,
    );
  }

  late final _Dart_IsTearOffPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsTearOff');
  late final _Dart_IsTearOff =
      _Dart_IsTearOffPtr.asFunction<bool Function(Object)>();

  /// Retrieves the function of a closure.
  ///
  /// \return A handle to the function of the closure, or an error handle if the
  /// argument is not a closure.
  Object Dart_ClosureFunction(
    Object closure,
  ) {
    return _Dart_ClosureFunction(
      closure,
    );
  }

  late final _Dart_ClosureFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClosureFunction');
  late final _Dart_ClosureFunction =
      _Dart_ClosureFunctionPtr.asFunction<Object Function(Object)>();

  /// Returns a handle to the library which contains class.
  ///
  /// \return A valid handle to the library with owns class, null if the class
  /// has no library or an error handle if the argument is not a valid handle
  /// to a class type.
  Object Dart_ClassLibrary(
    Object cls_type,
  ) {
    return _Dart_ClassLibrary(
      cls_type,
    );
  }

  late final _Dart_ClassLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClassLibrary');
  late final _Dart_ClassLibrary =
      _Dart_ClassLibraryPtr.asFunction<Object Function(Object)>();

  /// Does this Integer fit into a 64-bit signed integer?
  ///
  /// \param integer An integer.
  /// \param fits Returns true if the integer fits into a 64-bit signed integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerFitsIntoInt64(
    Object integer,
    ffi.Pointer<ffi.Bool> fits,
  ) {
    return _Dart_IntegerFitsIntoInt64(
      integer,
      fits,
    );
  }

  late final _Dart_IntegerFitsIntoInt64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IntegerFitsIntoInt64');
  late final _Dart_IntegerFitsIntoInt64 = _Dart_IntegerFitsIntoInt64Ptr
      .asFunction<Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Does this Integer fit into a 64-bit unsigned integer?
  ///
  /// \param integer An integer.
  /// \param fits Returns true if the integer fits into a 64-bit unsigned integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerFitsIntoUint64(
    Object integer,
    ffi.Pointer<ffi.Bool> fits,
  ) {
    return _Dart_IntegerFitsIntoUint64(
      integer,
      fits,
    );
  }

  late final _Dart_IntegerFitsIntoUint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Bool>)>>('Dart_IntegerFitsIntoUint64');
  late final _Dart_IntegerFitsIntoUint64 = _Dart_IntegerFitsIntoUint64Ptr
      .asFunction<Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The value of the integer.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewInteger(
    int value,
  ) {
    return _Dart_NewInteger(
      value,
    );
  }

  late final _Dart_NewIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>(
          'Dart_NewInteger');
  late final _Dart_NewInteger =
      _Dart_NewIntegerPtr.asFunction<Object Function(int)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The unsigned value of the integer.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewIntegerFromUint64(
    int value,
  ) {
    return _Dart_NewIntegerFromUint64(
      value,
    );
  }

  late final _Dart_NewIntegerFromUint64Ptr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Uint64)>>(
          'Dart_NewIntegerFromUint64');
  late final _Dart_NewIntegerFromUint64 =
      _Dart_NewIntegerFromUint64Ptr.asFunction<Object Function(int)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The value of the integer represented as a C string
  /// containing a hexadecimal number.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewIntegerFromHexCString(
    ffi.Pointer<ffi.Char> value,
  ) {
    return _Dart_NewIntegerFromHexCString(
      value,
    );
  }

  late final _Dart_NewIntegerFromHexCStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewIntegerFromHexCString');
  late final _Dart_NewIntegerFromHexCString = _Dart_NewIntegerFromHexCStringPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  /// Gets the value of an Integer.
  ///
  /// The integer must fit into a 64-bit signed integer, otherwise an error occurs.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToInt64(
    Object integer,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _Dart_IntegerToInt64(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToInt64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Int64>)>>('Dart_IntegerToInt64');
  late final _Dart_IntegerToInt64 = _Dart_IntegerToInt64Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Int64>)>();

  /// Gets the value of an Integer.
  ///
  /// The integer must fit into a 64-bit unsigned integer, otherwise an
  /// error occurs.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToUint64(
    Object integer,
    ffi.Pointer<ffi.Uint64> value,
  ) {
    return _Dart_IntegerToUint64(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToUint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint64>)>>('Dart_IntegerToUint64');
  late final _Dart_IntegerToUint64 = _Dart_IntegerToUint64Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint64>)>();

  /// Gets the value of an integer as a hexadecimal C string.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer as a hexadecimal C
  /// string. This C string is scope allocated and is only valid until
  /// the next call to Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToHexCString(
    Object integer,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _Dart_IntegerToHexCString(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToHexCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_IntegerToHexCString');
  late final _Dart_IntegerToHexCString =
      _Dart_IntegerToHexCStringPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Returns a Double with the provided value.
  ///
  /// \param value A double.
  ///
  /// \return The Double object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewDouble(
    double value,
  ) {
    return _Dart_NewDouble(
      value,
    );
  }

  late final _Dart_NewDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Double)>>(
          'Dart_NewDouble');
  late final _Dart_NewDouble =
      _Dart_NewDoublePtr.asFunction<Object Function(double)>();

  /// Gets the value of a Double
  ///
  /// \param double_obj A Double
  /// \param value Returns the value of the Double.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_DoubleValue(
    Object double_obj,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _Dart_DoubleValue(
      double_obj,
      value,
    );
  }

  late final _Dart_DoubleValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Double>)>>('Dart_DoubleValue');
  late final _Dart_DoubleValue = _Dart_DoubleValuePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Double>)>();

  /// Returns a closure of static function 'function_name' in the class 'class_name'
  /// in the exported namespace of specified 'library'.
  ///
  /// \param library Library object
  /// \param cls_type Type object representing a Class
  /// \param function_name Name of the static function in the class
  ///
  /// \return A valid Dart instance if no error occurs during the operation.
  Object Dart_GetStaticMethodClosure(
    Object library1,
    Object cls_type,
    Object function_name,
  ) {
    return _Dart_GetStaticMethodClosure(
      library1,
      cls_type,
      function_name,
    );
  }

  late final _Dart_GetStaticMethodClosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Handle)>>('Dart_GetStaticMethodClosure');
  late final _Dart_GetStaticMethodClosure = _Dart_GetStaticMethodClosurePtr
      .asFunction<Object Function(Object, Object, Object)>();

  /// Returns the True object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A handle to the True object.
  Object Dart_True() {
    return _Dart_True();
  }

  late final _Dart_TruePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_True');
  late final _Dart_True = _Dart_TruePtr.asFunction<Object Function()>();

  /// Returns the False object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A handle to the False object.
  Object Dart_False() {
    return _Dart_False();
  }

  late final _Dart_FalsePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_False');
  late final _Dart_False = _Dart_FalsePtr.asFunction<Object Function()>();

  /// Returns a Boolean with the provided value.
  ///
  /// \param value true or false.
  ///
  /// \return The Boolean object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewBoolean(
    bool value,
  ) {
    return _Dart_NewBoolean(
      value,
    );
  }

  late final _Dart_NewBooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Bool)>>(
          'Dart_NewBoolean');
  late final _Dart_NewBoolean =
      _Dart_NewBooleanPtr.asFunction<Object Function(bool)>();

  /// Gets the value of a Boolean
  ///
  /// \param boolean_obj A Boolean
  /// \param value Returns the value of the Boolean.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_BooleanValue(
    Object boolean_obj,
    ffi.Pointer<ffi.Bool> value,
  ) {
    return _Dart_BooleanValue(
      boolean_obj,
      value,
    );
  }

  late final _Dart_BooleanValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_BooleanValue');
  late final _Dart_BooleanValue = _Dart_BooleanValuePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Gets the length of a String.
  ///
  /// \param str A String.
  /// \param length Returns the length of the String.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringLength(
    Object str,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringLength(
      str,
      length,
    );
  }

  late final _Dart_StringLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_StringLength');
  late final _Dart_StringLength = _Dart_StringLengthPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Returns a String built from the provided C string
  /// (There is an implicit assumption that the C string passed in contains
  /// UTF-8 encoded characters and '\0' is considered as a termination
  /// character).
  ///
  /// \param str A C String
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromCString(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _Dart_NewStringFromCString(
      str,
    );
  }

  late final _Dart_NewStringFromCStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewStringFromCString');
  late final _Dart_NewStringFromCString = _Dart_NewStringFromCStringPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  /// Returns a String built from an array of UTF-8 encoded characters.
  ///
  /// \param utf8_array An array of UTF-8 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF8(
    ffi.Pointer<ffi.Uint8> utf8_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF8(
      utf8_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('Dart_NewStringFromUTF8');
  late final _Dart_NewStringFromUTF8 = _Dart_NewStringFromUTF8Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Returns a String built from an array of UTF-16 encoded characters.
  ///
  /// \param utf16_array An array of UTF-16 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF16(
    ffi.Pointer<ffi.Uint16> utf16_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF16(
      utf16_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint16>, ffi.IntPtr)>>('Dart_NewStringFromUTF16');
  late final _Dart_NewStringFromUTF16 = _Dart_NewStringFromUTF16Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Uint16>, int)>();

  /// Returns a String built from an array of UTF-32 encoded characters.
  ///
  /// \param utf32_array An array of UTF-32 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF32(
    ffi.Pointer<ffi.Int32> utf32_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF32(
      utf32_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Int32>, ffi.IntPtr)>>('Dart_NewStringFromUTF32');
  late final _Dart_NewStringFromUTF32 = _Dart_NewStringFromUTF32Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Int32>, int)>();

  /// Returns a String which references an external array of
  /// Latin-1 (ISO-8859-1) encoded characters.
  ///
  /// \param latin1_array Array of Latin-1 encoded characters. This must not move.
  /// \param length The length of the characters array.
  /// \param peer An external pointer to associate with this string.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A callback to be called when this string is finalized.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalLatin1String(
    ffi.Pointer<ffi.Uint8> latin1_array,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalLatin1String(
      latin1_array,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalLatin1StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalLatin1String');
  late final _Dart_NewExternalLatin1String =
      _Dart_NewExternalLatin1StringPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Void>,
              int, Dart_HandleFinalizer)>();

  /// Returns a String which references an external array of UTF-16 encoded
  /// characters.
  ///
  /// \param utf16_array An array of UTF-16 encoded characters. This must not move.
  /// \param length The length of the characters array.
  /// \param peer An external pointer to associate with this string.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A callback to be called when this string is finalized.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalUTF16String(
    ffi.Pointer<ffi.Uint16> utf16_array,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalUTF16String(
      utf16_array,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalUTF16StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalUTF16String');
  late final _Dart_NewExternalUTF16String =
      _Dart_NewExternalUTF16StringPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Void>,
              int, Dart_HandleFinalizer)>();

  /// Gets the C string representation of a String.
  /// (It is a sequence of UTF-8 encoded values with a '\0' termination.)
  ///
  /// \param str A string.
  /// \param cstr Returns the String represented as a C string.
  /// This C string is scope allocated and is only valid until
  /// the next call to Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToCString(
    Object str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cstr,
  ) {
    return _Dart_StringToCString(
      str,
      cstr,
    );
  }

  late final _Dart_StringToCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_StringToCString');
  late final _Dart_StringToCString = _Dart_StringToCStringPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Gets a UTF-8 encoded representation of a String.
  ///
  /// Any unpaired surrogate code points in the string will be converted as
  /// replacement characters (U+FFFD, 0xEF 0xBF 0xBD in UTF-8). If you need
  /// to preserve unpaired surrogates, use the Dart_StringToUTF16 function.
  ///
  /// \param str A string.
  /// \param utf8_array Returns the String represented as UTF-8 code
  /// units.  This UTF-8 array is scope allocated and is only valid
  /// until the next call to Dart_ExitScope.
  /// \param length Used to return the length of the array which was
  /// actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToUTF8(
    Object str,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> utf8_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToUTF8(
      str,
      utf8_array,
      length,
    );
  }

  late final _Dart_StringToUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToUTF8');
  late final _Dart_StringToUTF8 = _Dart_StringToUTF8Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the data corresponding to the string object. This function returns
  /// the data only for Latin-1 (ISO-8859-1) string objects. For all other
  /// string objects it returns an error.
  ///
  /// \param str A string.
  /// \param latin1_array An array allocated by the caller, used to return
  /// the string data.
  /// \param length Used to pass in the length of the provided array.
  /// Used to return the length of the array which was actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToLatin1(
    Object str,
    ffi.Pointer<ffi.Uint8> latin1_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToLatin1(
      str,
      latin1_array,
      length,
    );
  }

  late final _Dart_StringToLatin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToLatin1');
  late final _Dart_StringToLatin1 = _Dart_StringToLatin1Ptr.asFunction<
      Object Function(
          Object, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the UTF-16 encoded representation of a string.
  ///
  /// \param str A string.
  /// \param utf16_array An array allocated by the caller, used to return
  /// the array of UTF-16 encoded characters.
  /// \param length Used to pass in the length of the provided array.
  /// Used to return the length of the array which was actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToUTF16(
    Object str,
    ffi.Pointer<ffi.Uint16> utf16_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToUTF16(
      str,
      utf16_array,
      length,
    );
  }

  late final _Dart_StringToUTF16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToUTF16');
  late final _Dart_StringToUTF16 = _Dart_StringToUTF16Ptr.asFunction<
      Object Function(
          Object, ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the storage size in bytes of a String.
  ///
  /// \param str A String.
  /// \param size Returns the storage size in bytes of the String.
  /// This is the size in bytes needed to store the String.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringStorageSize(
    Object str,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    return _Dart_StringStorageSize(
      str,
      size,
    );
  }

  late final _Dart_StringStorageSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_StringStorageSize');
  late final _Dart_StringStorageSize = _Dart_StringStorageSizePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Retrieves some properties associated with a String.
  /// Properties retrieved are:
  /// - character size of the string (one or two byte)
  /// - length of the string
  /// - peer pointer of string if it is an external string.
  /// \param str A String.
  /// \param char_size Returns the character size of the String.
  /// \param str_len Returns the length of the String.
  /// \param peer Returns the peer pointer associated with the String or 0 if
  /// there is no peer pointer for it.
  /// \return Success if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_StringGetProperties(
    Object str,
    ffi.Pointer<ffi.IntPtr> char_size,
    ffi.Pointer<ffi.IntPtr> str_len,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_StringGetProperties(
      str,
      char_size,
      str_len,
      peer,
    );
  }

  late final _Dart_StringGetPropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('Dart_StringGetProperties');
  late final _Dart_StringGetProperties =
      _Dart_StringGetPropertiesPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Returns a List<dynamic> of the desired length.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewList(
    int length,
  ) {
    return _Dart_NewList(
      length,
    );
  }

  late final _Dart_NewListPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>(
          'Dart_NewList');
  late final _Dart_NewList =
      _Dart_NewListPtr.asFunction<Object Function(int)>();

  /// Returns a List of the desired length with the desired legacy element type.
  ///
  /// \param element_type_id The type of elements of the list.
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns an error
  /// handle.
  Object Dart_NewListOf(
    int element_type_id,
    int length,
  ) {
    return _Dart_NewListOf(
      element_type_id,
      length,
    );
  }

  late final _Dart_NewListOfPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.IntPtr)>>(
          'Dart_NewListOf');
  late final _Dart_NewListOf =
      _Dart_NewListOfPtr.asFunction<Object Function(int, int)>();

  /// Returns a List of the desired length with the desired element type.
  ///
  /// \param element_type Handle to a nullable type object. E.g., from
  /// Dart_GetType or Dart_GetNullableType.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewListOfType(
    Object element_type,
    int length,
  ) {
    return _Dart_NewListOfType(
      element_type,
      length,
    );
  }

  late final _Dart_NewListOfTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>(
          'Dart_NewListOfType');
  late final _Dart_NewListOfType =
      _Dart_NewListOfTypePtr.asFunction<Object Function(Object, int)>();

  /// Returns a List of the desired length with the desired element type, filled
  /// with the provided object.
  ///
  /// \param element_type Handle to a type object. E.g., from Dart_GetType.
  ///
  /// \param fill_object Handle to an object of type 'element_type' that will be
  /// used to populate the list. This parameter can only be Dart_Null() if the
  /// length of the list is 0 or 'element_type' is a nullable type.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewListOfTypeFilled(
    Object element_type,
    Object fill_object,
    int length,
  ) {
    return _Dart_NewListOfTypeFilled(
      element_type,
      fill_object,
      length,
    );
  }

  late final _Dart_NewListOfTypeFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Handle, ffi.IntPtr)>>('Dart_NewListOfTypeFilled');
  late final _Dart_NewListOfTypeFilled = _Dart_NewListOfTypeFilledPtr
      .asFunction<Object Function(Object, Object, int)>();

  /// Gets the length of a List.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param length Returns the length of the List.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ListLength(
    Object list,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_ListLength(
      list,
      length,
    );
  }

  late final _Dart_ListLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_ListLength');
  late final _Dart_ListLength = _Dart_ListLengthPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the Object at some index of a List.
  ///
  /// If the index is out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param index A valid index into the List.
  ///
  /// \return The Object in the List at the specified index if no error
  /// occurs. Otherwise returns an error handle.
  Object Dart_ListGetAt(
    Object list,
    int index,
  ) {
    return _Dart_ListGetAt(
      list,
      index,
    );
  }

  late final _Dart_ListGetAtPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>(
          'Dart_ListGetAt');
  late final _Dart_ListGetAt =
      _Dart_ListGetAtPtr.asFunction<Object Function(Object, int)>();

  /// Gets a range of Objects from a List.
  ///
  /// If any of the requested index values are out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param offset The offset of the first item to get.
  /// \param length The number of items to get.
  /// \param result A pointer to fill with the objects.
  ///
  /// \return Success if no error occurs during the operation.
  Object Dart_ListGetRange(
    Object list,
    int offset,
    int length,
    ffi.Pointer<ffi.Handle> result,
  ) {
    return _Dart_ListGetRange(
      list,
      offset,
      length,
      result,
    );
  }

  late final _Dart_ListGetRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_ListGetRange');
  late final _Dart_ListGetRange = _Dart_ListGetRangePtr.asFunction<
      Object Function(Object, int, int, ffi.Pointer<ffi.Handle>)>();

  /// Sets the Object at some index of a List.
  ///
  /// If the index is out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param index A valid index into the List.
  /// \param value The Object to put in the List.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ListSetAt(
    Object list,
    int index,
    Object value,
  ) {
    return _Dart_ListSetAt(
      list,
      index,
      value,
    );
  }

  late final _Dart_ListSetAtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.IntPtr, ffi.Handle)>>('Dart_ListSetAt');
  late final _Dart_ListSetAt =
      _Dart_ListSetAtPtr.asFunction<Object Function(Object, int, Object)>();

  /// May generate an unhandled exception error.
  Object Dart_ListGetAsBytes(
    Object list,
    int offset,
    ffi.Pointer<ffi.Uint8> native_array,
    int length,
  ) {
    return _Dart_ListGetAsBytes(
      list,
      offset,
      native_array,
      length,
    );
  }

  late final _Dart_ListGetAsBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_ListGetAsBytes');
  late final _Dart_ListGetAsBytes = _Dart_ListGetAsBytesPtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// May generate an unhandled exception error.
  Object Dart_ListSetAsBytes(
    Object list,
    int offset,
    ffi.Pointer<ffi.Uint8> native_array,
    int length,
  ) {
    return _Dart_ListSetAsBytes(
      list,
      offset,
      native_array,
      length,
    );
  }

  late final _Dart_ListSetAsBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_ListSetAsBytes');
  late final _Dart_ListSetAsBytes = _Dart_ListSetAsBytesPtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Gets the Object at some key of a Map.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  /// \param key An Object.
  ///
  /// \return The value in the map at the specified key, null if the map does not
  /// contain the key, or an error handle.
  Object Dart_MapGetAt(
    Object map,
    Object key,
  ) {
    return _Dart_MapGetAt(
      map,
      key,
    );
  }

  late final _Dart_MapGetAtPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_MapGetAt');
  late final _Dart_MapGetAt =
      _Dart_MapGetAtPtr.asFunction<Object Function(Object, Object)>();

  /// Returns whether the Map contains a given key.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  ///
  /// \return A handle on a boolean indicating whether map contains the key.
  /// Otherwise returns an error handle.
  Object Dart_MapContainsKey(
    Object map,
    Object key,
  ) {
    return _Dart_MapContainsKey(
      map,
      key,
    );
  }

  late final _Dart_MapContainsKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_MapContainsKey');
  late final _Dart_MapContainsKey =
      _Dart_MapContainsKeyPtr.asFunction<Object Function(Object, Object)>();

  /// Gets the list of keys of a Map.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  ///
  /// \return The list of key Objects if no error occurs. Otherwise returns an
  /// error handle.
  Object Dart_MapKeys(
    Object map,
  ) {
    return _Dart_MapKeys(
      map,
    );
  }

  late final _Dart_MapKeysPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_MapKeys');
  late final _Dart_MapKeys =
      _Dart_MapKeysPtr.asFunction<Object Function(Object)>();

  /// Return type if this object is a TypedData object.
  ///
  /// \return kInvalid if the object is not a TypedData object or the appropriate
  /// Dart_TypedData_Type.
  int Dart_GetTypeOfTypedData(
    Object object,
  ) {
    return _Dart_GetTypeOfTypedData(
      object,
    );
  }

  late final _Dart_GetTypeOfTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>(
          'Dart_GetTypeOfTypedData');
  late final _Dart_GetTypeOfTypedData =
      _Dart_GetTypeOfTypedDataPtr.asFunction<int Function(Object)>();

  /// Return type if this object is an external TypedData object.
  ///
  /// \return kInvalid if the object is not an external TypedData object or
  /// the appropriate Dart_TypedData_Type.
  int Dart_GetTypeOfExternalTypedData(
    Object object,
  ) {
    return _Dart_GetTypeOfExternalTypedData(
      object,
    );
  }

  late final _Dart_GetTypeOfExternalTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>(
          'Dart_GetTypeOfExternalTypedData');
  late final _Dart_GetTypeOfExternalTypedData =
      _Dart_GetTypeOfExternalTypedDataPtr.asFunction<int Function(Object)>();

  /// Returns a TypedData object of the desired length and type.
  ///
  /// \param type The type of the TypedData object.
  /// \param length The length of the TypedData object (length in type units).
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewTypedData(
    int type,
    int length,
  ) {
    return _Dart_NewTypedData(
      type,
      length,
    );
  }

  late final _Dart_NewTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.IntPtr)>>(
          'Dart_NewTypedData');
  late final _Dart_NewTypedData =
      _Dart_NewTypedDataPtr.asFunction<Object Function(int, int)>();

  /// Returns a TypedData object which references an external data array.
  ///
  /// \param type The type of the data array.
  /// \param data A data array. This array must not move.
  /// \param length The length of the data array (length in type units).
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalTypedData(
    int type,
    ffi.Pointer<ffi.Void> data,
    int length,
  ) {
    return _Dart_NewExternalTypedData(
      type,
      data,
      length,
    );
  }

  late final _Dart_NewExternalTypedDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.IntPtr)>>('Dart_NewExternalTypedData');
  late final _Dart_NewExternalTypedData = _Dart_NewExternalTypedDataPtr
      .asFunction<Object Function(int, ffi.Pointer<ffi.Void>, int)>();

  /// Returns a TypedData object which references an external data array.
  ///
  /// \param type The type of the data array.
  /// \param data A data array. This array must not move.
  /// \param length The length of the data array (length in type units).
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalTypedDataWithFinalizer(
    int type,
    ffi.Pointer<ffi.Void> data,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalTypedDataWithFinalizer(
      type,
      data,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalTypedDataWithFinalizerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalTypedDataWithFinalizer');
  late final _Dart_NewExternalTypedDataWithFinalizer =
      _Dart_NewExternalTypedDataWithFinalizerPtr.asFunction<
          Object Function(int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  Object Dart_NewUnmodifiableExternalTypedDataWithFinalizer(
    int type,
    ffi.Pointer<ffi.Void> data,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewUnmodifiableExternalTypedDataWithFinalizer(
      type,
      data,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewUnmodifiableExternalTypedDataWithFinalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.IntPtr,
                  ffi.Pointer<ffi.Void>, ffi.IntPtr, Dart_HandleFinalizer)>>(
      'Dart_NewUnmodifiableExternalTypedDataWithFinalizer');
  late final _Dart_NewUnmodifiableExternalTypedDataWithFinalizer =
      _Dart_NewUnmodifiableExternalTypedDataWithFinalizerPtr.asFunction<
          Object Function(int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Returns a ByteBuffer object for the typed data.
  ///
  /// \param typed_data The TypedData object.
  ///
  /// \return The ByteBuffer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewByteBuffer(
    Object typed_data,
  ) {
    return _Dart_NewByteBuffer(
      typed_data,
    );
  }

  late final _Dart_NewByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewByteBuffer');
  late final _Dart_NewByteBuffer =
      _Dart_NewByteBufferPtr.asFunction<Object Function(Object)>();

  /// Acquires access to the internal data address of a TypedData object.
  ///
  /// \param object The typed data object whose internal data address is to
  /// be accessed.
  /// \param type The type of the object is returned here.
  /// \param data The internal data address is returned here.
  /// \param len Size of the typed array is returned here.
  ///
  /// Notes:
  /// When the internal address of the object is acquired any calls to a
  /// Dart API function that could potentially allocate an object or run
  /// any Dart code will return an error.
  ///
  /// Any Dart API functions for accessing the data should not be called
  /// before the corresponding release. In particular, the object should
  /// not be acquired again before its release. This leads to undefined
  /// behavior.
  ///
  /// \return Success if the internal data address is acquired successfully.
  /// Otherwise, returns an error handle.
  Object Dart_TypedDataAcquireData(
    Object object,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> len,
  ) {
    return _Dart_TypedDataAcquireData(
      object,
      type,
      data,
      len,
    );
  }

  late final _Dart_TypedDataAcquireDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_TypedDataAcquireData');
  late final _Dart_TypedDataAcquireData =
      _Dart_TypedDataAcquireDataPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.IntPtr>)>();

  /// Releases access to the internal data address that was acquired earlier using
  /// Dart_TypedDataAcquireData.
  ///
  /// \param object The typed data object whose internal data address is to be
  /// released.
  ///
  /// \return Success if the internal data address is released successfully.
  /// Otherwise, returns an error handle.
  Object Dart_TypedDataReleaseData(
    Object object,
  ) {
    return _Dart_TypedDataReleaseData(
      object,
    );
  }

  late final _Dart_TypedDataReleaseDataPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypedDataReleaseData');
  late final _Dart_TypedDataReleaseData =
      _Dart_TypedDataReleaseDataPtr.asFunction<Object Function(Object)>();

  /// Returns the TypedData object associated with the ByteBuffer object.
  ///
  /// \param byte_buffer The ByteBuffer object.
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_GetDataFromByteBuffer(
    Object byte_buffer,
  ) {
    return _Dart_GetDataFromByteBuffer(
      byte_buffer,
    );
  }

  late final _Dart_GetDataFromByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_GetDataFromByteBuffer');
  late final _Dart_GetDataFromByteBuffer =
      _Dart_GetDataFromByteBufferPtr.asFunction<Object Function(Object)>();

  /// Invokes a constructor, creating a new object.
  ///
  /// This function allows hidden constructors (constructors with leading
  /// underscores) to be called.
  ///
  /// \param type Type of object to be constructed.
  /// \param constructor_name The name of the constructor to invoke.  Use
  /// Dart_Null() or Dart_EmptyString() to invoke the unnamed constructor.
  /// This name should not include the name of the class.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the constructor.
  ///
  /// \return If the constructor is called and completes successfully,
  /// then the new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_New(
    Object type,
    Object constructor_name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_New(
      type,
      constructor_name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_New');
  late final _Dart_New = _Dart_NewPtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Allocate a new object without invoking a constructor.
  ///
  /// \param type The type of an object to be allocated.
  ///
  /// \return The new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_Allocate(
    Object type,
  ) {
    return _Dart_Allocate(
      type,
    );
  }

  late final _Dart_AllocatePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_Allocate');
  late final _Dart_Allocate =
      _Dart_AllocatePtr.asFunction<Object Function(Object)>();

  /// Allocate a new object without invoking a constructor, and sets specified
  /// native fields.
  ///
  /// \param type The type of an object to be allocated.
  /// \param num_native_fields The number of native fields to set.
  /// \param native_fields An array containing the value of native fields.
  ///
  /// \return The new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_AllocateWithNativeFields(
    Object type,
    int num_native_fields,
    ffi.Pointer<ffi.IntPtr> native_fields,
  ) {
    return _Dart_AllocateWithNativeFields(
      type,
      num_native_fields,
      native_fields,
    );
  }

  late final _Dart_AllocateWithNativeFieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_AllocateWithNativeFields');
  late final _Dart_AllocateWithNativeFields = _Dart_AllocateWithNativeFieldsPtr
      .asFunction<Object Function(Object, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Invokes a method or function.
  ///
  /// The 'target' parameter may be an object, type, or library.  If
  /// 'target' is an object, then this function will invoke an instance
  /// method.  If 'target' is a type, then this function will invoke a
  /// static method.  If 'target' is a library, then this function will
  /// invoke a top-level function from that library.
  /// NOTE: This API call cannot be used to invoke methods of a type object.
  ///
  /// This function ignores visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param target An object, type, or library.
  /// \param name The name of the function or method to invoke.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the function.
  ///
  /// \return If the function or method is called and completes
  /// successfully, then the return value is returned. If an error
  /// occurs during execution, then an error handle is returned.
  Object Dart_Invoke(
    Object target,
    Object name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_Invoke(
      target,
      name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_Invoke');
  late final _Dart_Invoke = _Dart_InvokePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Invokes a Closure with the given arguments.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return If no error occurs during execution, then the result of
  /// invoking the closure is returned. If an error occurs during
  /// execution, then an error handle is returned.
  Object Dart_InvokeClosure(
    Object closure,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_InvokeClosure(
      closure,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokeClosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_InvokeClosure');
  late final _Dart_InvokeClosure = _Dart_InvokeClosurePtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Invokes a Generative Constructor on an object that was previously
  /// allocated using Dart_Allocate/Dart_AllocateWithNativeFields.
  ///
  /// The 'object' parameter must be an object.
  ///
  /// This function ignores visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param object An object.
  /// \param name The name of the constructor to invoke.
  /// Use Dart_Null() or Dart_EmptyString() to invoke the unnamed constructor.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the function.
  ///
  /// \return If the constructor is called and completes
  /// successfully, then the object is returned. If an error
  /// occurs during execution, then an error handle is returned.
  Object Dart_InvokeConstructor(
    Object object,
    Object name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_InvokeConstructor(
      object,
      name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokeConstructorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_InvokeConstructor');
  late final _Dart_InvokeConstructor = _Dart_InvokeConstructorPtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Gets the value of a field.
  ///
  /// The 'container' parameter may be an object, type, or library.  If
  /// 'container' is an object, then this function will access an
  /// instance field.  If 'container' is a type, then this function will
  /// access a static field.  If 'container' is a library, then this
  /// function will access a top-level variable.
  /// NOTE: This API call cannot be used to access fields of a type object.
  ///
  /// This function ignores field visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param container An object, type, or library.
  /// \param name A field name.
  ///
  /// \return If no error occurs, then the value of the field is
  /// returned. Otherwise an error handle is returned.
  Object Dart_GetField(
    Object container,
    Object name,
  ) {
    return _Dart_GetField(
      container,
      name,
    );
  }

  late final _Dart_GetFieldPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_GetField');
  late final _Dart_GetField =
      _Dart_GetFieldPtr.asFunction<Object Function(Object, Object)>();

  /// Sets the value of a field.
  ///
  /// The 'container' parameter may actually be an object, type, or
  /// library.  If 'container' is an object, then this function will
  /// access an instance field.  If 'container' is a type, then this
  /// function will access a static field.  If 'container' is a library,
  /// then this function will access a top-level variable.
  /// NOTE: This API call cannot be used to access fields of a type object.
  ///
  /// This function ignores field visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param container An object, type, or library.
  /// \param name A field name.
  /// \param value The new field value.
  ///
  /// \return A valid handle if no error occurs.
  Object Dart_SetField(
    Object container,
    Object name,
    Object value,
  ) {
    return _Dart_SetField(
      container,
      name,
      value,
    );
  }

  late final _Dart_SetFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Handle, ffi.Handle)>>('Dart_SetField');
  late final _Dart_SetField =
      _Dart_SetFieldPtr.asFunction<Object Function(Object, Object, Object)>();

  /// Throws an exception.
  ///
  /// This function causes a Dart language exception to be thrown. This
  /// will proceed in the standard way, walking up Dart frames until an
  /// appropriate 'catch' block is found, executing 'finally' blocks,
  /// etc.
  ///
  /// If an error handle is passed into this function, the error is
  /// propagated immediately.  See Dart_PropagateError for a discussion
  /// of error propagation.
  ///
  /// If successful, this function does not return. Note that this means
  /// that the destructors of any stack-allocated C++ objects will not be
  /// called. If there are no Dart frames on the stack, an error occurs.
  ///
  /// \return An error handle if the exception was not thrown.
  /// Otherwise the function does not return.
  Object Dart_ThrowException(
    Object exception,
  ) {
    return _Dart_ThrowException(
      exception,
    );
  }

  late final _Dart_ThrowExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ThrowException');
  late final _Dart_ThrowException =
      _Dart_ThrowExceptionPtr.asFunction<Object Function(Object)>();

  /// Rethrows an exception.
  ///
  /// Rethrows an exception, unwinding all dart frames on the stack. If
  /// successful, this function does not return. Note that this means
  /// that the destructors of any stack-allocated C++ objects will not be
  /// called. If there are no Dart frames on the stack, an error occurs.
  ///
  /// \return An error handle if the exception was not thrown.
  /// Otherwise the function does not return.
  Object Dart_ReThrowException(
    Object exception,
    Object stacktrace,
  ) {
    return _Dart_ReThrowException(
      exception,
      stacktrace,
    );
  }

  late final _Dart_ReThrowExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_ReThrowException');
  late final _Dart_ReThrowException =
      _Dart_ReThrowExceptionPtr.asFunction<Object Function(Object, Object)>();

  /// Gets the number of native instance fields in an object.
  Object Dart_GetNativeInstanceFieldCount(
    Object obj,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _Dart_GetNativeInstanceFieldCount(
      obj,
      count,
    );
  }

  late final _Dart_GetNativeInstanceFieldCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Int>)>>('Dart_GetNativeInstanceFieldCount');
  late final _Dart_GetNativeInstanceFieldCount =
      _Dart_GetNativeInstanceFieldCountPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.Int>)>();

  /// Gets the value of a native field.
  ///
  /// TODO(turnidge): Document.
  Object Dart_GetNativeInstanceField(
    Object obj,
    int index,
    ffi.Pointer<ffi.IntPtr> value,
  ) {
    return _Dart_GetNativeInstanceField(
      obj,
      index,
      value,
    );
  }

  late final _Dart_GetNativeInstanceFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeInstanceField');
  late final _Dart_GetNativeInstanceField = _Dart_GetNativeInstanceFieldPtr
      .asFunction<Object Function(Object, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Sets the value of a native field.
  ///
  /// TODO(turnidge): Document.
  Object Dart_SetNativeInstanceField(
    Object obj,
    int index,
    int value,
  ) {
    return _Dart_SetNativeInstanceField(
      obj,
      index,
      value,
    );
  }

  late final _Dart_SetNativeInstanceFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Int, ffi.IntPtr)>>('Dart_SetNativeInstanceField');
  late final _Dart_SetNativeInstanceField = _Dart_SetNativeInstanceFieldPtr
      .asFunction<Object Function(Object, int, int)>();

  /// Extracts current isolate group data from the native arguments structure.
  ffi.Pointer<ffi.Void> Dart_GetNativeIsolateGroupData(
    Dart_NativeArguments args,
  ) {
    return _Dart_GetNativeIsolateGroupData(
      args,
    );
  }

  late final _Dart_GetNativeIsolateGroupDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              Dart_NativeArguments)>>('Dart_GetNativeIsolateGroupData');
  late final _Dart_GetNativeIsolateGroupData =
      _Dart_GetNativeIsolateGroupDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(Dart_NativeArguments)>();

  /// Gets the native arguments based on the types passed in and populates
  /// the passed arguments buffer with appropriate native values.
  ///
  /// \param args the Native arguments block passed into the native call.
  /// \param num_arguments length of argument descriptor array and argument
  /// values array passed in.
  /// \param arg_descriptors an array that describes the arguments that
  /// need to be retrieved. For each argument to be retrieved the descriptor
  /// contains the argument number (0, 1 etc.) and the argument type
  /// described using Dart_NativeArgument_Type, e.g:
  /// DART_NATIVE_ARG_DESCRIPTOR(Dart_NativeArgument_kBool, 1) indicates
  /// that the first argument is to be retrieved and it should be a boolean.
  /// \param arg_values array into which the native arguments need to be
  /// extracted into, the array is allocated by the caller (it could be
  /// stack allocated to avoid the malloc/free performance overhead).
  ///
  /// \return Success if all the arguments could be extracted correctly,
  /// returns an error handle if there were any errors while extracting the
  /// arguments (mismatched number of arguments, incorrect types, etc.).
  Object Dart_GetNativeArguments(
    Dart_NativeArguments args,
    int num_arguments,
    ffi.Pointer<Dart_NativeArgument_Descriptor> arg_descriptors,
    ffi.Pointer<Dart_NativeArgument_Value> arg_values,
  ) {
    return _Dart_GetNativeArguments(
      args,
      num_arguments,
      arg_descriptors,
      arg_values,
    );
  }

  late final _Dart_GetNativeArgumentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments,
                  ffi.Int,
                  ffi.Pointer<Dart_NativeArgument_Descriptor>,
                  ffi.Pointer<Dart_NativeArgument_Value>)>>(
      'Dart_GetNativeArguments');
  late final _Dart_GetNativeArguments = _Dart_GetNativeArgumentsPtr.asFunction<
      Object Function(
          Dart_NativeArguments,
          int,
          ffi.Pointer<Dart_NativeArgument_Descriptor>,
          ffi.Pointer<Dart_NativeArgument_Value>)>();

  /// Gets the native argument at some index.
  Object Dart_GetNativeArgument(
    Dart_NativeArguments args,
    int index,
  ) {
    return _Dart_GetNativeArgument(
      args,
      index,
    );
  }

  late final _Dart_GetNativeArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_NativeArguments, ffi.Int)>>('Dart_GetNativeArgument');
  late final _Dart_GetNativeArgument = _Dart_GetNativeArgumentPtr.asFunction<
      Object Function(Dart_NativeArguments, int)>();

  /// Gets the number of native arguments.
  int Dart_GetNativeArgumentCount(
    Dart_NativeArguments args,
  ) {
    return _Dart_GetNativeArgumentCount(
      args,
    );
  }

  late final _Dart_GetNativeArgumentCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Dart_NativeArguments)>>(
          'Dart_GetNativeArgumentCount');
  late final _Dart_GetNativeArgumentCount = _Dart_GetNativeArgumentCountPtr
      .asFunction<int Function(Dart_NativeArguments)>();

  /// Gets all the native fields of the native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param num_fields size of the intptr_t array 'field_values' passed in.
  /// \param field_values intptr_t array in which native field values are returned.
  /// \return Success if the native fields where copied in successfully. Otherwise
  /// returns an error handle. On success the native field values are copied
  /// into the 'field_values' array, if the argument at 'arg_index' is a
  /// null object then 0 is copied as the native field values into the
  /// 'field_values' array.
  Object Dart_GetNativeFieldsOfArgument(
    Dart_NativeArguments args,
    int arg_index,
    int num_fields,
    ffi.Pointer<ffi.IntPtr> field_values,
  ) {
    return _Dart_GetNativeFieldsOfArgument(
      args,
      arg_index,
      num_fields,
      field_values,
    );
  }

  late final _Dart_GetNativeFieldsOfArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeFieldsOfArgument');
  late final _Dart_GetNativeFieldsOfArgument =
      _Dart_GetNativeFieldsOfArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the native field of the receiver.
  Object Dart_GetNativeReceiver(
    Dart_NativeArguments args,
    ffi.Pointer<ffi.IntPtr> value,
  ) {
    return _Dart_GetNativeReceiver(
      args,
      value,
    );
  }

  late final _Dart_GetNativeReceiverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeReceiver');
  late final _Dart_GetNativeReceiver = _Dart_GetNativeReceiverPtr.asFunction<
      Object Function(Dart_NativeArguments, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets a string native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param peer Returns the peer pointer if the string argument has one.
  /// \return Success if the string argument has a peer, if it does not
  /// have a peer then the String object is returned. Otherwise returns
  /// an error handle (argument is not a String object).
  Object Dart_GetNativeStringArgument(
    Dart_NativeArguments args,
    int arg_index,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_GetNativeStringArgument(
      args,
      arg_index,
      peer,
    );
  }

  late final _Dart_GetNativeStringArgumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(Dart_NativeArguments, ffi.Int,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'Dart_GetNativeStringArgument');
  late final _Dart_GetNativeStringArgument =
      _Dart_GetNativeStringArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Gets an integer native argument at some index.
  /// \param args Native arguments structure.
  /// \param index Index of the desired argument in the structure above.
  /// \param value Returns the integer value if the argument is an Integer.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeIntegerArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _Dart_GetNativeIntegerArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeIntegerArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int,
              ffi.Pointer<ffi.Int64>)>>('Dart_GetNativeIntegerArgument');
  late final _Dart_GetNativeIntegerArgument =
      _Dart_GetNativeIntegerArgumentPtr.asFunction<
          Object Function(Dart_NativeArguments, int, ffi.Pointer<ffi.Int64>)>();

  /// Gets a boolean native argument at some index.
  /// \param args Native arguments structure.
  /// \param index Index of the desired argument in the structure above.
  /// \param value Returns the boolean value if the argument is a Boolean.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeBooleanArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Bool> value,
  ) {
    return _Dart_GetNativeBooleanArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeBooleanArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int,
              ffi.Pointer<ffi.Bool>)>>('Dart_GetNativeBooleanArgument');
  late final _Dart_GetNativeBooleanArgument =
      _Dart_GetNativeBooleanArgumentPtr.asFunction<
          Object Function(Dart_NativeArguments, int, ffi.Pointer<ffi.Bool>)>();

  /// Gets a double native argument at some index.
  /// \param args Native arguments structure.
  /// \param index Index of the desired argument in the structure above.
  /// \param value Returns the double value if the argument is a double.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeDoubleArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _Dart_GetNativeDoubleArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeDoubleArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('Dart_GetNativeDoubleArgument');
  late final _Dart_GetNativeDoubleArgument =
      _Dart_GetNativeDoubleArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, ffi.Pointer<ffi.Double>)>();

  /// Sets the return value for a native function.
  ///
  /// If retval is an Error handle, then error will be propagated once
  /// the native functions exits. See Dart_PropagateError for a
  /// discussion of how different types of errors are propagated.
  void Dart_SetReturnValue(
    Dart_NativeArguments args,
    Object retval,
  ) {
    return _Dart_SetReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Handle)>>('Dart_SetReturnValue');
  late final _Dart_SetReturnValue = _Dart_SetReturnValuePtr.asFunction<
      void Function(Dart_NativeArguments, Object)>();

  void Dart_SetWeakHandleReturnValue(
    Dart_NativeArguments args,
    Dart_WeakPersistentHandle rval,
  ) {
    return _Dart_SetWeakHandleReturnValue(
      args,
      rval,
    );
  }

  late final _Dart_SetWeakHandleReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_NativeArguments,
              Dart_WeakPersistentHandle)>>('Dart_SetWeakHandleReturnValue');
  late final _Dart_SetWeakHandleReturnValue =
      _Dart_SetWeakHandleReturnValuePtr.asFunction<
          void Function(Dart_NativeArguments, Dart_WeakPersistentHandle)>();

  void Dart_SetBooleanReturnValue(
    Dart_NativeArguments args,
    bool retval,
  ) {
    return _Dart_SetBooleanReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetBooleanReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Bool)>>('Dart_SetBooleanReturnValue');
  late final _Dart_SetBooleanReturnValue = _Dart_SetBooleanReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, bool)>();

  void Dart_SetIntegerReturnValue(
    Dart_NativeArguments args,
    int retval,
  ) {
    return _Dart_SetIntegerReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetIntegerReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Int64)>>('Dart_SetIntegerReturnValue');
  late final _Dart_SetIntegerReturnValue = _Dart_SetIntegerReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, int)>();

  void Dart_SetDoubleReturnValue(
    Dart_NativeArguments args,
    double retval,
  ) {
    return _Dart_SetDoubleReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetDoubleReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Double)>>('Dart_SetDoubleReturnValue');
  late final _Dart_SetDoubleReturnValue = _Dart_SetDoubleReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, double)>();

  /// Sets the environment callback for the current isolate. This
  /// callback is used to lookup environment values by name in the
  /// current environment. This enables the embedder to supply values for
  /// the const constructors bool.fromEnvironment, int.fromEnvironment
  /// and String.fromEnvironment.
  Object Dart_SetEnvironmentCallback(
    Dart_EnvironmentCallback callback,
  ) {
    return _Dart_SetEnvironmentCallback(
      callback,
    );
  }

  late final _Dart_SetEnvironmentCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_EnvironmentCallback)>>(
      'Dart_SetEnvironmentCallback');
  late final _Dart_SetEnvironmentCallback = _Dart_SetEnvironmentCallbackPtr
      .asFunction<Object Function(Dart_EnvironmentCallback)>();

  /// Sets the callback used to resolve native functions for a library.
  ///
  /// \param library A library.
  /// \param resolver A native entry resolver.
  ///
  /// \return A valid handle if the native resolver was set successfully.
  Object Dart_SetNativeResolver(
    Object library1,
    Dart_NativeEntryResolver resolver,
    Dart_NativeEntrySymbol symbol,
  ) {
    return _Dart_SetNativeResolver(
      library1,
      resolver,
      symbol,
    );
  }

  late final _Dart_SetNativeResolverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, Dart_NativeEntryResolver,
              Dart_NativeEntrySymbol)>>('Dart_SetNativeResolver');
  late final _Dart_SetNativeResolver = _Dart_SetNativeResolverPtr.asFunction<
      Object Function(
          Object, Dart_NativeEntryResolver, Dart_NativeEntrySymbol)>();

  /// Returns the callback used to resolve native functions for a library.
  ///
  /// \param library A library.
  /// \param resolver a pointer to a Dart_NativeEntryResolver
  ///
  /// \return A valid handle if the library was found.
  Object Dart_GetNativeResolver(
    Object library1,
    ffi.Pointer<Dart_NativeEntryResolver> resolver,
  ) {
    return _Dart_GetNativeResolver(
      library1,
      resolver,
    );
  }

  late final _Dart_GetNativeResolverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<Dart_NativeEntryResolver>)>>(
      'Dart_GetNativeResolver');
  late final _Dart_GetNativeResolver = _Dart_GetNativeResolverPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_NativeEntryResolver>)>();

  /// Returns the callback used to resolve native function symbols for a library.
  ///
  /// \param library A library.
  /// \param resolver a pointer to a Dart_NativeEntrySymbol.
  ///
  /// \return A valid handle if the library was found.
  Object Dart_GetNativeSymbol(
    Object library1,
    ffi.Pointer<Dart_NativeEntrySymbol> resolver,
  ) {
    return _Dart_GetNativeSymbol(
      library1,
      resolver,
    );
  }

  late final _Dart_GetNativeSymbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<Dart_NativeEntrySymbol>)>>('Dart_GetNativeSymbol');
  late final _Dart_GetNativeSymbol = _Dart_GetNativeSymbolPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_NativeEntrySymbol>)>();

  /// Sets the callback used to resolve FFI native functions for a library.
  /// The resolved functions are expected to be a C function pointer of the
  /// correct signature (as specified in the `@FfiNative<NFT>()` function
  /// annotation in Dart code).
  ///
  /// NOTE: This is an experimental feature and might change in the future.
  ///
  /// \param library A library.
  /// \param resolver A native function resolver.
  ///
  /// \return A valid handle if the native resolver was set successfully.
  Object Dart_SetFfiNativeResolver(
    Object library1,
    Dart_FfiNativeResolver resolver,
  ) {
    return _Dart_SetFfiNativeResolver(
      library1,
      resolver,
    );
  }

  late final _Dart_SetFfiNativeResolverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              Dart_FfiNativeResolver)>>('Dart_SetFfiNativeResolver');
  late final _Dart_SetFfiNativeResolver = _Dart_SetFfiNativeResolverPtr
      .asFunction<Object Function(Object, Dart_FfiNativeResolver)>();

  /// Sets library tag handler for the current isolate. This handler is
  /// used to handle the various tags encountered while loading libraries
  /// or scripts in the isolate.
  ///
  /// \param handler Handler code to be used for handling the various tags
  /// encountered while loading libraries or scripts in the isolate.
  ///
  /// \return If no error occurs, the handler is set for the isolate.
  /// Otherwise an error handle is returned.
  ///
  /// TODO(turnidge): Document.
  Object Dart_SetLibraryTagHandler(
    Dart_LibraryTagHandler handler,
  ) {
    return _Dart_SetLibraryTagHandler(
      handler,
    );
  }

  late final _Dart_SetLibraryTagHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(Dart_LibraryTagHandler)>>(
          'Dart_SetLibraryTagHandler');
  late final _Dart_SetLibraryTagHandler = _Dart_SetLibraryTagHandlerPtr
      .asFunction<Object Function(Dart_LibraryTagHandler)>();

  /// Sets the deferred load handler for the current isolate. This handler is
  /// used to handle loading deferred imports in an AppJIT or AppAOT program.
  Object Dart_SetDeferredLoadHandler(
    Dart_DeferredLoadHandler handler,
  ) {
    return _Dart_SetDeferredLoadHandler(
      handler,
    );
  }

  late final _Dart_SetDeferredLoadHandlerPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_DeferredLoadHandler)>>(
      'Dart_SetDeferredLoadHandler');
  late final _Dart_SetDeferredLoadHandler = _Dart_SetDeferredLoadHandlerPtr
      .asFunction<Object Function(Dart_DeferredLoadHandler)>();

  /// Notifies the VM that a deferred load completed successfully. This function
  /// will eventually cause the corresponding `prefix.loadLibrary()` futures to
  /// complete.
  ///
  /// Requires the current isolate to be the same current isolate during the
  /// invocation of the Dart_DeferredLoadHandler.
  Object Dart_DeferredLoadComplete(
    int loading_unit_id,
    ffi.Pointer<ffi.Uint8> snapshot_data,
    ffi.Pointer<ffi.Uint8> snapshot_instructions,
  ) {
    return _Dart_DeferredLoadComplete(
      loading_unit_id,
      snapshot_data,
      snapshot_instructions,
    );
  }

  late final _Dart_DeferredLoadCompletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('Dart_DeferredLoadComplete');
  late final _Dart_DeferredLoadComplete =
      _Dart_DeferredLoadCompletePtr.asFunction<
          Object Function(
              int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// Notifies the VM that a deferred load failed. This function
  /// will eventually cause the corresponding `prefix.loadLibrary()` futures to
  /// complete with an error.
  ///
  /// If `transient` is true, future invocations of `prefix.loadLibrary()` will
  /// trigger new load requests. If false, futures invocation will complete with
  /// the same error.
  ///
  /// Requires the current isolate to be the same current isolate during the
  /// invocation of the Dart_DeferredLoadHandler.
  Object Dart_DeferredLoadCompleteError(
    int loading_unit_id,
    ffi.Pointer<ffi.Char> error_message,
    bool transient,
  ) {
    return _Dart_DeferredLoadCompleteError(
      loading_unit_id,
      error_message,
      transient,
    );
  }

  late final _Dart_DeferredLoadCompleteErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.IntPtr, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('Dart_DeferredLoadCompleteError');
  late final _Dart_DeferredLoadCompleteError =
      _Dart_DeferredLoadCompleteErrorPtr.asFunction<
          Object Function(int, ffi.Pointer<ffi.Char>, bool)>();

  /// Canonicalizes a url with respect to some library.
  ///
  /// The url is resolved with respect to the library's url and some url
  /// normalizations are performed.
  ///
  /// This canonicalization function should be sufficient for most
  /// embedders to implement the Dart_kCanonicalizeUrl tag.
  ///
  /// \param base_url The base url relative to which the url is
  /// being resolved.
  /// \param url The url being resolved and canonicalized.  This
  /// parameter is a string handle.
  ///
  /// \return If no error occurs, a String object is returned.  Otherwise
  /// an error handle is returned.
  Object Dart_DefaultCanonicalizeUrl(
    Object base_url,
    Object url,
  ) {
    return _Dart_DefaultCanonicalizeUrl(
      base_url,
      url,
    );
  }

  late final _Dart_DefaultCanonicalizeUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_DefaultCanonicalizeUrl');
  late final _Dart_DefaultCanonicalizeUrl = _Dart_DefaultCanonicalizeUrlPtr
      .asFunction<Object Function(Object, Object)>();

  /// Loads the root library for the current isolate.
  ///
  /// Requires there to be no current root library.
  ///
  /// \param kernel_buffer A buffer which contains a kernel binary (see
  /// pkg/kernel/binary.md). Must remain valid until isolate group shutdown.
  /// \param kernel_size Length of the passed in buffer.
  ///
  /// \return A handle to the root library, or an error.
  Object Dart_LoadScriptFromKernel(
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_size,
  ) {
    return _Dart_LoadScriptFromKernel(
      kernel_buffer,
      kernel_size,
    );
  }

  late final _Dart_LoadScriptFromKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_LoadScriptFromKernel');
  late final _Dart_LoadScriptFromKernel = _Dart_LoadScriptFromKernelPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Gets the library for the root script for the current isolate.
  ///
  /// If the root script has not yet been set for the current isolate,
  /// this function returns Dart_Null().  This function never returns an
  /// error handle.
  ///
  /// \return Returns the root Library for the current isolate or Dart_Null().
  Object Dart_RootLibrary() {
    return _Dart_RootLibrary();
  }

  late final _Dart_RootLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_RootLibrary');
  late final _Dart_RootLibrary =
      _Dart_RootLibraryPtr.asFunction<Object Function()>();

  /// Sets the root library for the current isolate.
  ///
  /// \return Returns an error handle if `library` is not a library handle.
  Object Dart_SetRootLibrary(
    Object library1,
  ) {
    return _Dart_SetRootLibrary(
      library1,
    );
  }

  late final _Dart_SetRootLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_SetRootLibrary');
  late final _Dart_SetRootLibrary =
      _Dart_SetRootLibraryPtr.asFunction<Object Function(Object)>();

  /// Lookup or instantiate a legacy type by name and type arguments from a
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetType');
  late final _Dart_GetType = _Dart_GetTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Lookup or instantiate a nullable type by name and type arguments from
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetNullableType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetNullableType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetNullableType');
  late final _Dart_GetNullableType = _Dart_GetNullableTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Lookup or instantiate a non-nullable type by name and type arguments from
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetNonNullableType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetNonNullableType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetNonNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetNonNullableType');
  late final _Dart_GetNonNullableType = _Dart_GetNonNullableTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Creates a nullable version of the provided type.
  ///
  /// \param type The type to be converted to a nullable type.
  ///
  /// \return If no error occurs, a nullable type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_TypeToNullableType(
    Object type,
  ) {
    return _Dart_TypeToNullableType(
      type,
    );
  }

  late final _Dart_TypeToNullableTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypeToNullableType');
  late final _Dart_TypeToNullableType =
      _Dart_TypeToNullableTypePtr.asFunction<Object Function(Object)>();

  /// Creates a non-nullable version of the provided type.
  ///
  /// \param type The type to be converted to a non-nullable type.
  ///
  /// \return If no error occurs, a non-nullable type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_TypeToNonNullableType(
    Object type,
  ) {
    return _Dart_TypeToNonNullableType(
      type,
    );
  }

  late final _Dart_TypeToNonNullableTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypeToNonNullableType');
  late final _Dart_TypeToNonNullableType =
      _Dart_TypeToNonNullableTypePtr.asFunction<Object Function(Object)>();

  /// A type's nullability.
  ///
  /// \param type A Dart type.
  /// \param result An out parameter containing the result of the check. True if
  /// the type is of the specified nullability, false otherwise.
  ///
  /// \return Returns an error handle if type is not of type Type.
  Object Dart_IsNullableType(
    Object type,
    ffi.Pointer<ffi.Bool> result,
  ) {
    return _Dart_IsNullableType(
      type,
      result,
    );
  }

  late final _Dart_IsNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IsNullableType');
  late final _Dart_IsNullableType = _Dart_IsNullableTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  Object Dart_IsNonNullableType(
    Object type,
    ffi.Pointer<ffi.Bool> result,
  ) {
    return _Dart_IsNonNullableType(
      type,
      result,
    );
  }

  late final _Dart_IsNonNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IsNonNullableType');
  late final _Dart_IsNonNullableType = _Dart_IsNonNullableTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  Object Dart_IsLegacyType(
    Object type,
    ffi.Pointer<ffi.Bool> result,
  ) {
    return _Dart_IsLegacyType(
      type,
      result,
    );
  }

  late final _Dart_IsLegacyTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IsLegacyType');
  late final _Dart_IsLegacyType = _Dart_IsLegacyTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Lookup a class or interface by name from a Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The name of the class or interface.
  ///
  /// \return If no error occurs, the class or interface is
  /// returned. Otherwise an error handle is returned.
  Object Dart_GetClass(
    Object library1,
    Object class_name,
  ) {
    return _Dart_GetClass(
      library1,
      class_name,
    );
  }

  late final _Dart_GetClassPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_GetClass');
  late final _Dart_GetClass =
      _Dart_GetClassPtr.asFunction<Object Function(Object, Object)>();

  /// Returns an import path to a Library, such as "file:///test.dart" or
  /// "dart:core".
  Object Dart_LibraryUrl(
    Object library1,
  ) {
    return _Dart_LibraryUrl(
      library1,
    );
  }

  late final _Dart_LibraryUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LibraryUrl');
  late final _Dart_LibraryUrl =
      _Dart_LibraryUrlPtr.asFunction<Object Function(Object)>();

  /// Returns a URL from which a Library was loaded.
  Object Dart_LibraryResolvedUrl(
    Object library1,
  ) {
    return _Dart_LibraryResolvedUrl(
      library1,
    );
  }

  late final _Dart_LibraryResolvedUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LibraryResolvedUrl');
  late final _Dart_LibraryResolvedUrl =
      _Dart_LibraryResolvedUrlPtr.asFunction<Object Function(Object)>();

  /// \return An array of libraries.
  Object Dart_GetLoadedLibraries() {
    return _Dart_GetLoadedLibraries();
  }

  late final _Dart_GetLoadedLibrariesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'Dart_GetLoadedLibraries');
  late final _Dart_GetLoadedLibraries =
      _Dart_GetLoadedLibrariesPtr.asFunction<Object Function()>();

  Object Dart_LookupLibrary(
    Object url,
  ) {
    return _Dart_LookupLibrary(
      url,
    );
  }

  late final _Dart_LookupLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LookupLibrary');
  late final _Dart_LookupLibrary =
      _Dart_LookupLibraryPtr.asFunction<Object Function(Object)>();

  /// Report an loading error for the library.
  ///
  /// \param library The library that failed to load.
  /// \param error The Dart error instance containing the load error.
  ///
  /// \return If the VM handles the error, the return value is
  /// a null handle. If it doesn't handle the error, the error
  /// object is returned.
  Object Dart_LibraryHandleError(
    Object library1,
    Object error,
  ) {
    return _Dart_LibraryHandleError(
      library1,
      error,
    );
  }

  late final _Dart_LibraryHandleErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_LibraryHandleError');
  late final _Dart_LibraryHandleError =
      _Dart_LibraryHandleErrorPtr.asFunction<Object Function(Object, Object)>();

  /// Called by the embedder to load a partial program. Does not set the root
  /// library.
  ///
  /// \param kernel_buffer A buffer which contains a kernel binary (see
  /// pkg/kernel/binary.md). Must remain valid until isolate shutdown.
  /// \param kernel_buffer_size Length of the passed in buffer.
  ///
  /// \return A handle to the main library of the compilation unit, or an error.
  Object Dart_LoadLibraryFromKernel(
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
  ) {
    return _Dart_LoadLibraryFromKernel(
      kernel_buffer,
      kernel_buffer_size,
    );
  }

  late final _Dart_LoadLibraryFromKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_LoadLibraryFromKernel');
  late final _Dart_LoadLibraryFromKernel = _Dart_LoadLibraryFromKernelPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Indicates that all outstanding load requests have been satisfied.
  /// This finalizes all the new classes loaded and optionally completes
  /// deferred library futures.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param complete_futures Specify true if all deferred library
  /// futures should be completed, false otherwise.
  ///
  /// \return Success if all classes have been finalized and deferred library
  /// futures are completed. Otherwise, returns an error.
  Object Dart_FinalizeLoading(
    bool complete_futures,
  ) {
    return _Dart_FinalizeLoading(
      complete_futures,
    );
  }

  late final _Dart_FinalizeLoadingPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Bool)>>(
          'Dart_FinalizeLoading');
  late final _Dart_FinalizeLoading =
      _Dart_FinalizeLoadingPtr.asFunction<Object Function(bool)>();

  /// Returns the value of peer field of 'object' in 'peer'.
  ///
  /// \param object An object.
  /// \param peer An out parameter that returns the value of the peer
  /// field.
  ///
  /// \return Returns an error if 'object' is a subtype of Null, num, or
  /// bool.
  Object Dart_GetPeer(
    Object object,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_GetPeer(
      object,
      peer,
    );
  }

  late final _Dart_GetPeerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('Dart_GetPeer');
  late final _Dart_GetPeer = _Dart_GetPeerPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Sets the value of the peer field of 'object' to the value of
  /// 'peer'.
  ///
  /// \param object An object.
  /// \param peer A value to store in the peer field.
  ///
  /// \return Returns an error if 'object' is a subtype of Null, num, or
  /// bool.
  Object Dart_SetPeer(
    Object object,
    ffi.Pointer<ffi.Void> peer,
  ) {
    return _Dart_SetPeer(
      object,
      peer,
    );
  }

  late final _Dart_SetPeerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Void>)>>('Dart_SetPeer');
  late final _Dart_SetPeer = _Dart_SetPeerPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Void>)>();

  bool Dart_IsKernelIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsKernelIsolate(
      isolate,
    );
  }

  late final _Dart_IsKernelIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Isolate)>>(
          'Dart_IsKernelIsolate');
  late final _Dart_IsKernelIsolate =
      _Dart_IsKernelIsolatePtr.asFunction<bool Function(Dart_Isolate)>();

  bool Dart_KernelIsolateIsRunning() {
    return _Dart_KernelIsolateIsRunning();
  }

  late final _Dart_KernelIsolateIsRunningPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_KernelIsolateIsRunning');
  late final _Dart_KernelIsolateIsRunning =
      _Dart_KernelIsolateIsRunningPtr.asFunction<bool Function()>();

  int Dart_KernelPort() {
    return _Dart_KernelPort();
  }

  late final _Dart_KernelPortPtr =
      _lookup<ffi.NativeFunction<Dart_Port Function()>>('Dart_KernelPort');
  late final _Dart_KernelPort =
      _Dart_KernelPortPtr.asFunction<int Function()>();

  /// Compiles the given `script_uri` to a kernel file.
  ///
  /// \param platform_kernel A buffer containing the kernel of the platform (e.g.
  /// `vm_platform_strong.dill`). The VM does not take ownership of this memory.
  ///
  /// \param platform_kernel_size The length of the platform_kernel buffer.
  ///
  /// \param snapshot_compile Set to `true` when the compilation is for a snapshot.
  /// This is used by the frontend to determine if compilation related information
  /// should be printed to console (e.g., null safety mode).
  ///
  /// \param verbosity Specifies the logging behavior of the kernel compilation
  /// service.
  ///
  /// \return Returns the result of the compilation.
  ///
  /// On a successful compilation the returned [Dart_KernelCompilationResult] has
  /// a status of [Dart_KernelCompilationStatus_Ok] and the `kernel`/`kernel_size`
  /// fields are set. The caller takes ownership of the malloc()ed buffer.
  ///
  /// On a failed compilation the `error` might be set describing the reason for
  /// the failed compilation. The caller takes ownership of the malloc()ed
  /// error.
  ///
  /// Requires there to be a current isolate.
  Dart_KernelCompilationResult Dart_CompileToKernel(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Uint8> platform_kernel,
    int platform_kernel_size,
    bool incremental_compile,
    bool snapshot_compile,
    ffi.Pointer<ffi.Char> package_config,
    int verbosity,
  ) {
    return _Dart_CompileToKernel(
      script_uri,
      platform_kernel,
      platform_kernel_size,
      incremental_compile,
      snapshot_compile,
      package_config,
      verbosity,
    );
  }

  late final _Dart_CompileToKernelPtr = _lookup<
      ffi.NativeFunction<
          Dart_KernelCompilationResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('Dart_CompileToKernel');
  late final _Dart_CompileToKernel = _Dart_CompileToKernelPtr.asFunction<
      Dart_KernelCompilationResult Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          int,
          bool,
          bool,
          ffi.Pointer<ffi.Char>,
          int)>();

  /// Compiles the given `script_uri` to a kernel file.
  ///
  /// \param platform_kernel A buffer containing the kernel of the platform (e.g.
  /// `vm_platform_strong.dill`). The VM does not take ownership of this memory.
  ///
  /// \param platform_kernel_size The length of the platform_kernel buffer.
  ///
  /// \param snapshot_compile Set to `true` when the compilation is for a snapshot.
  /// This is used by the frontend to determine if compilation related information
  /// should be printed to console (e.g., null safety mode).
  ///
  /// \param null_safety Provides null-safety mode setting for the compiler.
  ///
  /// \param verbosity Specifies the logging behavior of the kernel compilation
  /// service.
  ///
  /// \return Returns the result of the compilation.
  ///
  /// On a successful compilation the returned [Dart_KernelCompilationResult] has
  /// a status of [Dart_KernelCompilationStatus_Ok] and the `kernel`/`kernel_size`
  /// fields are set. The caller takes ownership of the malloc()ed buffer.
  ///
  /// On a failed compilation the `error` might be set describing the reason for
  /// the failed compilation. The caller takes ownership of the malloc()ed
  /// error.
  Dart_KernelCompilationResult Dart_CompileToKernelWithGivenNullsafety(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Uint8> platform_kernel,
    int platform_kernel_size,
    bool snapshot_compile,
    ffi.Pointer<ffi.Char> package_config,
    bool null_safety,
    int verbosity,
  ) {
    return _Dart_CompileToKernelWithGivenNullsafety(
      script_uri,
      platform_kernel,
      platform_kernel_size,
      snapshot_compile,
      package_config,
      null_safety,
      verbosity,
    );
  }

  late final _Dart_CompileToKernelWithGivenNullsafetyPtr = _lookup<
      ffi.NativeFunction<
          Dart_KernelCompilationResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Int32)>>('Dart_CompileToKernelWithGivenNullsafety');
  late final _Dart_CompileToKernelWithGivenNullsafety =
      _Dart_CompileToKernelWithGivenNullsafetyPtr.asFunction<
          Dart_KernelCompilationResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              int,
              bool,
              ffi.Pointer<ffi.Char>,
              bool,
              int)>();

  Dart_KernelCompilationResult Dart_KernelListDependencies() {
    return _Dart_KernelListDependencies();
  }

  late final _Dart_KernelListDependenciesPtr =
      _lookup<ffi.NativeFunction<Dart_KernelCompilationResult Function()>>(
          'Dart_KernelListDependencies');
  late final _Dart_KernelListDependencies = _Dart_KernelListDependenciesPtr
      .asFunction<Dart_KernelCompilationResult Function()>();

  /// Sets the kernel buffer which will be used to load Dart SDK sources
  /// dynamically at runtime.
  ///
  /// \param platform_kernel A buffer containing kernel which has sources for the
  /// Dart SDK populated. Note: The VM does not take ownership of this memory.
  ///
  /// \param platform_kernel_size The length of the platform_kernel buffer.
  void Dart_SetDartLibrarySourcesKernel(
    ffi.Pointer<ffi.Uint8> platform_kernel,
    int platform_kernel_size,
  ) {
    return _Dart_SetDartLibrarySourcesKernel(
      platform_kernel,
      platform_kernel_size,
    );
  }

  late final _Dart_SetDartLibrarySourcesKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_SetDartLibrarySourcesKernel');
  late final _Dart_SetDartLibrarySourcesKernel =
      _Dart_SetDartLibrarySourcesKernelPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Detect the null safety opt-in status.
  ///
  /// When running from source, it is based on the opt-in status of `script_uri`.
  /// When running from a kernel buffer, it is based on the mode used when
  /// generating `kernel_buffer`.
  /// When running from an appJIT or AOT snapshot, it is based on the mode used
  /// when generating `snapshot_data`.
  ///
  /// \param script_uri Uri of the script that contains the source code
  ///
  /// \param package_config Uri of the package configuration file (either in format
  /// of .packages or .dart_tool/package_config.json) for the null safety
  /// detection to resolve package imports against. If this parameter is not
  /// passed the package resolution of the parent isolate should be used.
  ///
  /// \param original_working_directory current working directory when the VM
  /// process was launched, this is used to correctly resolve the path specified
  /// for package_config.
  ///
  /// \param snapshot_data Buffer containing the snapshot data of the
  /// isolate or NULL if no snapshot is provided. If provided, the buffers must
  /// remain valid until the isolate shuts down.
  ///
  /// \param snapshot_instructions Buffer containing the snapshot instructions of
  /// the isolate or NULL if no snapshot is provided. If provided, the buffers
  /// must remain valid until the isolate shuts down.
  ///
  /// \param kernel_buffer A buffer which contains a kernel/DIL program. Must
  /// remain valid until isolate shutdown.
  ///
  /// \param kernel_buffer_size The size of `kernel_buffer`.
  ///
  /// \return Returns true if the null safety is opted in by the input being
  /// run `script_uri`, `snapshot_data` or `kernel_buffer`.
  bool Dart_DetectNullSafety(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Char> package_config,
    ffi.Pointer<ffi.Char> original_working_directory,
    ffi.Pointer<ffi.Uint8> snapshot_data,
    ffi.Pointer<ffi.Uint8> snapshot_instructions,
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
  ) {
    return _Dart_DetectNullSafety(
      script_uri,
      package_config,
      original_working_directory,
      snapshot_data,
      snapshot_instructions,
      kernel_buffer,
      kernel_buffer_size,
    );
  }

  late final _Dart_DetectNullSafetyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_DetectNullSafety');
  late final _Dart_DetectNullSafety = _Dart_DetectNullSafetyPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  /// Returns true if isolate is the service isolate.
  ///
  /// \param isolate An isolate
  ///
  /// \return Returns true if 'isolate' is the service isolate.
  bool Dart_IsServiceIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsServiceIsolate(
      isolate,
    );
  }

  late final _Dart_IsServiceIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Isolate)>>(
          'Dart_IsServiceIsolate');
  late final _Dart_IsServiceIsolate =
      _Dart_IsServiceIsolatePtr.asFunction<bool Function(Dart_Isolate)>();

  /// Writes the CPU profile to the timeline as a series of 'instant' events.
  ///
  /// Note that this is an expensive operation.
  ///
  /// \param main_port The main port of the Isolate whose profile samples to write.
  /// \param error An optional error, must be free()ed by caller.
  ///
  /// \return Returns true if the profile is successfully written and false
  /// otherwise.
  bool Dart_WriteProfileToTimeline(
    int main_port,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_WriteProfileToTimeline(
      main_port,
      error,
    );
  }

  late final _Dart_WriteProfileToTimelinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  Dart_Port, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Dart_WriteProfileToTimeline');
  late final _Dart_WriteProfileToTimeline = _Dart_WriteProfileToTimelinePtr
      .asFunction<bool Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Compiles all functions reachable from entry points and marks
  /// the isolate to disallow future compilation.
  ///
  /// Entry points should be specified using `@pragma("vm:entry-point")`
  /// annotation.
  ///
  /// \return An error handle if a compilation error or runtime error running const
  /// constructors was encountered.
  Object Dart_Precompile() {
    return _Dart_Precompile();
  }

  late final _Dart_PrecompilePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_Precompile');
  late final _Dart_Precompile =
      _Dart_PrecompilePtr.asFunction<Object Function()>();

  Object Dart_LoadingUnitLibraryUris(
    int loading_unit_id,
  ) {
    return _Dart_LoadingUnitLibraryUris(
      loading_unit_id,
    );
  }

  late final _Dart_LoadingUnitLibraryUrisPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>(
          'Dart_LoadingUnitLibraryUris');
  late final _Dart_LoadingUnitLibraryUris =
      _Dart_LoadingUnitLibraryUrisPtr.asFunction<Object Function(int)>();

  /// Creates a precompiled snapshot.
  /// - A root library must have been loaded.
  /// - Dart_Precompile must have been called.
  ///
  /// Outputs an assembly file defining the symbols listed in the definitions
  /// above.
  ///
  /// The assembly should be compiled as a static or shared library and linked or
  /// loaded by the embedder. Running this snapshot requires a VM compiled with
  /// DART_PRECOMPILED_SNAPSHOT. The kDartVmSnapshotData and
  /// kDartVmSnapshotInstructions should be passed to Dart_Initialize. The
  /// kDartIsolateSnapshotData and kDartIsolateSnapshotInstructions should be
  /// passed to Dart_CreateIsolateGroup.
  ///
  /// The callback will be invoked one or more times to provide the assembly code.
  ///
  /// If stripped is true, then the assembly code will not include DWARF
  /// debugging sections.
  ///
  /// If debug_callback_data is provided, debug_callback_data will be used with
  /// the callback to provide separate debugging information.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppAOTSnapshotAsAssembly(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
    bool stripped,
    ffi.Pointer<ffi.Void> debug_callback_data,
  ) {
    return _Dart_CreateAppAOTSnapshotAsAssembly(
      callback,
      callback_data,
      stripped,
      debug_callback_data,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsAssemblyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateAppAOTSnapshotAsAssembly');
  late final _Dart_CreateAppAOTSnapshotAsAssembly =
      _Dart_CreateAppAOTSnapshotAsAssemblyPtr.asFunction<
          Object Function(Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>,
              bool, ffi.Pointer<ffi.Void>)>();

  Object Dart_CreateAppAOTSnapshotAsAssemblies(
    Dart_CreateLoadingUnitCallback next_callback,
    ffi.Pointer<ffi.Void> next_callback_data,
    bool stripped,
    Dart_StreamingWriteCallback write_callback,
    Dart_StreamingCloseCallback close_callback,
  ) {
    return _Dart_CreateAppAOTSnapshotAsAssemblies(
      next_callback,
      next_callback_data,
      stripped,
      write_callback,
      close_callback,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsAssembliesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_CreateLoadingUnitCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Bool,
                  Dart_StreamingWriteCallback,
                  Dart_StreamingCloseCallback)>>(
      'Dart_CreateAppAOTSnapshotAsAssemblies');
  late final _Dart_CreateAppAOTSnapshotAsAssemblies =
      _Dart_CreateAppAOTSnapshotAsAssembliesPtr.asFunction<
          Object Function(
              Dart_CreateLoadingUnitCallback,
              ffi.Pointer<ffi.Void>,
              bool,
              Dart_StreamingWriteCallback,
              Dart_StreamingCloseCallback)>();

  /// Creates a precompiled snapshot.
  /// - A root library must have been loaded.
  /// - Dart_Precompile must have been called.
  ///
  /// Outputs an ELF shared library defining the symbols
  /// - _kDartVmSnapshotData
  /// - _kDartVmSnapshotInstructions
  /// - _kDartIsolateSnapshotData
  /// - _kDartIsolateSnapshotInstructions
  ///
  /// The shared library should be dynamically loaded by the embedder.
  /// Running this snapshot requires a VM compiled with DART_PRECOMPILED_SNAPSHOT.
  /// The kDartVmSnapshotData and kDartVmSnapshotInstructions should be passed to
  /// Dart_Initialize. The kDartIsolateSnapshotData and
  /// kDartIsolateSnapshotInstructions should be passed to Dart_CreateIsolate.
  ///
  /// The callback will be invoked one or more times to provide the binary output.
  ///
  /// If stripped is true, then the binary output will not include DWARF
  /// debugging sections.
  ///
  /// If debug_callback_data is provided, debug_callback_data will be used with
  /// the callback to provide separate debugging information.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppAOTSnapshotAsElf(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
    bool stripped,
    ffi.Pointer<ffi.Void> debug_callback_data,
  ) {
    return _Dart_CreateAppAOTSnapshotAsElf(
      callback,
      callback_data,
      stripped,
      debug_callback_data,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsElfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateAppAOTSnapshotAsElf');
  late final _Dart_CreateAppAOTSnapshotAsElf =
      _Dart_CreateAppAOTSnapshotAsElfPtr.asFunction<
          Object Function(Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>,
              bool, ffi.Pointer<ffi.Void>)>();

  Object Dart_CreateAppAOTSnapshotAsElfs(
    Dart_CreateLoadingUnitCallback next_callback,
    ffi.Pointer<ffi.Void> next_callback_data,
    bool stripped,
    Dart_StreamingWriteCallback write_callback,
    Dart_StreamingCloseCallback close_callback,
  ) {
    return _Dart_CreateAppAOTSnapshotAsElfs(
      next_callback,
      next_callback_data,
      stripped,
      write_callback,
      close_callback,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsElfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_CreateLoadingUnitCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              Dart_StreamingWriteCallback,
              Dart_StreamingCloseCallback)>>('Dart_CreateAppAOTSnapshotAsElfs');
  late final _Dart_CreateAppAOTSnapshotAsElfs =
      _Dart_CreateAppAOTSnapshotAsElfsPtr.asFunction<
          Object Function(
              Dart_CreateLoadingUnitCallback,
              ffi.Pointer<ffi.Void>,
              bool,
              Dart_StreamingWriteCallback,
              Dart_StreamingCloseCallback)>();

  /// Like Dart_CreateAppAOTSnapshotAsAssembly, but only includes
  /// kDartVmSnapshotData and kDartVmSnapshotInstructions. It also does
  /// not strip DWARF information from the generated assembly or allow for
  /// separate debug information.
  Object Dart_CreateVMAOTSnapshotAsAssembly(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
  ) {
    return _Dart_CreateVMAOTSnapshotAsAssembly(
      callback,
      callback_data,
    );
  }

  late final _Dart_CreateVMAOTSnapshotAsAssemblyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateVMAOTSnapshotAsAssembly');
  late final _Dart_CreateVMAOTSnapshotAsAssembly =
      _Dart_CreateVMAOTSnapshotAsAssemblyPtr.asFunction<
          Object Function(
              Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>)>();

  /// Sorts the class-ids in depth first traversal order of the inheritance
  /// tree. This is a costly operation, but it can make method dispatch
  /// more efficient and is done before writing snapshots.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_SortClasses() {
    return _Dart_SortClasses();
  }

  late final _Dart_SortClassesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_SortClasses');
  late final _Dart_SortClasses =
      _Dart_SortClassesPtr.asFunction<Object Function()>();

  /// Creates a snapshot that caches compiled code and type feedback for faster
  /// startup and quicker warmup in a subsequent process.
  ///
  /// Outputs a snapshot in two pieces. The pieces should be passed to
  /// Dart_CreateIsolateGroup in a VM using the same VM snapshot pieces used in the
  /// current VM. The instructions piece must be loaded with read and execute
  /// permissions; the data piece may be loaded as read-only.
  ///
  /// - Requires the VM to have not been started with --precompilation.
  /// - Not supported when targeting IA32.
  /// - The VM writing the snapshot and the VM reading the snapshot must be the
  /// same version, must be built in the same DEBUG/RELEASE/PRODUCT mode, must
  /// be targeting the same architecture, and must both be in checked mode or
  /// both in unchecked mode.
  ///
  /// The buffers are scope allocated and are only valid until the next call to
  /// Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppJITSnapshotAsBlobs(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_instructions_size,
  ) {
    return _Dart_CreateAppJITSnapshotAsBlobs(
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      isolate_snapshot_instructions_buffer,
      isolate_snapshot_instructions_size,
    );
  }

  late final _Dart_CreateAppJITSnapshotAsBlobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_CreateAppJITSnapshotAsBlobs');
  late final _Dart_CreateAppJITSnapshotAsBlobs =
      _Dart_CreateAppJITSnapshotAsBlobsPtr.asFunction<
          Object Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Like Dart_CreateAppJITSnapshotAsBlobs, but also creates a new VM snapshot.
  Object Dart_CreateCoreJITSnapshotAsBlobs(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_instructions_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_instructions_size,
  ) {
    return _Dart_CreateCoreJITSnapshotAsBlobs(
      vm_snapshot_data_buffer,
      vm_snapshot_data_size,
      vm_snapshot_instructions_buffer,
      vm_snapshot_instructions_size,
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      isolate_snapshot_instructions_buffer,
      isolate_snapshot_instructions_size,
    );
  }

  late final _Dart_CreateCoreJITSnapshotAsBlobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_CreateCoreJITSnapshotAsBlobs');
  late final _Dart_CreateCoreJITSnapshotAsBlobs =
      _Dart_CreateCoreJITSnapshotAsBlobsPtr.asFunction<
          Object Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Get obfuscation map for precompiled code.
  ///
  /// Obfuscation map is encoded as a JSON array of pairs (original name,
  /// obfuscated name).
  ///
  /// \return Returns an error handler if the VM was built in a mode that does not
  /// support obfuscation.
  Object Dart_GetObfuscationMap(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
    ffi.Pointer<ffi.IntPtr> buffer_length,
  ) {
    return _Dart_GetObfuscationMap(
      buffer,
      buffer_length,
    );
  }

  late final _Dart_GetObfuscationMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetObfuscationMap');
  late final _Dart_GetObfuscationMap = _Dart_GetObfuscationMapPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.IntPtr>)>();

  /// Returns whether the VM only supports running from precompiled snapshots and
  /// not from any other kind of snapshot or from source (that is, the VM was
  /// compiled with DART_PRECOMPILED_RUNTIME).
  bool Dart_IsPrecompiledRuntime() {
    return _Dart_IsPrecompiledRuntime();
  }

  late final _Dart_IsPrecompiledRuntimePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_IsPrecompiledRuntime');
  late final _Dart_IsPrecompiledRuntime =
      _Dart_IsPrecompiledRuntimePtr.asFunction<bool Function()>();

  /// Print a native stack trace. Used for crash handling.
  ///
  /// If context is NULL, prints the current stack trace. Otherwise, context
  /// should be a CONTEXT* (Windows) or ucontext_t* (POSIX) from a signal handler
  /// running on the current thread.
  void Dart_DumpNativeStackTrace(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _Dart_DumpNativeStackTrace(
      context,
    );
  }

  late final _Dart_DumpNativeStackTracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Dart_DumpNativeStackTrace');
  late final _Dart_DumpNativeStackTrace = _Dart_DumpNativeStackTracePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Indicate that the process is about to abort, and the Dart VM should not
  /// attempt to cleanup resources.
  void Dart_PrepareToAbort() {
    return _Dart_PrepareToAbort();
  }

  late final _Dart_PrepareToAbortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_PrepareToAbort');
  late final _Dart_PrepareToAbort =
      _Dart_PrepareToAbortPtr.asFunction<void Function()>();

  /// Posts a message on some port. The message will contain the Dart_CObject
  /// object graph rooted in 'message'.
  ///
  /// While the message is being sent the state of the graph of Dart_CObject
  /// structures rooted in 'message' should not be accessed, as the message
  /// generation will make temporary modifications to the data. When the message
  /// has been sent the graph will be fully restored.
  ///
  /// If true is returned, the message was enqueued, and finalizers for external
  /// typed data will eventually run, even if the receiving isolate shuts down
  /// before processing the message. If false is returned, the message was not
  /// enqueued and ownership of external typed data in the message remains with the
  /// caller.
  ///
  /// This function may be called on any thread when the VM is running (that is,
  /// after Dart_Initialize has returned and before Dart_Cleanup has been called).
  ///
  /// \param port_id The destination port.
  /// \param message The message to send.
  ///
  /// \return True if the message was posted.
  bool Dart_PostCObject(
    int port_id,
    ffi.Pointer<Dart_CObject> message,
  ) {
    return _Dart_PostCObject(
      port_id,
      message,
    );
  }

  late final _Dart_PostCObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              Dart_Port, ffi.Pointer<Dart_CObject>)>>('Dart_PostCObject');
  late final _Dart_PostCObject = _Dart_PostCObjectPtr.asFunction<
      bool Function(int, ffi.Pointer<Dart_CObject>)>();

  /// Posts a message on some port. The message will contain the integer 'message'.
  ///
  /// \param port_id The destination port.
  /// \param message The message to send.
  ///
  /// \return True if the message was posted.
  bool Dart_PostInteger(
    int port_id,
    int message,
  ) {
    return _Dart_PostInteger(
      port_id,
      message,
    );
  }

  late final _Dart_PostIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port, ffi.Int64)>>(
          'Dart_PostInteger');
  late final _Dart_PostInteger =
      _Dart_PostIntegerPtr.asFunction<bool Function(int, int)>();

  /// Creates a new native port.  When messages are received on this
  /// native port, then they will be dispatched to the provided native
  /// message handler.
  ///
  /// \param name The name of this port in debugging messages.
  /// \param handler The C handler to run when messages arrive on the port.
  /// \param handle_concurrently Is it okay to process requests on this
  /// native port concurrently?
  ///
  /// \return If successful, returns the port id for the native port.  In
  /// case of error, returns ILLEGAL_PORT.
  int Dart_NewNativePort(
    ffi.Pointer<ffi.Char> name,
    Dart_NativeMessageHandler handler,
    bool handle_concurrently,
  ) {
    return _Dart_NewNativePort(
      name,
      handler,
      handle_concurrently,
    );
  }

  late final _Dart_NewNativePortPtr = _lookup<
      ffi.NativeFunction<
          Dart_Port Function(ffi.Pointer<ffi.Char>, Dart_NativeMessageHandler,
              ffi.Bool)>>('Dart_NewNativePort');
  late final _Dart_NewNativePort = _Dart_NewNativePortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, Dart_NativeMessageHandler, bool)>();

  /// Closes the native port with the given id.
  ///
  /// The port must have been allocated by a call to Dart_NewNativePort.
  ///
  /// \param native_port_id The id of the native port to close.
  ///
  /// \return Returns true if the port was closed successfully.
  bool Dart_CloseNativePort(
    int native_port_id,
  ) {
    return _Dart_CloseNativePort(
      native_port_id,
    );
  }

  late final _Dart_CloseNativePortPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port)>>(
          'Dart_CloseNativePort');
  late final _Dart_CloseNativePort =
      _Dart_CloseNativePortPtr.asFunction<bool Function(int)>();

  /// Forces all loaded classes and functions to be compiled eagerly in
  /// the current isolate..
  ///
  /// TODO(turnidge): Document.
  Object Dart_CompileAll() {
    return _Dart_CompileAll();
  }

  late final _Dart_CompileAllPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_CompileAll');
  late final _Dart_CompileAll =
      _Dart_CompileAllPtr.asFunction<Object Function()>();

  /// Finalizes all classes.
  Object Dart_FinalizeAllClasses() {
    return _Dart_FinalizeAllClasses();
  }

  late final _Dart_FinalizeAllClassesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'Dart_FinalizeAllClasses');
  late final _Dart_FinalizeAllClasses =
      _Dart_FinalizeAllClassesPtr.asFunction<Object Function()>();

  ffi.Pointer<ffi.Void> Dart_ExecuteInternalCommand(
    ffi.Pointer<ffi.Char> command,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _Dart_ExecuteInternalCommand(
      command,
      arg,
    );
  }

  late final _Dart_ExecuteInternalCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('Dart_ExecuteInternalCommand');
  late final _Dart_ExecuteInternalCommand =
      _Dart_ExecuteInternalCommandPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// \mainpage Dynamically Linked Dart API
  ///
  /// This exposes a subset of symbols from dart_api.h and dart_native_api.h
  /// available in every Dart embedder through dynamic linking.
  ///
  /// All symbols are postfixed with _DL to indicate that they are dynamically
  /// linked and to prevent conflicts with the original symbol.
  ///
  /// Link `dart_api_dl.c` file into your library and invoke
  /// `Dart_InitializeApiDL` with `NativeApi.initializeApiDLData`.
  int Dart_InitializeApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _Dart_InitializeApiDL(
      data,
    );
  }

  late final _Dart_InitializeApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'Dart_InitializeApiDL');
  late final _Dart_InitializeApiDL = _Dart_InitializeApiDLPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<Dart_PostCObject_Type> _Dart_PostCObject_DL =
      _lookup<Dart_PostCObject_Type>('Dart_PostCObject_DL');

  Dart_PostCObject_Type get Dart_PostCObject_DL => _Dart_PostCObject_DL.value;

  set Dart_PostCObject_DL(Dart_PostCObject_Type value) =>
      _Dart_PostCObject_DL.value = value;

  late final ffi.Pointer<Dart_PostInteger_Type> _Dart_PostInteger_DL =
      _lookup<Dart_PostInteger_Type>('Dart_PostInteger_DL');

  Dart_PostInteger_Type get Dart_PostInteger_DL => _Dart_PostInteger_DL.value;

  set Dart_PostInteger_DL(Dart_PostInteger_Type value) =>
      _Dart_PostInteger_DL.value = value;

  late final ffi.Pointer<Dart_NewNativePort_Type> _Dart_NewNativePort_DL =
      _lookup<Dart_NewNativePort_Type>('Dart_NewNativePort_DL');

  Dart_NewNativePort_Type get Dart_NewNativePort_DL =>
      _Dart_NewNativePort_DL.value;

  set Dart_NewNativePort_DL(Dart_NewNativePort_Type value) =>
      _Dart_NewNativePort_DL.value = value;

  late final ffi.Pointer<Dart_CloseNativePort_Type> _Dart_CloseNativePort_DL =
      _lookup<Dart_CloseNativePort_Type>('Dart_CloseNativePort_DL');

  Dart_CloseNativePort_Type get Dart_CloseNativePort_DL =>
      _Dart_CloseNativePort_DL.value;

  set Dart_CloseNativePort_DL(Dart_CloseNativePort_Type value) =>
      _Dart_CloseNativePort_DL.value = value;

  late final ffi.Pointer<Dart_IsError_Type> _Dart_IsError_DL =
      _lookup<Dart_IsError_Type>('Dart_IsError_DL');

  Dart_IsError_Type get Dart_IsError_DL => _Dart_IsError_DL.value;

  set Dart_IsError_DL(Dart_IsError_Type value) =>
      _Dart_IsError_DL.value = value;

  late final ffi.Pointer<Dart_IsApiError_Type> _Dart_IsApiError_DL =
      _lookup<Dart_IsApiError_Type>('Dart_IsApiError_DL');

  Dart_IsApiError_Type get Dart_IsApiError_DL => _Dart_IsApiError_DL.value;

  set Dart_IsApiError_DL(Dart_IsApiError_Type value) =>
      _Dart_IsApiError_DL.value = value;

  late final ffi.Pointer<Dart_IsUnhandledExceptionError_Type>
      _Dart_IsUnhandledExceptionError_DL =
      _lookup<Dart_IsUnhandledExceptionError_Type>(
          'Dart_IsUnhandledExceptionError_DL');

  Dart_IsUnhandledExceptionError_Type get Dart_IsUnhandledExceptionError_DL =>
      _Dart_IsUnhandledExceptionError_DL.value;

  set Dart_IsUnhandledExceptionError_DL(
          Dart_IsUnhandledExceptionError_Type value) =>
      _Dart_IsUnhandledExceptionError_DL.value = value;

  late final ffi.Pointer<Dart_IsCompilationError_Type>
      _Dart_IsCompilationError_DL =
      _lookup<Dart_IsCompilationError_Type>('Dart_IsCompilationError_DL');

  Dart_IsCompilationError_Type get Dart_IsCompilationError_DL =>
      _Dart_IsCompilationError_DL.value;

  set Dart_IsCompilationError_DL(Dart_IsCompilationError_Type value) =>
      _Dart_IsCompilationError_DL.value = value;

  late final ffi.Pointer<Dart_IsFatalError_Type> _Dart_IsFatalError_DL =
      _lookup<Dart_IsFatalError_Type>('Dart_IsFatalError_DL');

  Dart_IsFatalError_Type get Dart_IsFatalError_DL =>
      _Dart_IsFatalError_DL.value;

  set Dart_IsFatalError_DL(Dart_IsFatalError_Type value) =>
      _Dart_IsFatalError_DL.value = value;

  late final ffi.Pointer<Dart_GetError_Type> _Dart_GetError_DL =
      _lookup<Dart_GetError_Type>('Dart_GetError_DL');

  Dart_GetError_Type get Dart_GetError_DL => _Dart_GetError_DL.value;

  set Dart_GetError_DL(Dart_GetError_Type value) =>
      _Dart_GetError_DL.value = value;

  late final ffi.Pointer<Dart_ErrorHasException_Type>
      _Dart_ErrorHasException_DL =
      _lookup<Dart_ErrorHasException_Type>('Dart_ErrorHasException_DL');

  Dart_ErrorHasException_Type get Dart_ErrorHasException_DL =>
      _Dart_ErrorHasException_DL.value;

  set Dart_ErrorHasException_DL(Dart_ErrorHasException_Type value) =>
      _Dart_ErrorHasException_DL.value = value;

  late final ffi.Pointer<Dart_ErrorGetException_Type>
      _Dart_ErrorGetException_DL =
      _lookup<Dart_ErrorGetException_Type>('Dart_ErrorGetException_DL');

  Dart_ErrorGetException_Type get Dart_ErrorGetException_DL =>
      _Dart_ErrorGetException_DL.value;

  set Dart_ErrorGetException_DL(Dart_ErrorGetException_Type value) =>
      _Dart_ErrorGetException_DL.value = value;

  late final ffi.Pointer<Dart_ErrorGetStackTrace_Type>
      _Dart_ErrorGetStackTrace_DL =
      _lookup<Dart_ErrorGetStackTrace_Type>('Dart_ErrorGetStackTrace_DL');

  Dart_ErrorGetStackTrace_Type get Dart_ErrorGetStackTrace_DL =>
      _Dart_ErrorGetStackTrace_DL.value;

  set Dart_ErrorGetStackTrace_DL(Dart_ErrorGetStackTrace_Type value) =>
      _Dart_ErrorGetStackTrace_DL.value = value;

  late final ffi.Pointer<Dart_NewApiError_Type> _Dart_NewApiError_DL =
      _lookup<Dart_NewApiError_Type>('Dart_NewApiError_DL');

  Dart_NewApiError_Type get Dart_NewApiError_DL => _Dart_NewApiError_DL.value;

  set Dart_NewApiError_DL(Dart_NewApiError_Type value) =>
      _Dart_NewApiError_DL.value = value;

  late final ffi.Pointer<Dart_NewCompilationError_Type>
      _Dart_NewCompilationError_DL =
      _lookup<Dart_NewCompilationError_Type>('Dart_NewCompilationError_DL');

  Dart_NewCompilationError_Type get Dart_NewCompilationError_DL =>
      _Dart_NewCompilationError_DL.value;

  set Dart_NewCompilationError_DL(Dart_NewCompilationError_Type value) =>
      _Dart_NewCompilationError_DL.value = value;

  late final ffi.Pointer<Dart_NewUnhandledExceptionError_Type>
      _Dart_NewUnhandledExceptionError_DL =
      _lookup<Dart_NewUnhandledExceptionError_Type>(
          'Dart_NewUnhandledExceptionError_DL');

  Dart_NewUnhandledExceptionError_Type get Dart_NewUnhandledExceptionError_DL =>
      _Dart_NewUnhandledExceptionError_DL.value;

  set Dart_NewUnhandledExceptionError_DL(
          Dart_NewUnhandledExceptionError_Type value) =>
      _Dart_NewUnhandledExceptionError_DL.value = value;

  late final ffi.Pointer<Dart_PropagateError_Type> _Dart_PropagateError_DL =
      _lookup<Dart_PropagateError_Type>('Dart_PropagateError_DL');

  Dart_PropagateError_Type get Dart_PropagateError_DL =>
      _Dart_PropagateError_DL.value;

  set Dart_PropagateError_DL(Dart_PropagateError_Type value) =>
      _Dart_PropagateError_DL.value = value;

  late final ffi.Pointer<Dart_HandleFromPersistent_Type>
      _Dart_HandleFromPersistent_DL =
      _lookup<Dart_HandleFromPersistent_Type>('Dart_HandleFromPersistent_DL');

  Dart_HandleFromPersistent_Type get Dart_HandleFromPersistent_DL =>
      _Dart_HandleFromPersistent_DL.value;

  set Dart_HandleFromPersistent_DL(Dart_HandleFromPersistent_Type value) =>
      _Dart_HandleFromPersistent_DL.value = value;

  late final ffi.Pointer<Dart_HandleFromWeakPersistent_Type>
      _Dart_HandleFromWeakPersistent_DL =
      _lookup<Dart_HandleFromWeakPersistent_Type>(
          'Dart_HandleFromWeakPersistent_DL');

  Dart_HandleFromWeakPersistent_Type get Dart_HandleFromWeakPersistent_DL =>
      _Dart_HandleFromWeakPersistent_DL.value;

  set Dart_HandleFromWeakPersistent_DL(
          Dart_HandleFromWeakPersistent_Type value) =>
      _Dart_HandleFromWeakPersistent_DL.value = value;

  late final ffi.Pointer<Dart_NewPersistentHandle_Type>
      _Dart_NewPersistentHandle_DL =
      _lookup<Dart_NewPersistentHandle_Type>('Dart_NewPersistentHandle_DL');

  Dart_NewPersistentHandle_Type get Dart_NewPersistentHandle_DL =>
      _Dart_NewPersistentHandle_DL.value;

  set Dart_NewPersistentHandle_DL(Dart_NewPersistentHandle_Type value) =>
      _Dart_NewPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_SetPersistentHandle_Type>
      _Dart_SetPersistentHandle_DL =
      _lookup<Dart_SetPersistentHandle_Type>('Dart_SetPersistentHandle_DL');

  Dart_SetPersistentHandle_Type get Dart_SetPersistentHandle_DL =>
      _Dart_SetPersistentHandle_DL.value;

  set Dart_SetPersistentHandle_DL(Dart_SetPersistentHandle_Type value) =>
      _Dart_SetPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeletePersistentHandle_Type>
      _Dart_DeletePersistentHandle_DL =
      _lookup<Dart_DeletePersistentHandle_Type>(
          'Dart_DeletePersistentHandle_DL');

  Dart_DeletePersistentHandle_Type get Dart_DeletePersistentHandle_DL =>
      _Dart_DeletePersistentHandle_DL.value;

  set Dart_DeletePersistentHandle_DL(Dart_DeletePersistentHandle_Type value) =>
      _Dart_DeletePersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_NewWeakPersistentHandle_Type>
      _Dart_NewWeakPersistentHandle_DL =
      _lookup<Dart_NewWeakPersistentHandle_Type>(
          'Dart_NewWeakPersistentHandle_DL');

  Dart_NewWeakPersistentHandle_Type get Dart_NewWeakPersistentHandle_DL =>
      _Dart_NewWeakPersistentHandle_DL.value;

  set Dart_NewWeakPersistentHandle_DL(
          Dart_NewWeakPersistentHandle_Type value) =>
      _Dart_NewWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeleteWeakPersistentHandle_Type>
      _Dart_DeleteWeakPersistentHandle_DL =
      _lookup<Dart_DeleteWeakPersistentHandle_Type>(
          'Dart_DeleteWeakPersistentHandle_DL');

  Dart_DeleteWeakPersistentHandle_Type get Dart_DeleteWeakPersistentHandle_DL =>
      _Dart_DeleteWeakPersistentHandle_DL.value;

  set Dart_DeleteWeakPersistentHandle_DL(
          Dart_DeleteWeakPersistentHandle_Type value) =>
      _Dart_DeleteWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_UpdateExternalSize_Type>
      _Dart_UpdateExternalSize_DL =
      _lookup<Dart_UpdateExternalSize_Type>('Dart_UpdateExternalSize_DL');

  Dart_UpdateExternalSize_Type get Dart_UpdateExternalSize_DL =>
      _Dart_UpdateExternalSize_DL.value;

  set Dart_UpdateExternalSize_DL(Dart_UpdateExternalSize_Type value) =>
      _Dart_UpdateExternalSize_DL.value = value;

  late final ffi.Pointer<Dart_NewFinalizableHandle_Type>
      _Dart_NewFinalizableHandle_DL =
      _lookup<Dart_NewFinalizableHandle_Type>('Dart_NewFinalizableHandle_DL');

  Dart_NewFinalizableHandle_Type get Dart_NewFinalizableHandle_DL =>
      _Dart_NewFinalizableHandle_DL.value;

  set Dart_NewFinalizableHandle_DL(Dart_NewFinalizableHandle_Type value) =>
      _Dart_NewFinalizableHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeleteFinalizableHandle_Type>
      _Dart_DeleteFinalizableHandle_DL =
      _lookup<Dart_DeleteFinalizableHandle_Type>(
          'Dart_DeleteFinalizableHandle_DL');

  Dart_DeleteFinalizableHandle_Type get Dart_DeleteFinalizableHandle_DL =>
      _Dart_DeleteFinalizableHandle_DL.value;

  set Dart_DeleteFinalizableHandle_DL(
          Dart_DeleteFinalizableHandle_Type value) =>
      _Dart_DeleteFinalizableHandle_DL.value = value;

  late final ffi.Pointer<Dart_UpdateFinalizableExternalSize_Type>
      _Dart_UpdateFinalizableExternalSize_DL =
      _lookup<Dart_UpdateFinalizableExternalSize_Type>(
          'Dart_UpdateFinalizableExternalSize_DL');

  Dart_UpdateFinalizableExternalSize_Type
      get Dart_UpdateFinalizableExternalSize_DL =>
          _Dart_UpdateFinalizableExternalSize_DL.value;

  set Dart_UpdateFinalizableExternalSize_DL(
          Dart_UpdateFinalizableExternalSize_Type value) =>
      _Dart_UpdateFinalizableExternalSize_DL.value = value;

  late final ffi.Pointer<Dart_Post_Type> _Dart_Post_DL =
      _lookup<Dart_Post_Type>('Dart_Post_DL');

  Dart_Post_Type get Dart_Post_DL => _Dart_Post_DL.value;

  set Dart_Post_DL(Dart_Post_Type value) => _Dart_Post_DL.value = value;

  late final ffi.Pointer<Dart_NewSendPort_Type> _Dart_NewSendPort_DL =
      _lookup<Dart_NewSendPort_Type>('Dart_NewSendPort_DL');

  Dart_NewSendPort_Type get Dart_NewSendPort_DL => _Dart_NewSendPort_DL.value;

  set Dart_NewSendPort_DL(Dart_NewSendPort_Type value) =>
      _Dart_NewSendPort_DL.value = value;

  late final ffi.Pointer<Dart_SendPortGetId_Type> _Dart_SendPortGetId_DL =
      _lookup<Dart_SendPortGetId_Type>('Dart_SendPortGetId_DL');

  Dart_SendPortGetId_Type get Dart_SendPortGetId_DL =>
      _Dart_SendPortGetId_DL.value;

  set Dart_SendPortGetId_DL(Dart_SendPortGetId_Type value) =>
      _Dart_SendPortGetId_DL.value = value;

  late final ffi.Pointer<Dart_EnterScope_Type> _Dart_EnterScope_DL =
      _lookup<Dart_EnterScope_Type>('Dart_EnterScope_DL');

  Dart_EnterScope_Type get Dart_EnterScope_DL => _Dart_EnterScope_DL.value;

  set Dart_EnterScope_DL(Dart_EnterScope_Type value) =>
      _Dart_EnterScope_DL.value = value;

  late final ffi.Pointer<Dart_ExitScope_Type> _Dart_ExitScope_DL =
      _lookup<Dart_ExitScope_Type>('Dart_ExitScope_DL');

  Dart_ExitScope_Type get Dart_ExitScope_DL => _Dart_ExitScope_DL.value;

  set Dart_ExitScope_DL(Dart_ExitScope_Type value) =>
      _Dart_ExitScope_DL.value = value;

  ffi.Pointer<transport_listener_t> transport_listener_initialize(
    ffi.Pointer<transport_listener_configuration_t> configuration,
    int id,
  ) {
    return _transport_listener_initialize(
      configuration,
      id,
    );
  }

  late final _transport_listener_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<transport_listener_t> Function(
              ffi.Pointer<transport_listener_configuration_t>,
              ffi.Uint8)>>('transport_listener_initialize');
  late final _transport_listener_initialize =
      _transport_listener_initializePtr.asFunction<
          ffi.Pointer<transport_listener_t> Function(
              ffi.Pointer<transport_listener_configuration_t>, int)>();

  void transport_listener_close(
    ffi.Pointer<transport_listener_t> listener,
  ) {
    return _transport_listener_close(
      listener,
    );
  }

  late final _transport_listener_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_listener_t>)>>('transport_listener_close');
  late final _transport_listener_close = _transport_listener_closePtr
      .asFunction<void Function(ffi.Pointer<transport_listener_t>)>();

  bool transport_listener_reap(
    ffi.Pointer<transport_listener_t> listener,
    ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqes,
  ) {
    return _transport_listener_reap(
      listener,
      cqes,
    );
  }

  late final _transport_listener_reapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<transport_listener_t>,
                  ffi.Pointer<ffi.Pointer<io_uring_cqe>>)>>(
      'transport_listener_reap');
  late final _transport_listener_reap = _transport_listener_reapPtr.asFunction<
      bool Function(ffi.Pointer<transport_listener_t>,
          ffi.Pointer<ffi.Pointer<io_uring_cqe>>)>();

  void transport_listener_destroy(
    ffi.Pointer<transport_listener_t> listener,
  ) {
    return _transport_listener_destroy(
      listener,
    );
  }

  late final _transport_listener_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_listener_t>)>>(
      'transport_listener_destroy');
  late final _transport_listener_destroy = _transport_listener_destroyPtr
      .asFunction<void Function(ffi.Pointer<transport_listener_t>)>();

  ffi.Pointer<transport_server_t> transport_server_initialize_tcp(
    ffi.Pointer<transport_server_configuration_t> configuration,
    ffi.Pointer<ffi.Char> ip,
    int port,
  ) {
    return _transport_server_initialize_tcp(
      configuration,
      ip,
      port,
    );
  }

  late final _transport_server_initialize_tcpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('transport_server_initialize_tcp');
  late final _transport_server_initialize_tcp =
      _transport_server_initialize_tcpPtr.asFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<transport_server_t> transport_server_initialize_udp(
    ffi.Pointer<transport_server_configuration_t> configuration,
    ffi.Pointer<ffi.Char> ip,
    int port,
  ) {
    return _transport_server_initialize_udp(
      configuration,
      ip,
      port,
    );
  }

  late final _transport_server_initialize_udpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('transport_server_initialize_udp');
  late final _transport_server_initialize_udp =
      _transport_server_initialize_udpPtr.asFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<transport_server_t> transport_server_initialize_unix_stream(
    ffi.Pointer<transport_server_configuration_t> configuration,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _transport_server_initialize_unix_stream(
      configuration,
      path,
    );
  }

  late final _transport_server_initialize_unix_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<transport_server_t> Function(
                  ffi.Pointer<transport_server_configuration_t>,
                  ffi.Pointer<ffi.Char>)>>(
      'transport_server_initialize_unix_stream');
  late final _transport_server_initialize_unix_stream =
      _transport_server_initialize_unix_streamPtr.asFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<transport_server_t> transport_server_initialize_unix_dgram(
    ffi.Pointer<transport_server_configuration_t> configuration,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _transport_server_initialize_unix_dgram(
      configuration,
      path,
    );
  }

  late final _transport_server_initialize_unix_dgramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<transport_server_t> Function(
                  ffi.Pointer<transport_server_configuration_t>,
                  ffi.Pointer<ffi.Char>)>>(
      'transport_server_initialize_unix_dgram');
  late final _transport_server_initialize_unix_dgram =
      _transport_server_initialize_unix_dgramPtr.asFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>)>();

  void transport_server_destroy(
    ffi.Pointer<transport_server_t> server,
  ) {
    return _transport_server_destroy(
      server,
    );
  }

  late final _transport_server_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_server_t>)>>('transport_server_destroy');
  late final _transport_server_destroy = _transport_server_destroyPtr
      .asFunction<void Function(ffi.Pointer<transport_server_t>)>();

  int access(
    ffi.Pointer<ffi.Char> __name,
    int __type,
  ) {
    return _access(
      __name,
      __type,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __type,
    int __flag,
  ) {
    return _faccessat(
      __fd,
      __file,
      __type,
      __flag,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int lseek(
    int __fd,
    int __offset,
    int __whence,
  ) {
    return _lseek(
      __fd,
      __offset,
      __whence,
    );
  }

  late final _lseekPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Long, ffi.Int)>>(
      'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Long)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Long)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pipe(
    ffi.Pointer<ffi.Int> __pipedes,
  ) {
    return _pipe(
      __pipedes,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int alarm(
    int __seconds,
  ) {
    return _alarm(
      __seconds,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int sleep(
    int __seconds,
  ) {
    return _sleep(
      __seconds,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int ualarm(
    int __value,
    int __interval,
  ) {
    return _ualarm(
      __value,
      __interval,
    );
  }

  late final _ualarmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int __useconds,
  ) {
    return _usleep(
      __useconds,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int chown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _chown(
      __file,
      __owner,
      __group,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchown(
    int __fd,
    int __owner,
    int __group,
  ) {
    return _fchown(
      __fd,
      __owner,
      __group,
    );
  }

  late final _fchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.UnsignedInt, ffi.UnsignedInt)>>('fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int lchown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _lchown(
      __file,
      __owner,
      __group,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    return _fchownat(
      __fd,
      __file,
      __owner,
      __group,
      __flag,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.UnsignedInt, ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int chdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chdir(
      __path,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int fchdir(
    int __fd,
  ) {
    return _fchdir(
      __fd,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _getcwd(
      __buf,
      __size,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _getwd(
      __buf,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int dup(
    int __fd,
  ) {
    return _dup(
      __fd,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int __fd,
    int __fd2,
  ) {
    return _dup2(
      __fd,
      __fd2,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  int execve(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _fexecve(
      __fd,
      __argv,
      __envp,
    );
  }

  late final _fexecvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fexecve');
  late final _fexecve = _fexecvePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execle(
      __path,
      __arg,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execl(
      __path,
      __arg,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execlp(
      __file,
      __arg,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nice(
    int __inc,
  ) {
    return _nice(
      __inc,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> __path,
    int __name,
  ) {
    return _pathconf(
      __path,
      __name,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fpathconf(
    int __fd,
    int __name,
  ) {
    return _fpathconf(
      __fd,
      __name,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  int sysconf(
    int __name,
  ) {
    return _sysconf(
      __name,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int confstr(
    int __name,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _confstr(
      __name,
      __buf,
      __len,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int getpgid(
    int __pid,
  ) {
    return _getpgid(
      __pid,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int getsid(
    int __pid,
  ) {
    return _getsid(
      __pid,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int getgroups(
    int __size,
    ffi.Pointer<ffi.UnsignedInt> __list,
  ) {
    return _getgroups(
      __size,
      __list,
    );
  }

  late final _getgroupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedInt>)>>('getgroups');
  late final _getgroups = _getgroupsPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedInt>)>();

  int setuid(
    int __uid,
  ) {
    return _setuid(
      __uid,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  late final _setreuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  int seteuid(
    int __uid,
  ) {
    return _seteuid(
      __uid,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int setgid(
    int __gid,
  ) {
    return _setgid(
      __gid,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setregid(
    int __rgid,
    int __egid,
  ) {
    return _setregid(
      __rgid,
      __egid,
    );
  }

  late final _setregidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setegid(
    int __gid,
  ) {
    return _setegid(
      __gid,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ttyname(
    int __fd,
  ) {
    return _ttyname(
      __fd,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int __fd,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _ttyname_r(
      __fd,
      __buf,
      __buflen,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int isatty(
    int __fd,
  ) {
    return _isatty(
      __fd,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int link(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _link(
      __from,
      __to,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
    int __flags,
  ) {
    return _linkat(
      __fromfd,
      __from,
      __tofd,
      __to,
      __flags,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int symlink(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlink(
      __from,
      __to,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int readlink(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlink(
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlinkat(
      __from,
      __tofd,
      __to,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlinkat(
      __fd,
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unlink(
      __name,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __name,
    int __flag,
  ) {
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _rmdir(
      __path,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int tcgetpgrp(
    int __fd,
  ) {
    return _tcgetpgrp(
      __fd,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> __name,
    int __name_len,
  ) {
    return _getlogin_r(
      __name,
      __name_len,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setlogin(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _setlogin(
      __name,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ___argv,
    ffi.Pointer<ffi.Char> __shortopts,
  ) {
    return _getopt(
      ___argc,
      ___argv,
      __shortopts,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int gethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _gethostname(
      __name,
      __len,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _sethostname(
      __name,
      __len,
    );
  }

  late final _sethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostid(
    int __id,
  ) {
    return _sethostid(
      __id,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<int Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _getdomainname(
      __name,
      __len,
    );
  }

  late final _getdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _setdomainname(
      __name,
      __len,
    );
  }

  late final _setdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vhangup() {
    return _vhangup();
  }

  late final _vhangupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vhangup');
  late final _vhangup = _vhangupPtr.asFunction<int Function()>();

  int revoke(
    ffi.Pointer<ffi.Char> __file,
  ) {
    return _revoke(
      __file,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int profil(
    ffi.Pointer<ffi.UnsignedShort> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    return _profil(
      __sample_buffer,
      __size,
      __offset,
      __scale,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Size, ffi.Size,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, int, int, int)>();

  int acct(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _acct(
      __name,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int daemon(
    int __nochdir,
    int __noclose,
  ) {
    return _daemon(
      __nochdir,
      __noclose,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  int chroot(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chroot(
      __path,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> __prompt,
  ) {
    return _getpass(
      __prompt,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int fsync(
    int __fd,
  ) {
    return _fsync(
      __fd,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> __file,
    int __length,
  ) {
    return _truncate(
      __file,
      __length,
    );
  }

  late final _truncatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Long)>>('truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ftruncate(
    int __fd,
    int __length,
  ) {
    return _ftruncate(
      __fd,
      __length,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Long)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int brk(
    ffi.Pointer<ffi.Void> __addr,
  ) {
    return _brk(
      __addr,
    );
  }

  late final _brkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'brk');
  late final _brk = _brkPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sbrk(
    int __delta,
  ) {
    return _sbrk(
      __delta,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.IntPtr)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(
    int __sysno,
  ) {
    return _syscall(
      __sysno,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int lockf(
    int __fd,
    int __cmd,
    int __len,
  ) {
    return _lockf(
      __fd,
      __cmd,
      __len,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Long)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> __key,
    ffi.Pointer<ffi.Char> __salt,
  ) {
    return _crypt(
      __key,
      __salt,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int getentropy(
    ffi.Pointer<ffi.Void> __buffer,
    int __length,
  ) {
    return _getentropy(
      __buffer,
      __length,
    );
  }

  late final _getentropyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('getentropy');
  late final _getentropy =
      _getentropyPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int strindex(
    ffi.Pointer<ffi.Pointer<ffi.Char>> haystack,
    ffi.Pointer<ffi.Char> needle,
    int hmax,
  ) {
    return _strindex(
      haystack,
      needle,
      hmax,
    );
  }

  late final _strindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Uint32)>>('strindex');
  late final _strindex = _strindexPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>, int)>();

  int strnindex(
    ffi.Pointer<ffi.Pointer<ffi.Char>> haystack,
    ffi.Pointer<ffi.Char> needle,
    int len,
    int hmax,
  ) {
    return _strnindex(
      haystack,
      needle,
      len,
      hmax,
    );
  }

  late final _strnindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Uint32, ffi.Uint32)>>('strnindex');
  late final _strnindex = _strnindexPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          int, int)>();

  /// \endcond public
  void close_all_xcpt(
    int fdc,
  ) {
    return _close_all_xcpt(
      fdc,
    );
  }

  late final _close_all_xcptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('close_all_xcpt');
  late final _close_all_xcpt =
      _close_all_xcptPtr.asFunction<void Function(int)>();

  /// Async-signal-safe implementation of printf(), to
  /// be able to write messages into the error log
  /// inside a signal handler.
  int fdprintf(
    int fd,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _fdprintf(
      fd,
      format,
    );
  }

  late final _fdprintfPtr = _lookup<
          ffi.NativeFunction<ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'fdprintf');
  late final _fdprintf =
      _fdprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> find_path(
    ffi.Pointer<ffi.Char> argv0,
  ) {
    return _find_path(
      argv0,
    );
  }

  late final _find_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('find_path');
  late final _find_path = _find_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> abspath(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _abspath(
      filename,
    );
  }

  late final _abspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('abspath');
  late final _abspath = _abspathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkdirpath(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _mkdirpath(
      path,
    );
  }

  late final _mkdirpathPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkdirpath');
  late final _mkdirpath =
      _mkdirpathPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> int2str(
    int val,
  ) {
    return _int2str(
      val,
    );
  }

  late final _int2strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.LongLong)>>(
          'int2str');
  late final _int2str =
      _int2strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void fpconv_check() {
    return _fpconv_check();
  }

  late final _fpconv_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('fpconv_check');
  late final _fpconv_check = _fpconv_checkPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _precision_fmts =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('precision_fmts');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get precision_fmts =>
      _precision_fmts.value;

  set precision_fmts(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _precision_fmts.value = value;

  /// Copy string. Unlike @a strncpy the result string
  /// is always null-terminated.
  ///
  /// @param dst destination buffer.
  /// @param src source string.
  /// @param size destination buffer size.
  ///
  /// @return size of @a src string.
  int strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int size,
  ) {
    return _strlcpy(
      dst,
      src,
      size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// Append the null-terminated string @a src to the end of @a dst string.
  /// Unlike @a strncat the resulting string is always null-terminated.
  ///
  /// @param dst destination buffer and the first input string
  /// @param src the second input string
  /// @param size destination buffer size
  ///
  /// @return the total length of the string, that it is trying to create
  int strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int size,
  ) {
    return _strlcat(
      dst,
      src,
      size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// Check that @a str is valid utf-8 sequence and can be printed
  /// unescaped.
  /// @param str string
  /// @param length string length
  int utf8_check_printable(
    ffi.Pointer<ffi.Char> str,
    int length,
  ) {
    return _utf8_check_printable(
      str,
      length,
    );
  }

  late final _utf8_check_printablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('utf8_check_printable');
  late final _utf8_check_printable = _utf8_check_printablePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> block,
    int blen,
    ffi.Pointer<ffi.Void> pat,
    int plen,
  ) {
    return _memmem(
      block,
      blen,
      pat,
      plen,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memrchr(
    ffi.Pointer<ffi.Void> s,
    int c,
    int n,
  ) {
    return _memrchr(
      s,
      c,
      n,
    );
  }

  late final _memrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memrchr');
  late final _memrchr = _memrchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int gettimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<ffi.Void> __tz,
  ) {
    return _gettimeofday(
      __tv,
      __tz,
    );
  }

  late final _gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>('gettimeofday');
  late final _gettimeofday = _gettimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>();

  int settimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone1> __tz,
  ) {
    return _settimeofday(
      __tv,
      __tz,
    );
  }

  late final _settimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timezone1>)>>('settimeofday');
  late final _settimeofday = _settimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone1>)>();

  int adjtime(
    ffi.Pointer<timeval> __delta,
    ffi.Pointer<timeval> __olddelta,
  ) {
    return _adjtime(
      __delta,
      __olddelta,
    );
  }

  late final _adjtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('adjtime');
  late final _adjtime = _adjtimePtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int getitimer(
    int __which,
    ffi.Pointer<itimerval> __value,
  ) {
    return _getitimer(
      __which,
      __value,
    );
  }

  late final _getitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>)>>('getitimer');
  late final _getitimer =
      _getitimerPtr.asFunction<int Function(int, ffi.Pointer<itimerval>)>();

  int setitimer(
    int __which,
    ffi.Pointer<itimerval> __new,
    ffi.Pointer<itimerval> __old,
  ) {
    return _setitimer(
      __which,
      __new,
      __old,
    );
  }

  late final _setitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>,
              ffi.Pointer<itimerval>)>>('setitimer');
  late final _setitimer = _setitimerPtr.asFunction<
      int Function(int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>();

  int utimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _utimes(
      __file,
      __tvp,
    );
  }

  late final _utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('utimes');
  late final _utimes = _utimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int lutimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _lutimes(
      __file,
      __tvp,
    );
  }

  late final _lutimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('lutimes');
  late final _lutimes = _lutimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int futimes(
    int __fd,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _futimes(
      __fd,
      __tvp,
    );
  }

  late final _futimesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>>(
      'futimes');
  late final _futimes =
      _futimesPtr.asFunction<int Function(int, ffi.Pointer<timeval>)>();

  /// Escape special characters in @a data to @a buf
  int json_escape(
    ffi.Pointer<ffi.Char> buf,
    int size,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _json_escape(
      buf,
      size,
      data,
    );
  }

  late final _json_escapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('json_escape');
  late final _json_escape = _json_escapePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// Compare LHS with RHS, return a value <0, 0 or >0 depending on the
  /// comparison result (strcmp-style).
  /// Normally, K==1. If K==-1, the result is inverted (as if LHS and RHS
  /// were swapped).
  /// K is needed to enable tail call optimization in Release build.
  int double_compare_uint64(
    double lhs,
    int rhs,
    int k,
  ) {
    return _double_compare_uint64(
      lhs,
      rhs,
      k,
    );
  }

  late final _double_compare_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double, ffi.Uint64, ffi.Int)>>('double_compare_uint64');
  late final _double_compare_uint64 =
      _double_compare_uint64Ptr.asFunction<int Function(double, int, int)>();

  /// The same as double_compare_uint64(), but for negative int64_t
  /// value. To avoid unnecessary negation for cast to uint64_t to
  /// be able to use the other function, and to avoid the undefined
  /// behaviour in it, because "(uint64_t)-value" is UB, if value is
  /// INT64_MIN.
  int double_compare_nint64(
    double lhs,
    int rhs,
    int k,
  ) {
    return _double_compare_nint64(
      lhs,
      rhs,
      k,
    );
  }

  late final _double_compare_nint64Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Int64, ffi.Int)>>(
      'double_compare_nint64');
  late final _double_compare_nint64 =
      _double_compare_nint64Ptr.asFunction<int Function(double, int, int)>();

  /// Put the current thread in sleep for the given number of
  /// seconds.
  void thread_sleep(
    double sec,
  ) {
    return _thread_sleep(
      sec,
    );
  }

  late final _thread_sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>(
          'thread_sleep');
  late final _thread_sleep =
      _thread_sleepPtr.asFunction<void Function(double)>();

  /// Returns the value associated with an environment variable \a name. The value
  /// is copied onto the buffer, which's either user-provided (when \a buf != NULL)
  /// or dynamically allocated.
  ///
  /// \return buf  in case \a buf != NULL, and strlen(value) < \a buf_size.
  /// ptr  a pointer to dynamically allocated memory, which has to be freed
  /// manually, in case \a buf == NULL and strlen(value) < internal
  /// hard limit.
  /// NULL in case no value is found.
  /// in case buf != NULL and strlen(value) >= \a buf_size.
  /// in case buf == NULL and strlen(value) >= internal limit.
  ///
  /// When a non-null pointer is returned, it's guaranteed to contain a
  /// null-terminated string. The string is a copy of the corresponding environment
  /// variable in all cases, except when `getenv_safe` is run concurrently with
  /// `setenv`.
  /// In that case the buffer might contain:
  /// - an old variable value,
  /// - a new value, truncated to not exceed old value length,
  /// - garbage, truncated to not exceed old value length
  /// Hence the user has to validate the returns.
  ffi.Pointer<ffi.Char> getenv_safe(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
  ) {
    return _getenv_safe(
      name,
      buf,
      buf_size,
    );
  }

  late final _getenv_safePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getenv_safe');
  late final _getenv_safe = _getenv_safePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<transport_listener_pool_t> transport_listener_pool_initialize() {
    return _transport_listener_pool_initialize();
  }

  late final _transport_listener_pool_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<transport_listener_pool_t>
              Function()>>('transport_listener_pool_initialize');
  late final _transport_listener_pool_initialize =
      _transport_listener_pool_initializePtr
          .asFunction<ffi.Pointer<transport_listener_pool_t> Function()>();

  void transport_listener_pool_add(
    ffi.Pointer<transport_listener_pool_t> pool,
    ffi.Pointer<transport_listener_t> listener,
  ) {
    return _transport_listener_pool_add(
      pool,
      listener,
    );
  }

  late final _transport_listener_pool_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_listener_pool_t>,
                  ffi.Pointer<transport_listener_t>)>>(
      'transport_listener_pool_add');
  late final _transport_listener_pool_add =
      _transport_listener_pool_addPtr.asFunction<
          void Function(ffi.Pointer<transport_listener_pool_t>,
              ffi.Pointer<transport_listener_t>)>();

  void transport_listener_pool_remove(
    ffi.Pointer<transport_listener_pool_t> pool,
    ffi.Pointer<transport_listener_t> listener,
  ) {
    return _transport_listener_pool_remove(
      pool,
      listener,
    );
  }

  late final _transport_listener_pool_removePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_listener_pool_t>,
                  ffi.Pointer<transport_listener_t>)>>(
      'transport_listener_pool_remove');
  late final _transport_listener_pool_remove =
      _transport_listener_pool_removePtr.asFunction<
          void Function(ffi.Pointer<transport_listener_pool_t>,
              ffi.Pointer<transport_listener_t>)>();

  ffi.Pointer<transport_client_t> transport_client_initialize_tcp(
    ffi.Pointer<transport_client_configuration_t> configuration,
    ffi.Pointer<ffi.Char> ip,
    int port,
  ) {
    return _transport_client_initialize_tcp(
      configuration,
      ip,
      port,
    );
  }

  late final _transport_client_initialize_tcpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('transport_client_initialize_tcp');
  late final _transport_client_initialize_tcp =
      _transport_client_initialize_tcpPtr.asFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<transport_client_t> transport_client_initialize_udp(
    ffi.Pointer<transport_client_configuration_t> configuration,
    ffi.Pointer<ffi.Char> destination_ip,
    int destination_port,
    ffi.Pointer<ffi.Char> source_ip,
    int source_port,
  ) {
    return _transport_client_initialize_udp(
      configuration,
      destination_ip,
      destination_port,
      source_ip,
      source_port,
    );
  }

  late final _transport_client_initialize_udpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('transport_client_initialize_udp');
  late final _transport_client_initialize_udp =
      _transport_client_initialize_udpPtr.asFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<transport_client_t> transport_client_initialize_unix_stream(
    ffi.Pointer<transport_client_configuration_t> configuration,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _transport_client_initialize_unix_stream(
      configuration,
      path,
    );
  }

  late final _transport_client_initialize_unix_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<transport_client_t> Function(
                  ffi.Pointer<transport_client_configuration_t>,
                  ffi.Pointer<ffi.Char>)>>(
      'transport_client_initialize_unix_stream');
  late final _transport_client_initialize_unix_stream =
      _transport_client_initialize_unix_streamPtr.asFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<transport_client_t> transport_client_initialize_unix_dgram(
    ffi.Pointer<transport_client_configuration_t> configuration,
    ffi.Pointer<ffi.Char> destination_path,
    ffi.Pointer<ffi.Char> source_path,
  ) {
    return _transport_client_initialize_unix_dgram(
      configuration,
      destination_path,
      source_path,
    );
  }

  late final _transport_client_initialize_unix_dgramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<transport_client_t> Function(
                  ffi.Pointer<transport_client_configuration_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'transport_client_initialize_unix_dgram');
  late final _transport_client_initialize_unix_dgram =
      _transport_client_initialize_unix_dgramPtr.asFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<sockaddr> transport_client_get_destination_address(
    ffi.Pointer<transport_client_t> client,
  ) {
    return _transport_client_get_destination_address(
      client,
    );
  }

  late final _transport_client_get_destination_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<sockaddr> Function(ffi.Pointer<transport_client_t>)>>(
      'transport_client_get_destination_address');
  late final _transport_client_get_destination_address =
      _transport_client_get_destination_addressPtr.asFunction<
          ffi.Pointer<sockaddr> Function(ffi.Pointer<transport_client_t>)>();

  void transport_client_destroy(
    ffi.Pointer<transport_client_t> client,
  ) {
    return _transport_client_destroy(
      client,
    );
  }

  late final _transport_client_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_client_t>)>>('transport_client_destroy');
  late final _transport_client_destroy = _transport_client_destroyPtr
      .asFunction<void Function(ffi.Pointer<transport_client_t>)>();

  double acos(
    double __x,
  ) {
    return _acos(
      __x,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asin(
    double __x,
  ) {
    return _asin(
      __x,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atan(
    double __x,
  ) {
    return _atan(
      __x,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double __y,
    double __x,
  ) {
    return _atan2(
      __y,
      __x,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double __x,
  ) {
    return _cos(
      __x,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double sin(
    double __x,
  ) {
    return _sin(
      __x,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double tan(
    double __x,
  ) {
    return _tan(
      __x,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double cosh(
    double __x,
  ) {
    return _cosh(
      __x,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double sinh(
    double __x,
  ) {
    return _sinh(
      __x,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double tanh(
    double __x,
  ) {
    return _tanh(
      __x,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double __x,
  ) {
    return _acosh(
      __x,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double __x,
  ) {
    return _asinh(
      __x,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double __x,
  ) {
    return _atanh(
      __x,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double exp(
    double __x,
  ) {
    return _exp(
      __x,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexp(
      __x,
      __exponent,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexp(
    double __x,
    int __exponent,
  ) {
    return _ldexp(
      __x,
      __exponent,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double log(
    double __x,
  ) {
    return _log(
      __x,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double __x,
  ) {
    return _log10(
      __x,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return _modf(
      __x,
      __iptr,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double expm1(
    double __x,
  ) {
    return _expm1(
      __x,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double log1p(
    double __x,
  ) {
    return _log1p(
      __x,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double logb(
    double __x,
  ) {
    return _logb(
      __x,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double exp2(
    double __x,
  ) {
    return _exp2(
      __x,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double log2(
    double __x,
  ) {
    return _log2(
      __x,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double pow(
    double __x,
    double __y,
  ) {
    return _pow(
      __x,
      __y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sqrt(
    double __x,
  ) {
    return _sqrt(
      __x,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double hypot(
    double __x,
    double __y,
  ) {
    return _hypot(
      __x,
      __y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double cbrt(
    double __x,
  ) {
    return _cbrt(
      __x,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double __x,
  ) {
    return _ceil(
      __x,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double fabs(
    double __x,
  ) {
    return _fabs(
      __x,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double floor(
    double __x,
  ) {
    return _floor(
      __x,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double fmod(
    double __x,
    double __y,
  ) {
    return _fmod(
      __x,
      __y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  int isinf(
    double __value,
  ) {
    return _isinf(
      __value,
    );
  }

  late final _isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isinf');
  late final _isinf = _isinfPtr.asFunction<int Function(double)>();

  int finite(
    double __value,
  ) {
    return _finite(
      __value,
    );
  }

  late final _finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('finite');
  late final _finite = _finitePtr.asFunction<int Function(double)>();

  double drem(
    double __x,
    double __y,
  ) {
    return _drem(
      __x,
      __y,
    );
  }

  late final _dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'drem');
  late final _drem = _dremPtr.asFunction<double Function(double, double)>();

  double significand(
    double __x,
  ) {
    return _significand(
      __x,
    );
  }

  late final _significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'significand');
  late final _significand =
      _significandPtr.asFunction<double Function(double)>();

  double copysign(
    double __x,
    double __y,
  ) {
    return _copysign(
      __x,
      __y,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double nan(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nan(
      __tagb,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnan(
    double __value,
  ) {
    return _isnan(
      __value,
    );
  }

  late final _isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isnan');
  late final _isnan = _isnanPtr.asFunction<int Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double gamma(
    double arg0,
  ) {
    return _gamma(
      arg0,
    );
  }

  late final _gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gamma');
  late final _gamma = _gammaPtr.asFunction<double Function(double)>();

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('lgamma_r');
  late final _lgamma_r =
      _lgamma_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double __x,
  ) {
    return _rint(
      __x,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double nextafter(
    double __x,
    double __y,
  ) {
    return _nextafter(
      __x,
      __y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double __x,
    double __y,
  ) {
    return _remainder(
      __x,
      __y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double scalbn(
    double __x,
    int __n,
  ) {
    return _scalbn(
      __x,
      __n,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  int ilogb(
    double __x,
  ) {
    return _ilogb(
      __x,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double scalbln(
    double __x,
    int __n,
  ) {
    return _scalbln(
      __x,
      __n,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double nearbyint(
    double __x,
  ) {
    return _nearbyint(
      __x,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double round(
    double __x,
  ) {
    return _round(
      __x,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double trunc(
    double __x,
  ) {
    return _trunc(
      __x,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrint(
    double __x,
  ) {
    return _lrint(
      __x,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int llrint(
    double __x,
  ) {
    return _llrint(
      __x,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int lround(
    double __x,
  ) {
    return _lround(
      __x,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int llround(
    double __x,
  ) {
    return _llround(
      __x,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double fdim(
    double __x,
    double __y,
  ) {
    return _fdim(
      __x,
      __y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fmax(
    double __x,
    double __y,
  ) {
    return _fmax(
      __x,
      __y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double __x,
    double __y,
  ) {
    return _fmin(
      __x,
      __y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double scalb(
    double __x,
    double __n,
  ) {
    return _scalb(
      __x,
      __n,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  double acosf(
    double __x,
  ) {
    return _acosf(
      __x,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double __x,
  ) {
    return _asinf(
      __x,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double atanf(
    double __x,
  ) {
    return _atanf(
      __x,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atan2f(
    double __y,
    double __x,
  ) {
    return _atan2f(
      __y,
      __x,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double cosf(
    double __x,
  ) {
    return _cosf(
      __x,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double sinf(
    double __x,
  ) {
    return _sinf(
      __x,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double tanf(
    double __x,
  ) {
    return _tanf(
      __x,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double coshf(
    double __x,
  ) {
    return _coshf(
      __x,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double sinhf(
    double __x,
  ) {
    return _sinhf(
      __x,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double tanhf(
    double __x,
  ) {
    return _tanhf(
      __x,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double acoshf(
    double __x,
  ) {
    return _acoshf(
      __x,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double __x,
  ) {
    return _asinhf(
      __x,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double __x,
  ) {
    return _atanhf(
      __x,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double expf(
    double __x,
  ) {
    return _expf(
      __x,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexpf(
      __x,
      __exponent,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double logf(
    double __x,
  ) {
    return _logf(
      __x,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double log10f(
    double __x,
  ) {
    return _log10f(
      __x,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return _modff(
      __x,
      __iptr,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double expm1f(
    double __x,
  ) {
    return _expm1f(
      __x,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double log1pf(
    double __x,
  ) {
    return _log1pf(
      __x,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double logbf(
    double __x,
  ) {
    return _logbf(
      __x,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double exp2f(
    double __x,
  ) {
    return _exp2f(
      __x,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double log2f(
    double __x,
  ) {
    return _log2f(
      __x,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double powf(
    double __x,
    double __y,
  ) {
    return _powf(
      __x,
      __y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double __x,
  ) {
    return _sqrtf(
      __x,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double hypotf(
    double __x,
    double __y,
  ) {
    return _hypotf(
      __x,
      __y,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double cbrtf(
    double __x,
  ) {
    return _cbrtf(
      __x,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double ceilf(
    double __x,
  ) {
    return _ceilf(
      __x,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double fabsf(
    double __x,
  ) {
    return _fabsf(
      __x,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double floorf(
    double __x,
  ) {
    return _floorf(
      __x,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double __x,
    double __y,
  ) {
    return _fmodf(
      __x,
      __y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  int isinff(
    double __value,
  ) {
    return _isinff(
      __value,
    );
  }

  late final _isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isinff');
  late final _isinff = _isinffPtr.asFunction<int Function(double)>();

  int finitef(
    double __value,
  ) {
    return _finitef(
      __value,
    );
  }

  late final _finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('finitef');
  late final _finitef = _finitefPtr.asFunction<int Function(double)>();

  double dremf(
    double __x,
    double __y,
  ) {
    return _dremf(
      __x,
      __y,
    );
  }

  late final _dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'dremf');
  late final _dremf = _dremfPtr.asFunction<double Function(double, double)>();

  double significandf(
    double __x,
  ) {
    return _significandf(
      __x,
    );
  }

  late final _significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'significandf');
  late final _significandf =
      _significandfPtr.asFunction<double Function(double)>();

  double copysignf(
    double __x,
    double __y,
  ) {
    return _copysignf(
      __x,
      __y,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nanf(
      __tagb,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnanf(
    double __value,
  ) {
    return _isnanf(
      __value,
    );
  }

  late final _isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isnanf');
  late final _isnanf = _isnanfPtr.asFunction<int Function(double)>();

  double j0f(
    double arg0,
  ) {
    return _j0f(
      arg0,
    );
  }

  late final _j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j0f');
  late final _j0f = _j0fPtr.asFunction<double Function(double)>();

  double j1f(
    double arg0,
  ) {
    return _j1f(
      arg0,
    );
  }

  late final _j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j1f');
  late final _j1f = _j1fPtr.asFunction<double Function(double)>();

  double jnf(
    int arg0,
    double arg1,
  ) {
    return _jnf(
      arg0,
      arg1,
    );
  }

  late final _jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'jnf');
  late final _jnf = _jnfPtr.asFunction<double Function(int, double)>();

  double y0f(
    double arg0,
  ) {
    return _y0f(
      arg0,
    );
  }

  late final _y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y0f');
  late final _y0f = _y0fPtr.asFunction<double Function(double)>();

  double y1f(
    double arg0,
  ) {
    return _y1f(
      arg0,
    );
  }

  late final _y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y1f');
  late final _y1f = _y1fPtr.asFunction<double Function(double)>();

  double ynf(
    int arg0,
    double arg1,
  ) {
    return _ynf(
      arg0,
      arg1,
    );
  }

  late final _ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'ynf');
  late final _ynf = _ynfPtr.asFunction<double Function(int, double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double gammaf(
    double arg0,
  ) {
    return _gammaf(
      arg0,
    );
  }

  late final _gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('gammaf');
  late final _gammaf = _gammafPtr.asFunction<double Function(double)>();

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('lgammaf_r');
  late final _lgammaf_r =
      _lgammaf_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double __x,
  ) {
    return _rintf(
      __x,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double __x,
    double __y,
  ) {
    return _nextafterf(
      __x,
      __y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double __x,
    double __y,
  ) {
    return _remainderf(
      __x,
      __y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double scalbnf(
    double __x,
    int __n,
  ) {
    return _scalbnf(
      __x,
      __n,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  int ilogbf(
    double __x,
  ) {
    return _ilogbf(
      __x,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  double scalblnf(
    double __x,
    int __n,
  ) {
    return _scalblnf(
      __x,
      __n,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double nearbyintf(
    double __x,
  ) {
    return _nearbyintf(
      __x,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double roundf(
    double __x,
  ) {
    return _roundf(
      __x,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double truncf(
    double __x,
  ) {
    return _truncf(
      __x,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrintf(
    double __x,
  ) {
    return _lrintf(
      __x,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int llrintf(
    double __x,
  ) {
    return _llrintf(
      __x,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double __x,
  ) {
    return _lroundf(
      __x,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int llroundf(
    double __x,
  ) {
    return _llroundf(
      __x,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double fdimf(
    double __x,
    double __y,
  ) {
    return _fdimf(
      __x,
      __y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double __x,
    double __y,
  ) {
    return _fmaxf(
      __x,
      __y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double __x,
    double __y,
  ) {
    return _fminf(
      __x,
      __y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double scalbf(
    double __x,
    double __n,
  ) {
    return _scalbf(
      __x,
      __n,
    );
  }

  late final _scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'scalbf');
  late final _scalbf = _scalbfPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  ffi.Pointer<mh_i32_t> mh_i32_new() {
    return _mh_i32_new();
  }

  late final _mh_i32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<mh_i32_t> Function()>>(
          'mh_i32_new');
  late final _mh_i32_new =
      _mh_i32_newPtr.asFunction<ffi.Pointer<mh_i32_t> Function()>();

  void mh_i32_clear(
    ffi.Pointer<mh_i32_t> h,
  ) {
    return _mh_i32_clear(
      h,
    );
  }

  late final _mh_i32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_i32_t>)>>(
          'mh_i32_clear');
  late final _mh_i32_clear =
      _mh_i32_clearPtr.asFunction<void Function(ffi.Pointer<mh_i32_t>)>();

  void mh_i32_delete(
    ffi.Pointer<mh_i32_t> h,
  ) {
    return _mh_i32_delete(
      h,
    );
  }

  late final _mh_i32_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_i32_t>)>>(
          'mh_i32_delete');
  late final _mh_i32_delete =
      _mh_i32_deletePtr.asFunction<void Function(ffi.Pointer<mh_i32_t>)>();

  void mh_i32_resize(
    ffi.Pointer<mh_i32_t> h,
    int arg,
  ) {
    return _mh_i32_resize(
      h,
      arg,
    );
  }

  late final _mh_i32_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<mh_i32_t>, ffi.Int32)>>('mh_i32_resize');
  late final _mh_i32_resize =
      _mh_i32_resizePtr.asFunction<void Function(ffi.Pointer<mh_i32_t>, int)>();

  int mh_i32_start_resize(
    ffi.Pointer<mh_i32_t> h,
    int buckets,
    int batch,
    int arg,
  ) {
    return _mh_i32_start_resize(
      h,
      buckets,
      batch,
      arg,
    );
  }

  late final _mh_i32_start_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mh_i32_t>, mh_int_t, mh_int_t,
              ffi.Int32)>>('mh_i32_start_resize');
  late final _mh_i32_start_resize = _mh_i32_start_resizePtr
      .asFunction<int Function(ffi.Pointer<mh_i32_t>, int, int, int)>();

  int mh_i32_reserve(
    ffi.Pointer<mh_i32_t> h,
    int size,
    int arg,
  ) {
    return _mh_i32_reserve(
      h,
      size,
      arg,
    );
  }

  late final _mh_i32_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<mh_i32_t>, mh_int_t, ffi.Int32)>>('mh_i32_reserve');
  late final _mh_i32_reserve = _mh_i32_reservePtr
      .asFunction<int Function(ffi.Pointer<mh_i32_t>, int, int)>();

  void mh_i32_del_resize(
    ffi.Pointer<mh_i32_t> h,
    int x,
    int arg,
  ) {
    return _mh_i32_del_resize(
      h,
      x,
      arg,
    );
  }

  late final _mh_i32_del_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mh_i32_t>, mh_int_t,
              ffi.Int32)>>('mh_i32_del_resize');
  late final _mh_i32_del_resize = _mh_i32_del_resizePtr
      .asFunction<void Function(ffi.Pointer<mh_i32_t>, int, int)>();

  int mh_i32_memsize(
    ffi.Pointer<mh_i32_t> h,
  ) {
    return _mh_i32_memsize(
      h,
    );
  }

  late final _mh_i32_memsizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<mh_i32_t>)>>(
          'mh_i32_memsize');
  late final _mh_i32_memsize =
      _mh_i32_memsizePtr.asFunction<int Function(ffi.Pointer<mh_i32_t>)>();

  void mh_i32_dump(
    ffi.Pointer<mh_i32_t> h,
  ) {
    return _mh_i32_dump(
      h,
    );
  }

  late final _mh_i32_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_i32_t>)>>(
          'mh_i32_dump');
  late final _mh_i32_dump =
      _mh_i32_dumpPtr.asFunction<void Function(ffi.Pointer<mh_i32_t>)>();

  ffi.Pointer<mh_events_t> mh_events_new() {
    return _mh_events_new();
  }

  late final _mh_events_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<mh_events_t> Function()>>(
          'mh_events_new');
  late final _mh_events_new =
      _mh_events_newPtr.asFunction<ffi.Pointer<mh_events_t> Function()>();

  void mh_events_clear(
    ffi.Pointer<mh_events_t> h,
  ) {
    return _mh_events_clear(
      h,
    );
  }

  late final _mh_events_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_events_t>)>>(
          'mh_events_clear');
  late final _mh_events_clear =
      _mh_events_clearPtr.asFunction<void Function(ffi.Pointer<mh_events_t>)>();

  void mh_events_delete(
    ffi.Pointer<mh_events_t> h,
  ) {
    return _mh_events_delete(
      h,
    );
  }

  late final _mh_events_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_events_t>)>>(
          'mh_events_delete');
  late final _mh_events_delete = _mh_events_deletePtr
      .asFunction<void Function(ffi.Pointer<mh_events_t>)>();

  void mh_events_resize(
    ffi.Pointer<mh_events_t> h,
    int arg,
  ) {
    return _mh_events_resize(
      h,
      arg,
    );
  }

  late final _mh_events_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<mh_events_t>, ffi.Uint64)>>('mh_events_resize');
  late final _mh_events_resize = _mh_events_resizePtr
      .asFunction<void Function(ffi.Pointer<mh_events_t>, int)>();

  int mh_events_start_resize(
    ffi.Pointer<mh_events_t> h,
    int buckets,
    int batch,
    int arg,
  ) {
    return _mh_events_start_resize(
      h,
      buckets,
      batch,
      arg,
    );
  }

  late final _mh_events_start_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mh_events_t>, mh_int_t, mh_int_t,
              ffi.Uint64)>>('mh_events_start_resize');
  late final _mh_events_start_resize = _mh_events_start_resizePtr
      .asFunction<int Function(ffi.Pointer<mh_events_t>, int, int, int)>();

  int mh_events_reserve(
    ffi.Pointer<mh_events_t> h,
    int size,
    int arg,
  ) {
    return _mh_events_reserve(
      h,
      size,
      arg,
    );
  }

  late final _mh_events_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mh_events_t>, mh_int_t,
              ffi.Uint64)>>('mh_events_reserve');
  late final _mh_events_reserve = _mh_events_reservePtr
      .asFunction<int Function(ffi.Pointer<mh_events_t>, int, int)>();

  void mh_events_del_resize(
    ffi.Pointer<mh_events_t> h,
    int x,
    int arg,
  ) {
    return _mh_events_del_resize(
      h,
      x,
      arg,
    );
  }

  late final _mh_events_del_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mh_events_t>, mh_int_t,
              ffi.Uint64)>>('mh_events_del_resize');
  late final _mh_events_del_resize = _mh_events_del_resizePtr
      .asFunction<void Function(ffi.Pointer<mh_events_t>, int, int)>();

  int mh_events_memsize(
    ffi.Pointer<mh_events_t> h,
  ) {
    return _mh_events_memsize(
      h,
    );
  }

  late final _mh_events_memsizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<mh_events_t>)>>(
          'mh_events_memsize');
  late final _mh_events_memsize = _mh_events_memsizePtr
      .asFunction<int Function(ffi.Pointer<mh_events_t>)>();

  void mh_events_dump(
    ffi.Pointer<mh_events_t> h,
  ) {
    return _mh_events_dump(
      h,
    );
  }

  late final _mh_events_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_events_t>)>>(
          'mh_events_dump');
  late final _mh_events_dump =
      _mh_events_dumpPtr.asFunction<void Function(ffi.Pointer<mh_events_t>)>();

  ffi.Pointer<transport_worker_t> transport_worker_initialize(
    ffi.Pointer<transport_worker_configuration_t> configuration,
    int id,
  ) {
    return _transport_worker_initialize(
      configuration,
      id,
    );
  }

  late final _transport_worker_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<transport_worker_t> Function(
              ffi.Pointer<transport_worker_configuration_t>,
              ffi.Uint8)>>('transport_worker_initialize');
  late final _transport_worker_initialize =
      _transport_worker_initializePtr.asFunction<
          ffi.Pointer<transport_worker_t> Function(
              ffi.Pointer<transport_worker_configuration_t>, int)>();

  void transport_worker_custom(
    ffi.Pointer<transport_worker_t> worker,
    int callbackId,
    int data,
  ) {
    return _transport_worker_custom(
      worker,
      callbackId,
      data,
    );
  }

  late final _transport_worker_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint16,
              ffi.Int64)>>('transport_worker_custom');
  late final _transport_worker_custom = _transport_worker_customPtr
      .asFunction<void Function(ffi.Pointer<transport_worker_t>, int, int)>();

  void transport_worker_write(
    ffi.Pointer<transport_worker_t> worker,
    int fd,
    int buffer_id,
    int offset,
    int timeout,
    int event,
  ) {
    return _transport_worker_write(
      worker,
      fd,
      buffer_id,
      offset,
      timeout,
      event,
    );
  }

  late final _transport_worker_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Uint32,
              ffi.Int64,
              ffi.Uint16)>>('transport_worker_write');
  late final _transport_worker_write = _transport_worker_writePtr.asFunction<
      void Function(
          ffi.Pointer<transport_worker_t>, int, int, int, int, int)>();

  void transport_worker_read(
    ffi.Pointer<transport_worker_t> worker,
    int fd,
    int buffer_id,
    int offset,
    int timeout,
    int event,
  ) {
    return _transport_worker_read(
      worker,
      fd,
      buffer_id,
      offset,
      timeout,
      event,
    );
  }

  late final _transport_worker_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Uint32,
              ffi.Int64,
              ffi.Uint16)>>('transport_worker_read');
  late final _transport_worker_read = _transport_worker_readPtr.asFunction<
      void Function(
          ffi.Pointer<transport_worker_t>, int, int, int, int, int)>();

  void transport_worker_connect(
    ffi.Pointer<transport_worker_t> worker,
    ffi.Pointer<transport_client_t> client,
    int timeout,
  ) {
    return _transport_worker_connect(
      worker,
      client,
      timeout,
    );
  }

  late final _transport_worker_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Pointer<transport_client_t>,
              ffi.Int64)>>('transport_worker_connect');
  late final _transport_worker_connect =
      _transport_worker_connectPtr.asFunction<
          void Function(ffi.Pointer<transport_worker_t>,
              ffi.Pointer<transport_client_t>, int)>();

  void transport_worker_accept(
    ffi.Pointer<transport_worker_t> worker,
    ffi.Pointer<transport_server_t> server,
  ) {
    return _transport_worker_accept(
      worker,
      server,
    );
  }

  late final _transport_worker_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<transport_worker_t>,
              ffi.Pointer<transport_server_t>)>>('transport_worker_accept');
  late final _transport_worker_accept = _transport_worker_acceptPtr.asFunction<
      void Function(
          ffi.Pointer<transport_worker_t>, ffi.Pointer<transport_server_t>)>();

  void transport_worker_send_message(
    ffi.Pointer<transport_worker_t> worker,
    int fd,
    int buffer_id,
    ffi.Pointer<sockaddr> address,
    int socket_family,
    int message_flags,
    int timeout,
    int event,
  ) {
    return _transport_worker_send_message(
      worker,
      fd,
      buffer_id,
      address,
      socket_family,
      message_flags,
      timeout,
      event,
    );
  }

  late final _transport_worker_send_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Pointer<sockaddr>,
              ffi.Int32,
              ffi.Int,
              ffi.Int64,
              ffi.Uint16)>>('transport_worker_send_message');
  late final _transport_worker_send_message =
      _transport_worker_send_messagePtr.asFunction<
          void Function(ffi.Pointer<transport_worker_t>, int, int,
              ffi.Pointer<sockaddr>, int, int, int, int)>();

  void transport_worker_respond_message(
    ffi.Pointer<transport_worker_t> worker,
    int fd,
    int buffer_id,
    int socket_family,
    int message_flags,
    int timeout,
    int event,
  ) {
    return _transport_worker_respond_message(
      worker,
      fd,
      buffer_id,
      socket_family,
      message_flags,
      timeout,
      event,
    );
  }

  late final _transport_worker_respond_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Int32,
              ffi.Int,
              ffi.Int64,
              ffi.Uint16)>>('transport_worker_respond_message');
  late final _transport_worker_respond_message =
      _transport_worker_respond_messagePtr.asFunction<
          void Function(
              ffi.Pointer<transport_worker_t>, int, int, int, int, int, int)>();

  void transport_worker_receive_message(
    ffi.Pointer<transport_worker_t> worker,
    int fd,
    int buffer_id,
    int socket_family,
    int message_flags,
    int timeout,
    int event,
  ) {
    return _transport_worker_receive_message(
      worker,
      fd,
      buffer_id,
      socket_family,
      message_flags,
      timeout,
      event,
    );
  }

  late final _transport_worker_receive_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Int32,
              ffi.Int,
              ffi.Int64,
              ffi.Uint16)>>('transport_worker_receive_message');
  late final _transport_worker_receive_message =
      _transport_worker_receive_messagePtr.asFunction<
          void Function(
              ffi.Pointer<transport_worker_t>, int, int, int, int, int, int)>();

  void transport_worker_cancel_by_fd(
    ffi.Pointer<transport_worker_t> worker,
    int fd,
  ) {
    return _transport_worker_cancel_by_fd(
      worker,
      fd,
    );
  }

  late final _transport_worker_cancel_by_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<transport_worker_t>,
              ffi.Int)>>('transport_worker_cancel_by_fd');
  late final _transport_worker_cancel_by_fd = _transport_worker_cancel_by_fdPtr
      .asFunction<void Function(ffi.Pointer<transport_worker_t>, int)>();

  void transport_worker_check_event_timeouts(
    ffi.Pointer<transport_worker_t> worker,
  ) {
    return _transport_worker_check_event_timeouts(
      worker,
    );
  }

  late final _transport_worker_check_event_timeoutsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_worker_t>)>>(
      'transport_worker_check_event_timeouts');
  late final _transport_worker_check_event_timeouts =
      _transport_worker_check_event_timeoutsPtr
          .asFunction<void Function(ffi.Pointer<transport_worker_t>)>();

  void transport_worker_remove_event(
    ffi.Pointer<transport_worker_t> worker,
    int data,
  ) {
    return _transport_worker_remove_event(
      worker,
      data,
    );
  }

  late final _transport_worker_remove_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<transport_worker_t>,
              ffi.Uint64)>>('transport_worker_remove_event');
  late final _transport_worker_remove_event = _transport_worker_remove_eventPtr
      .asFunction<void Function(ffi.Pointer<transport_worker_t>, int)>();

  int transport_worker_get_buffer(
    ffi.Pointer<transport_worker_t> worker,
  ) {
    return _transport_worker_get_buffer(
      worker,
    );
  }

  late final _transport_worker_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<transport_worker_t>)>>('transport_worker_get_buffer');
  late final _transport_worker_get_buffer = _transport_worker_get_bufferPtr
      .asFunction<int Function(ffi.Pointer<transport_worker_t>)>();

  void transport_worker_reuse_buffer(
    ffi.Pointer<transport_worker_t> worker,
    int buffer_id,
  ) {
    return _transport_worker_reuse_buffer(
      worker,
      buffer_id,
    );
  }

  late final _transport_worker_reuse_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<transport_worker_t>,
              ffi.Uint16)>>('transport_worker_reuse_buffer');
  late final _transport_worker_reuse_buffer = _transport_worker_reuse_bufferPtr
      .asFunction<void Function(ffi.Pointer<transport_worker_t>, int)>();

  void transport_worker_release_buffer(
    ffi.Pointer<transport_worker_t> worker,
    int buffer_id,
  ) {
    return _transport_worker_release_buffer(
      worker,
      buffer_id,
    );
  }

  late final _transport_worker_release_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<transport_worker_t>,
              ffi.Uint16)>>('transport_worker_release_buffer');
  late final _transport_worker_release_buffer =
      _transport_worker_release_bufferPtr
          .asFunction<void Function(ffi.Pointer<transport_worker_t>, int)>();

  ffi.Pointer<sockaddr> transport_worker_get_endpoint_address(
    ffi.Pointer<transport_worker_t> worker,
    int socket_family,
    int buffer_id,
  ) {
    return _transport_worker_get_endpoint_address(
      worker,
      socket_family,
      buffer_id,
    );
  }

  late final _transport_worker_get_endpoint_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sockaddr> Function(ffi.Pointer<transport_worker_t>,
              ffi.Int32, ffi.Int)>>('transport_worker_get_endpoint_address');
  late final _transport_worker_get_endpoint_address =
      _transport_worker_get_endpoint_addressPtr.asFunction<
          ffi.Pointer<sockaddr> Function(
              ffi.Pointer<transport_worker_t>, int, int)>();

  int transport_worker_peek(
    int cqe_count,
    ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqes,
    ffi.Pointer<io_uring> ring,
  ) {
    return _transport_worker_peek(
      cqe_count,
      cqes,
      ring,
    );
  }

  late final _transport_worker_peekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint32, ffi.Pointer<ffi.Pointer<io_uring_cqe>>,
              ffi.Pointer<io_uring>)>>('transport_worker_peek');
  late final _transport_worker_peek = _transport_worker_peekPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<io_uring_cqe>>,
          ffi.Pointer<io_uring>)>();

  void transport_worker_destroy(
    ffi.Pointer<transport_worker_t> worker,
  ) {
    return _transport_worker_destroy(
      worker,
    );
  }

  late final _transport_worker_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>)>>('transport_worker_destroy');
  late final _transport_worker_destroy = _transport_worker_destroyPtr
      .asFunction<void Function(ffi.Pointer<transport_worker_t>)>();

  ffi.Pointer<transport_t> transport_initialize(
    ffi.Pointer<transport_listener_configuration_t> listener_configuration,
    ffi.Pointer<transport_worker_configuration_t> inbound_worker_configuration,
    ffi.Pointer<transport_worker_configuration_t> outbound_worker_configuration,
  ) {
    return _transport_initialize(
      listener_configuration,
      inbound_worker_configuration,
      outbound_worker_configuration,
    );
  }

  late final _transport_initializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<transport_t> Function(
                  ffi.Pointer<transport_listener_configuration_t>,
                  ffi.Pointer<transport_worker_configuration_t>,
                  ffi.Pointer<transport_worker_configuration_t>)>>(
      'transport_initialize');
  late final _transport_initialize = _transport_initializePtr.asFunction<
      ffi.Pointer<transport_t> Function(
          ffi.Pointer<transport_listener_configuration_t>,
          ffi.Pointer<transport_worker_configuration_t>,
          ffi.Pointer<transport_worker_configuration_t>)>();

  ffi.Pointer<ffi.Pointer<io_uring_cqe>> transport_allocate_cqes(
    int cqe_count,
  ) {
    return _transport_allocate_cqes(
      cqe_count,
    );
  }

  late final _transport_allocate_cqesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<io_uring_cqe>> Function(
              ffi.Uint32)>>('transport_allocate_cqes');
  late final _transport_allocate_cqes = _transport_allocate_cqesPtr
      .asFunction<ffi.Pointer<ffi.Pointer<io_uring_cqe>> Function(int)>();

  void transport_cqe_advance(
    ffi.Pointer<io_uring> ring,
    int count,
  ) {
    return _transport_cqe_advance(
      ring,
      count,
    );
  }

  late final _transport_cqe_advancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<io_uring>, ffi.Int)>>('transport_cqe_advance');
  late final _transport_cqe_advance = _transport_cqe_advancePtr
      .asFunction<void Function(ffi.Pointer<io_uring>, int)>();

  void transport_destroy(
    ffi.Pointer<transport_t> transport,
  ) {
    return _transport_destroy(
      transport,
    );
  }

  late final _transport_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<transport_t>)>>(
          'transport_destroy');
  late final _transport_destroy = _transport_destroyPtr
      .asFunction<void Function(ffi.Pointer<transport_t>)>();

  int transport_close_descritor(
    int fd,
  ) {
    return _transport_close_descritor(
      fd,
    );
  }

  late final _transport_close_descritorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'transport_close_descritor');
  late final _transport_close_descritor =
      _transport_close_descritorPtr.asFunction<int Function(int)>();

  int transport_get_kernel_error() {
    return _transport_get_kernel_error();
  }

  late final _transport_get_kernel_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'transport_get_kernel_error');
  late final _transport_get_kernel_error =
      _transport_get_kernel_errorPtr.asFunction<int Function()>();

  int transport_file_open(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _transport_file_open(
      path,
    );
  }

  late final _transport_file_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'transport_file_open');
  late final _transport_file_open =
      _transport_file_openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int transport_socket_create_tcp(
    int flags,
    int socket_receive_buffer_size,
    int socket_send_buffer_size,
    int socket_receive_low_at,
    int socket_send_low_at,
    int ip_ttl,
    int tcp_keep_alive_idle,
    int tcp_keep_alive_max_count,
    int tcp_keep_alive_individual_count,
    int tcp_max_segment_size,
    int tcp_syn_count,
  ) {
    return _transport_socket_create_tcp(
      flags,
      socket_receive_buffer_size,
      socket_send_buffer_size,
      socket_receive_low_at,
      socket_send_low_at,
      ip_ttl,
      tcp_keep_alive_idle,
      tcp_keep_alive_max_count,
      tcp_keep_alive_individual_count,
      tcp_max_segment_size,
      tcp_syn_count,
    );
  }

  late final _transport_socket_create_tcpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint16)>>('transport_socket_create_tcp');
  late final _transport_socket_create_tcp =
      _transport_socket_create_tcpPtr.asFunction<
          int Function(
              int, int, int, int, int, int, int, int, int, int, int)>();

  int transport_socket_create_udp(
    int flags,
    int socket_receive_buffer_size,
    int socket_send_buffer_size,
    int socket_receive_low_at,
    int socket_send_low_at,
    int ip_ttl,
    ffi.Pointer<ip_mreqn> ip_multicast_interface,
    int ip_multicast_ttl,
  ) {
    return _transport_socket_create_udp(
      flags,
      socket_receive_buffer_size,
      socket_send_buffer_size,
      socket_receive_low_at,
      socket_send_low_at,
      ip_ttl,
      ip_multicast_interface,
      ip_multicast_ttl,
    );
  }

  late final _transport_socket_create_udpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Pointer<ip_mreqn>,
              ffi.Uint32)>>('transport_socket_create_udp');
  late final _transport_socket_create_udp =
      _transport_socket_create_udpPtr.asFunction<
          int Function(
              int, int, int, int, int, int, ffi.Pointer<ip_mreqn>, int)>();

  int transport_socket_create_unix_stream(
    int flags,
    int socket_receive_buffer_size,
    int socket_send_buffer_size,
    int socket_receive_low_at,
    int socket_send_low_at,
  ) {
    return _transport_socket_create_unix_stream(
      flags,
      socket_receive_buffer_size,
      socket_send_buffer_size,
      socket_receive_low_at,
      socket_send_low_at,
    );
  }

  late final _transport_socket_create_unix_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('transport_socket_create_unix_stream');
  late final _transport_socket_create_unix_stream =
      _transport_socket_create_unix_streamPtr
          .asFunction<int Function(int, int, int, int, int)>();

  int transport_socket_create_unix_dgram(
    int flags,
    int socket_receive_buffer_size,
    int socket_send_buffer_size,
    int socket_receive_low_at,
    int socket_send_low_at,
  ) {
    return _transport_socket_create_unix_dgram(
      flags,
      socket_receive_buffer_size,
      socket_send_buffer_size,
      socket_receive_low_at,
      socket_send_low_at,
    );
  }

  late final _transport_socket_create_unix_dgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('transport_socket_create_unix_dgram');
  late final _transport_socket_create_unix_dgram =
      _transport_socket_create_unix_dgramPtr
          .asFunction<int Function(int, int, int, int, int)>();

  ffi.Pointer<ip_mreqn> transport_socket_multicast_create_request(
    ffi.Pointer<ffi.Char> group_address,
    ffi.Pointer<ffi.Char> local_address,
    int interface_index,
  ) {
    return _transport_socket_multicast_create_request(
      group_address,
      local_address,
      interface_index,
    );
  }

  late final _transport_socket_multicast_create_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ip_mreqn> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('transport_socket_multicast_create_request');
  late final _transport_socket_multicast_create_request =
      _transport_socket_multicast_create_requestPtr.asFunction<
          ffi.Pointer<ip_mreqn> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int transport_socket_multicast_add_membership(
    int fd,
    ffi.Pointer<ffi.Char> group_address,
    ffi.Pointer<ffi.Char> local_address,
    int interface_index,
  ) {
    return _transport_socket_multicast_add_membership(
      fd,
      group_address,
      local_address,
      interface_index,
    );
  }

  late final _transport_socket_multicast_add_membershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('transport_socket_multicast_add_membership');
  late final _transport_socket_multicast_add_membership =
      _transport_socket_multicast_add_membershipPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int transport_socket_multicast_drop_membership(
    int fd,
    ffi.Pointer<ffi.Char> group_address,
    ffi.Pointer<ffi.Char> local_address,
    int interface_index,
  ) {
    return _transport_socket_multicast_drop_membership(
      fd,
      group_address,
      local_address,
      interface_index,
    );
  }

  late final _transport_socket_multicast_drop_membershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('transport_socket_multicast_drop_membership');
  late final _transport_socket_multicast_drop_membership =
      _transport_socket_multicast_drop_membershipPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int transport_socket_multicast_add_source_membership(
    int fd,
    ffi.Pointer<ffi.Char> group_address,
    ffi.Pointer<ffi.Char> local_address,
    ffi.Pointer<ffi.Char> source_address,
  ) {
    return _transport_socket_multicast_add_source_membership(
      fd,
      group_address,
      local_address,
      source_address,
    );
  }

  late final _transport_socket_multicast_add_source_membershipPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'transport_socket_multicast_add_source_membership');
  late final _transport_socket_multicast_add_source_membership =
      _transport_socket_multicast_add_source_membershipPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int transport_socket_multicast_drop_source_membership(
    int fd,
    ffi.Pointer<ffi.Char> group_address,
    ffi.Pointer<ffi.Char> local_address,
    ffi.Pointer<ffi.Char> source_address,
  ) {
    return _transport_socket_multicast_drop_source_membership(
      fd,
      group_address,
      local_address,
      source_address,
    );
  }

  late final _transport_socket_multicast_drop_source_membershipPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'transport_socket_multicast_drop_source_membership');
  late final _transport_socket_multicast_drop_source_membership =
      _transport_socket_multicast_drop_source_membershipPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int transport_socket_get_interface_index(
    ffi.Pointer<ffi.Char> interface1,
  ) {
    return _transport_socket_get_interface_index(
      interface1,
    );
  }

  late final _transport_socket_get_interface_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'transport_socket_get_interface_index');
  late final _transport_socket_get_interface_index =
      _transport_socket_get_interface_indexPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final TransportBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timeval>)>> get select => _library._selectPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>> get pselect => _library._pselectPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>
      get socket => _library._socketPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>
      get socketpair => _library._socketpairPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>
      get bind => _library._bindPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>
      get getsockname => _library._getsocknamePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>
      get connect => _library._connectPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>
      get getpeername => _library._getpeernamePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>> get send =>
      _library._sendPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>> get recv =>
      _library._recvPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<sockaddr>,
              socklen_t)>> get sendto => _library._sendtoPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>> get recvfrom => _library._recvfromPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>
      get sendmsg => _library._sendmsgPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>
      get recvmsg => _library._recvmsgPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<socklen_t>)>> get getsockopt =>
      _library._getsockoptPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>, socklen_t)>>
      get setsockopt => _library._setsockoptPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get listen => _library._listenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>
      get accept => _library._acceptPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get shutdown => _library._shutdownPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get sockatmark =>
      _library._sockatmarkPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get isfdtype => _library._isfdtypePtr;
  ffi.Pointer<in6_addr> get in6addr_any => _library._in6addr_any;
  ffi.Pointer<in6_addr> get in6addr_loopback => _library._in6addr_loopback;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>> get ntohl =>
      _library._ntohlPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>> get ntohs =>
      _library._ntohsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>> get htonl =>
      _library._htonlPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>> get htons =>
      _library._htonsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>>
      get bindresvport => _library._bindresvportPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in6>)>>
      get bindresvport6 => _library._bindresvport6Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int)>> get readv =>
      _library._readvPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int)>> get writev =>
      _library._writevPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int, ffi.Long)>>
      get preadv => _library._preadvPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int, ffi.Long)>>
      get pwritev => _library._pwritevPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>>
      get stat1 => _library._stat1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<stat>)>>
      get fstat => _library._fstatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<stat>, ffi.Int)>>
      get fstatat => _library._fstatatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>>
      get lstat => _library._lstatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>
      get chmod => _library._chmodPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>
      get lchmod => _library._lchmodPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.UnsignedInt)>>
      get fchmod => _library._fchmodPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.Int)>>
      get fchmodat => _library._fchmodatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>
      get umask => _library._umaskPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>
      get mkdir => _library._mkdirPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>> get mkdirat =>
      _library._mkdiratPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.UnsignedLong)>>
      get mknod => _library._mknodPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.UnsignedLong)>> get mknodat => _library._mknodatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>
      get mkfifo => _library._mkfifoPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>> get mkfifoat =>
      _library._mkfifoatPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<timespec>,
              ffi.Int)>> get utimensat => _library._utimensatPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timespec>)>>
      get futimens => _library._futimensPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int)>>)>> get signal =>
      _library._signalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get kill => _library._killPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get killpg => _library._killpgPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get raise =>
      _library._raisePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int)>>)>> get ssignal =>
      _library._ssignalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get gsignal =>
      _library._gsignalPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>
      get psignal => _library._psignalPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Char>)>>
      get psiginfo => _library._psiginfoPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get sigblock =>
      _library._sigblockPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get sigsetmask =>
      _library._sigsetmaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get siggetmask =>
      _library._siggetmaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>
      get sigemptyset => _library._sigemptysetPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>
      get sigfillset => _library._sigfillsetPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>
      get sigaddset => _library._sigaddsetPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>
      get sigdelset => _library._sigdelsetPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>
      get sigismember => _library._sigismemberPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>>
      get sigprocmask => _library._sigprocmaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>
      get sigsuspend => _library._sigsuspendPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>>
      get sigaction1 => _library._sigaction1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>
      get sigpending => _library._sigpendingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>>
      get sigwait => _library._sigwaitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>>
      get sigwaitinfo => _library._sigwaitinfoPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
              ffi.Pointer<timespec>)>> get sigtimedwait =>
      _library._sigtimedwaitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, sigval)>>
      get sigqueue => _library._sigqueuePtr;
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> get sys_siglist =>
      _library._sys_siglist;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigcontext>)>>
      get sigreturn => _library._sigreturnPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get siginterrupt => _library._siginterruptPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>
      get sigaltstack => _library._sigaltstackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>>
      get sigstack1 => _library._sigstack1Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<__sigset_t>, ffi.Pointer<__sigset_t>)>>
      get pthread_sigmask => _library._pthread_sigmaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>
      get pthread_kill => _library._pthread_killPtr;
  ffi.Pointer<ffi.NativeFunction<intmax_t Function(intmax_t)>> get imaxabs =>
      _library._imaxabsPtr;
  ffi.Pointer<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>
      get imaxdiv => _library._imaxdivPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          intmax_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtoimax => _library._strtoimaxPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          uintmax_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtoumax => _library._strtoumaxPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          intmax_t Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Int)>> get wcstoimax => _library._wcstoimaxPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          uintmax_t Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Int)>> get wcstoumax => _library._wcstoumaxPtr;
  ffi.Pointer<ffi.NativeFunction<clock_t Function()>> get clock =>
      _library._clockPtr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>
      get time => _library._timePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>
      get difftime => _library._difftimePtr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>
      get mktime => _library._mktimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<tm>)>> get strftime => _library._strftimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<tm>,
              locale_t)>> get strftime_l => _library._strftime_lPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>
      get gmtime => _library._gmtimePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>
      get localtime => _library._localtimePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>>
      get gmtime_r => _library._gmtime_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>>
      get localtime_r => _library._localtime_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>
      get asctime => _library._asctimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>> get ctime =>
      _library._ctimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>> get asctime_r =>
      _library._asctime_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>> get ctime_r =>
      _library._ctime_rPtr;
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> get tzname =>
      _library._tzname;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get tzset =>
      _library._tzsetPtr;
  ffi.Pointer<ffi.Int> get daylight => _library._daylight;
  ffi.Pointer<ffi.Long> get timezone => _library._timezone;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>
      get timegm => _library._timegmPtr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>
      get timelocal => _library._timelocalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get dysize =>
      _library._dysizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>
      get nanosleep => _library._nanosleepPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>
      get clock_getres => _library._clock_getresPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>
      get clock_gettime => _library._clock_gettimePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>
      get clock_settime => _library._clock_settimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>> get clock_nanosleep =>
      _library._clock_nanosleepPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>
      get clock_getcpuclockid => _library._clock_getcpuclockidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  clockid_t, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>>
      get timer_create => _library._timer_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(timer_t)>> get timer_delete =>
      _library._timer_deletePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>> get timer_settime =>
      _library._timer_settimePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>
      get timer_gettime => _library._timer_gettimePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(timer_t)>>
      get timer_getoverrun => _library._timer_getoverrunPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>
      get timespec_get => _library._timespec_getPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>
      get atomic_thread_fence => _library._atomic_thread_fencePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>
      get atomic_signal_fence => _library._atomic_signal_fencePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<atomic_flag>)>>
      get atomic_flag_test_and_set => _library._atomic_flag_test_and_setPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<atomic_flag>, ffi.Int32)>>
      get atomic_flag_test_and_set_explicit =>
          _library._atomic_flag_test_and_set_explicitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<atomic_flag>)>>
      get atomic_flag_clear => _library._atomic_flag_clearPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<atomic_flag>, ffi.Int32)>>
      get atomic_flag_clear_explicit => _library._atomic_flag_clear_explicitPtr;
  ffi.Pointer<ffi.Pointer<FILE>> get stdin => _library._stdin;
  ffi.Pointer<ffi.Pointer<FILE>> get stdout => _library._stdout;
  ffi.Pointer<ffi.Pointer<FILE>> get stderr => _library._stderr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get remove => _library._removePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get rename => _library._renamePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>> get renameat => _library._renameatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<FILE> Function()>> get tmpfile =>
      _library._tmpfilePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get tmpnam =>
      _library._tmpnamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>
      get tmpnam_r => _library._tmpnam_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get tempnam =>
      _library._tempnamPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fclose => _library._fclosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fflush => _library._fflushPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fflush_unlocked => _library._fflush_unlockedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get fopen =>
      _library._fopenPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>)>> get freopen => _library._freopenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<FILE> Function(ffi.Int, ffi.Pointer<ffi.Char>)>>
      get fdopen => _library._fdopenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<FILE> Function(
                  ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Char>)>>
      get fmemopen => _library._fmemopenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<FILE> Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>>
      get open_memstream => _library._open_memstreamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>
      get setbuf => _library._setbufPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size)>>
      get setvbuf => _library._setvbufPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get setbuffer => _library._setbufferPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get setlinebuf => _library._setlinebufPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>
      get fprintf => _library._fprintfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get printf => _library._printfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get sprintf => _library._sprintfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vfprintf =>
      _library._vfprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>
      get vprintf => _library._vprintfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vsprintf =>
      _library._vsprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>)>>
      get snprintf => _library._snprintfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vsnprintf =>
      _library._vsnprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>
      get vdprintf => _library._vdprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>
      get dprintf => _library._dprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>
      get fscanf => _library._fscanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get scanf => _library._scanfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get sscanf => _library._sscanfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vfscanf => _library._vfscanfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>> get vscanf =>
      _library._vscanfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vsscanf => _library._vsscanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fgetc => _library._fgetcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get getc => _library._getcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getchar =>
      _library._getcharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get getc_unlocked => _library._getc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getchar_unlocked =>
      _library._getchar_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fgetc_unlocked => _library._fgetc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get fputc => _library._fputcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get putc => _library._putcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get putchar =>
      _library._putcharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get fputc_unlocked => _library._fputc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get putc_unlocked => _library._putc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get putchar_unlocked => _library._putchar_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get getw => _library._getwPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get putw => _library._putwPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>> get fgets =>
      _library._fgetsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>> get getdelim => _library._getdelimPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<FILE>)>> get getline => _library._getlinePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>
      get fputs => _library._fputsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get puts => _library._putsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get ungetc => _library._ungetcPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fread => _library._freadPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fwrite => _library._fwritePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fread_unlocked =>
      _library._fread_unlockedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fwrite_unlocked =>
      _library._fwrite_unlockedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>> get fseek =>
      _library._fseekPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>
      get ftell => _library._ftellPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get rewind => _library._rewindPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>> get fseeko =>
      _library._fseekoPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>
      get ftello => _library._ftelloPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>
      get fgetpos => _library._fgetposPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>
      get fsetpos => _library._fsetposPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get clearerr => _library._clearerrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get feof => _library._feofPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get ferror => _library._ferrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get clearerr_unlocked => _library._clearerr_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get feof_unlocked => _library._feof_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get ferror_unlocked => _library._ferror_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      get perror => _library._perrorPtr;
  ffi.Pointer<ffi.Int> get sys_nerr => _library._sys_nerr;
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> get sys_errlist =>
      _library._sys_errlist;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fileno => _library._filenoPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fileno_unlocked => _library._fileno_unlockedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get popen =>
      _library._popenPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get pclose => _library._pclosePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get ctermid =>
      _library._ctermidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get flockfile => _library._flockfilePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get ftrylockfile => _library._ftrylockfilePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get funlockfile => _library._funlockfilePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ibuf>, ffi.Pointer<slab_cache>, ffi.Size)>>
      get ibuf_create => _library._ibuf_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ibuf>)>>
      get ibuf_destroy => _library._ibuf_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ibuf>)>>
      get ibuf_reinit => _library._ibuf_reinitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ibuf>, ffi.Size)>>
      get ibuf_reserve_slow => _library._ibuf_reserve_slowPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<obuf>, ffi.Pointer<slab_cache>, ffi.Size)>>
      get obuf_create => _library._obuf_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obuf>)>>
      get obuf_destroy => _library._obuf_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obuf>)>>
      get obuf_reset => _library._obuf_resetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<obuf>, ffi.Size)>>
      get obuf_reserve_slow => _library._obuf_reserve_slowPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(
                  ffi.Pointer<obuf>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get obuf_dup => _library._obuf_dupPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<obuf>, ffi.Pointer<obuf_svp>)>>
      get obuf_rollback_to_svp => _library._obuf_rollback_to_svpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get memcpy => _library._memcpyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get memmove => _library._memmovePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Size)>> get memccpy => _library._memccpyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>> get memset =>
      _library._memsetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get memcmp => _library._memcmpPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>> get memchr =>
      _library._memchrPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get strcpy =>
      _library._strcpyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strncpy => _library._strncpyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get strcat =>
      _library._strcatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strncat => _library._strncatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get strcmp => _library._strcmpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strncmp => _library._strncmpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get strcoll => _library._strcollPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strxfrm => _library._strxfrmPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>>
      get strcoll_l => _library._strcoll_lPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>> get strxfrm_l => _library._strxfrm_lPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get strdup =>
      _library._strdupPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strndup => _library._strndupPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get strchr => _library._strchrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get strrchr => _library._strrchrPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get strcspn =>
      _library._strcspnPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get strspn =>
      _library._strspnPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get strpbrk =>
      _library._strpbrkPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get strstr =>
      _library._strstrPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get strtok =>
      _library._strtokPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> get strtok_r =>
      _library._strtok_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>
      get strlen => _library._strlenPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>> get strnlen =>
      _library._strnlenPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>
      get strerror => _library._strerrorPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strerror_r => _library._strerror_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>
      get strerror_l => _library._strerror_lPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get bcmp => _library._bcmpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get bcopy => _library._bcopyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>> get bzero =>
      _library._bzeroPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get index => _library._indexPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get rindex => _library._rindexPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get ffs =>
      _library._ffsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Long)>> get ffsl =>
      _library._ffslPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>> get ffsll =>
      _library._ffsllPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get strcasecmp => _library._strcasecmpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strncasecmp => _library._strncasecmpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>>
      get strcasecmp_l => _library._strcasecmp_lPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              locale_t)>> get strncasecmp_l => _library._strncasecmp_lPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      get explicit_bzero => _library._explicit_bzeroPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>>
      get strsep => _library._strsepPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>
      get strsignal => _library._strsignalPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get stpcpy =>
      _library._stpcpyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get stpncpy => _library._stpncpyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>
      get atof => _library._atofPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get atoi => _library._atoiPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>
      get atol => _library._atolPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>
      get atoll => _library._atollPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Double Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get strtod => _library._strtodPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Float Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get strtof => _library._strtofPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtol => _library._strtolPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtoul => _library._strtoulPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtoq => _library._strtoqPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtouq => _library._strtouqPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtoll => _library._strtollPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>> get strtoull => _library._strtoullPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>
      get l64a => _library._l64aPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>
      get a64l => _library._a64lPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function()>> get random =>
      _library._randomPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>
      get srandom => _library._srandomPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get initstate => _library._initstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>
      get setstate => _library._setstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>
      get random_r => _library._random_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<random_data>)>>
      get srandom_r => _library._srandom_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>> get initstate_r =>
      _library._initstate_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>
      get setstate_r => _library._setstate_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get rand =>
      _library._randPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>
      get srand => _library._srandPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>
      get rand_r => _library._rand_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function()>> get drand48 =>
      _library._drand48Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>> get erand48 =>
      _library._erand48Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function()>> get lrand48 =>
      _library._lrand48Ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>
      get nrand48 => _library._nrand48Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function()>> get mrand48 =>
      _library._mrand48Ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>
      get jrand48 => _library._jrand48Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Long)>> get srand48 =>
      _library._srand48Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>> get seed48 =>
      _library._seed48Ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>
      get lcong48 => _library._lcong48Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>>
      get drand48_r => _library._drand48_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>> get erand48_r =>
      _library._erand48_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>
      get lrand48_r => _library._lrand48_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Long>)>> get nrand48_r => _library._nrand48_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>
      get mrand48_r => _library._mrand48_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Long>)>> get jrand48_r => _library._jrand48_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>
      get srand48_r => _library._srand48_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>>
      get seed48_r => _library._seed48_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>>
      get lcong48_r => _library._lcong48_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
      get malloc => _library._mallocPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>> get calloc =>
      _library._callocPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      get realloc => _library._reallocPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>> get reallocarray =>
      _library._reallocarrayPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get free => _library._freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
      get alloca => _library._allocaPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
      get valloc => _library._vallocPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size, ffi.Size)>>
      get posix_memalign => _library._posix_memalignPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>
      get aligned_alloc => _library._aligned_allocPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get abort =>
      _library._abortPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>
      get atexit => _library._atexitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>
      get at_quick_exit => _library._at_quick_exitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>> get on_exit => _library._on_exitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> get exit =>
      _library._exitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> get quick_exit =>
      _library._quick_exitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get getenv =>
      _library._getenvPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get putenv => _library._putenvPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get setenv => _library._setenvPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get unsetenv => _library._unsetenvPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get clearenv =>
      _library._clearenvPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get mktemp =>
      _library._mktempPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get mkstemp => _library._mkstempPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get mkstemps => _library._mkstempsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get mkdtemp =>
      _library._mkdtempPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get system => _library._systemPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get realpath =>
      _library._realpathPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  ffi.Size,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>>
      get bsearch => _library._bsearchPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  ffi.Size,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>>
      get qsort => _library._qsortPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get abs =>
      _library._absPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Long)>> get labs =>
      _library._labsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>
      get llabs => _library._llabsPtr;
  ffi.Pointer<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>> get div =>
      _library._divPtr;
  ffi.Pointer<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>
      get ldiv => _library._ldivPtr;
  ffi.Pointer<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>
      get lldiv => _library._lldivPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>> get ecvt => _library._ecvtPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>> get fcvt => _library._fcvtPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>> get gcvt =>
      _library._gcvtPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>> get ecvt_r => _library._ecvt_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>> get fcvt_r => _library._fcvt_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get mblen => _library._mblenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get mbtowc => _library._mbtowcPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>> get wctomb =>
      _library._wctombPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(
                  ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get mbstowcs => _library._mbstowcsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, ffi.Size)>>
      get wcstombs => _library._wcstombsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get rpmatch => _library._rpmatchPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> get getsubopt =>
      _library._getsuboptPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>> get getloadavg =>
      _library._getloadavgPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Long)>> get mmap => _library._mmapPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      get munmap => _library._munmapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>
      get mprotect => _library._mprotectPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>
      get msync => _library._msyncPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>
      get madvise => _library._madvisePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>
      get posix_madvise => _library._posix_madvisePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      get mlock => _library._mlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      get munlock => _library._munlockPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get mlockall =>
      _library._mlockallPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get munlockall =>
      _library._munlockallPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>)>> get mincore =>
      _library._mincorePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, mode_t)>>
      get shm_open => _library._shm_openPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get shm_unlink => _library._shm_unlinkPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<slab_arena>,
              ffi.Pointer<quota>,
              ffi.Size,
              ffi.Uint32,
              ffi.Int)>> get slab_arena_create =>
      _library._slab_arena_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_arena>)>>
      get slab_arena_destroy => _library._slab_arena_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<slab_arena>)>>
      get slab_map => _library._slab_mapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<slab_arena>, ffi.Pointer<ffi.Void>)>>
      get slab_unmap => _library._slab_unmapPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_arena>)>>
      get slab_arena_mprotect => _library._slab_arena_mprotectPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<sched_param>)>>
      get sched_setparam => _library._sched_setparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<sched_param>)>>
      get sched_getparam => _library._sched_getparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<sched_param>)>>
      get sched_setscheduler => _library._sched_setschedulerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get sched_getscheduler => _library._sched_getschedulerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get sched_yield =>
      _library._sched_yieldPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get sched_get_priority_max => _library._sched_get_priority_maxPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get sched_get_priority_min => _library._sched_get_priority_minPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timespec>)>>
      get sched_rr_get_interval => _library._sched_rr_get_intervalPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>> get pthread_create =>
      _library._pthread_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get pthread_exit => _library._pthread_exitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get pthread_join => _library._pthread_joinPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t)>>
      get pthread_detach => _library._pthread_detachPtr;
  ffi.Pointer<ffi.NativeFunction<pthread_t Function()>> get pthread_self =>
      _library._pthread_selfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>
      get pthread_equal => _library._pthread_equalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>
      get pthread_attr_init => _library._pthread_attr_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>
      get pthread_attr_destroy => _library._pthread_attr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getdetachstate =>
          _library._pthread_attr_getdetachstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setdetachstate =>
          _library._pthread_attr_setdetachstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>>
      get pthread_attr_getguardsize => _library._pthread_attr_getguardsizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>>
      get pthread_attr_setguardsize => _library._pthread_attr_setguardsizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>>
      get pthread_attr_getschedparam => _library._pthread_attr_getschedparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>>
      get pthread_attr_setschedparam => _library._pthread_attr_setschedparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getschedpolicy =>
          _library._pthread_attr_getschedpolicyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setschedpolicy =>
          _library._pthread_attr_setschedpolicyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getinheritsched =>
          _library._pthread_attr_getinheritschedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setinheritsched =>
          _library._pthread_attr_setinheritschedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getscope => _library._pthread_attr_getscopePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setscope => _library._pthread_attr_setscopePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get pthread_attr_getstackaddr => _library._pthread_attr_getstackaddrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>>
      get pthread_attr_setstackaddr => _library._pthread_attr_setstackaddrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>>
      get pthread_attr_getstacksize => _library._pthread_attr_getstacksizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>>
      get pthread_attr_setstacksize => _library._pthread_attr_setstacksizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>> get pthread_attr_getstack =>
      _library._pthread_attr_getstackPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>> get pthread_attr_setstack =>
      _library._pthread_attr_setstackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(pthread_t, ffi.Int, ffi.Pointer<sched_param>)>>
      get pthread_setschedparam => _library._pthread_setschedparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  pthread_t, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>>
      get pthread_getschedparam => _library._pthread_getschedparamPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>
      get pthread_setschedprio => _library._pthread_setschedprioPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>
      get pthread_once => _library._pthread_oncePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>
      get pthread_setcancelstate => _library._pthread_setcancelstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>
      get pthread_setcanceltype => _library._pthread_setcanceltypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t)>>
      get pthread_cancel => _library._pthread_cancelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get pthread_testcancel =>
      _library._pthread_testcancelPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>> get pthread_mutex_init =>
      _library._pthread_mutex_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_destroy => _library._pthread_mutex_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_trylock => _library._pthread_mutex_trylockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_lock => _library._pthread_mutex_lockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>>
      get pthread_mutex_timedlock => _library._pthread_mutex_timedlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_unlock => _library._pthread_mutex_unlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutex_getprioceiling =>
          _library._pthread_mutex_getprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutex_t>, ffi.Int, ffi.Pointer<ffi.Int>)>>
      get pthread_mutex_setprioceiling =>
          _library._pthread_mutex_setprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_consistent => _library._pthread_mutex_consistentPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>
      get pthread_mutexattr_init => _library._pthread_mutexattr_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>
      get pthread_mutexattr_destroy => _library._pthread_mutexattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getpshared =>
          _library._pthread_mutexattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setpshared =>
          _library._pthread_mutexattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_gettype => _library._pthread_mutexattr_gettypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_settype => _library._pthread_mutexattr_settypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getprotocol =>
          _library._pthread_mutexattr_getprotocolPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setprotocol =>
          _library._pthread_mutexattr_setprotocolPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getprioceiling =>
          _library._pthread_mutexattr_getprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setprioceiling =>
          _library._pthread_mutexattr_setprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getrobust =>
          _library._pthread_mutexattr_getrobustPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setrobust =>
          _library._pthread_mutexattr_setrobustPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>> get pthread_rwlock_init =>
      _library._pthread_rwlock_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_destroy => _library._pthread_rwlock_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_rdlock => _library._pthread_rwlock_rdlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_tryrdlock => _library._pthread_rwlock_tryrdlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>>
      get pthread_rwlock_timedrdlock => _library._pthread_rwlock_timedrdlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_wrlock => _library._pthread_rwlock_wrlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_trywrlock => _library._pthread_rwlock_trywrlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>>
      get pthread_rwlock_timedwrlock => _library._pthread_rwlock_timedwrlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_unlock => _library._pthread_rwlock_unlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>
      get pthread_rwlockattr_init => _library._pthread_rwlockattr_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>
      get pthread_rwlockattr_destroy => _library._pthread_rwlockattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_rwlockattr_getpshared =>
          _library._pthread_rwlockattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>>
      get pthread_rwlockattr_setpshared =>
          _library._pthread_rwlockattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_rwlockattr_getkind_np =>
          _library._pthread_rwlockattr_getkind_npPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>>
      get pthread_rwlockattr_setkind_np =>
          _library._pthread_rwlockattr_setkind_npPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>> get pthread_cond_init =>
      _library._pthread_cond_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>
      get pthread_cond_destroy => _library._pthread_cond_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>
      get pthread_cond_signal => _library._pthread_cond_signalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>
      get pthread_cond_broadcast => _library._pthread_cond_broadcastPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>>
      get pthread_cond_wait => _library._pthread_cond_waitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>> get pthread_cond_timedwait =>
      _library._pthread_cond_timedwaitPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>
      get pthread_condattr_init => _library._pthread_condattr_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>
      get pthread_condattr_destroy => _library._pthread_condattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_condattr_getpshared =>
          _library._pthread_condattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_condattr_t>, ffi.Int)>>
      get pthread_condattr_setpshared =>
          _library._pthread_condattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_condattr_getclock => _library._pthread_condattr_getclockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_condattr_t>, ffi.Int)>>
      get pthread_condattr_setclock => _library._pthread_condattr_setclockPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrier_t>,
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.UnsignedInt)>> get pthread_barrier_init =>
      _library._pthread_barrier_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>
      get pthread_barrier_destroy => _library._pthread_barrier_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>
      get pthread_barrier_wait => _library._pthread_barrier_waitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>
      get pthread_barrierattr_init => _library._pthread_barrierattr_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>
      get pthread_barrierattr_destroy =>
          _library._pthread_barrierattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_barrierattr_getpshared =>
          _library._pthread_barrierattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>, ffi.Int)>>
      get pthread_barrierattr_setpshared =>
          _library._pthread_barrierattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_key_t>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>
      get pthread_key_create => _library._pthread_key_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>
      get pthread_key_delete => _library._pthread_key_deletePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>
      get pthread_getspecific => _library._pthread_getspecificPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(pthread_key_t, ffi.Pointer<ffi.Void>)>>
      get pthread_setspecific => _library._pthread_setspecificPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>)>>
      get pthread_getcpuclockid => _library._pthread_getcpuclockidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>
      get pthread_atfork => _library._pthread_atforkPtr;
  ffi.Pointer<ffi.Uint32> get slab_magic => _library._slab_magic;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<slab_cache>, ffi.Pointer<slab_arena>)>>
      get slab_cache_create => _library._slab_cache_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_cache>)>>
      get slab_cache_destroy => _library._slab_cache_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, ffi.Uint8)>>
      get slab_get_with_order => _library._slab_get_with_orderPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>>
      get slab_put_with_order => _library._slab_put_with_orderPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, ffi.Size)>>
      get slab_get_large => _library._slab_get_largePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>>
      get slab_put_large => _library._slab_put_largePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, ffi.Size)>>
      get slab_get => _library._slab_getPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>>
      get slab_put => _library._slab_putPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<slab_cache>)>>
      get slab_cache_check => _library._slab_cache_checkPtr;
  ffi.Pointer<ffi.Double> get OVERHEAD_RATIO => _library._OVERHEAD_RATIO;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<mempool>, ffi.Pointer<mempool_stats>)>>
      get mempool_stats1 => _library._mempool_stats1Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<mempool>,
              ffi.Pointer<slab_cache>,
              ffi.Uint32,
              ffi.Uint8)>> get mempool_create_with_order =>
      _library._mempool_create_with_orderPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mempool>)>>
      get mempool_destroy => _library._mempool_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<mempool>)>>
      get mempool_alloc => _library._mempool_allocPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mempool>, ffi.Pointer<mslab>,
              ffi.Pointer<ffi.Void>)>> get mslab_free =>
      _library._mslab_freePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<small_class>,
              ffi.UnsignedInt,
              ffi.Float,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Float>)>> get small_class_create =>
      _library._small_class_createPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<small_alloc>,
              ffi.Pointer<slab_cache>,
              ffi.Uint32,
              ffi.UnsignedInt,
              ffi.Float,
              ffi.Pointer<ffi.Float>)>> get small_alloc_create =>
      _library._small_alloc_createPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Int32, ffi.Bool)>>
      get small_alloc_setopt => _library._small_alloc_setoptPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<small_alloc>)>>
      get small_alloc_destroy => _library._small_alloc_destroyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<small_alloc>, ffi.Size)>> get smalloc =>
      _library._smallocPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get smfree => _library._smfreePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get smfree_delayed => _library._smfree_delayedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(
                  ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>)>>
      get small_ptr_compress => _library._small_ptr_compressPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<small_alloc>, ffi.Size)>> get small_ptr_decompress =>
      _library._small_ptr_decompressPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<small_alloc>,
              ffi.Pointer<small_stats>,
              mempool_stats_cb,
              ffi.Pointer<ffi.Void>)>> get small_stats1 =>
      _library._small_stats1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsError => _library._Dart_IsErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsApiError => _library._Dart_IsApiErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsUnhandledExceptionError =>
          _library._Dart_IsUnhandledExceptionErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsCompilationError => _library._Dart_IsCompilationErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsFatalError => _library._Dart_IsFatalErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>
      get Dart_GetError => _library._Dart_GetErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_ErrorHasException => _library._Dart_ErrorHasExceptionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_ErrorGetException => _library._Dart_ErrorGetExceptionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_ErrorGetStackTrace => _library._Dart_ErrorGetStackTracePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>
      get Dart_NewApiError => _library._Dart_NewApiErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>
      get Dart_NewCompilationError => _library._Dart_NewCompilationErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_NewUnhandledExceptionError =>
          _library._Dart_NewUnhandledExceptionErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>
      get Dart_PropagateError => _library._Dart_PropagateErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_ToString => _library._Dart_ToStringPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle, ffi.Handle)>>
      get Dart_IdentityEquals => _library._Dart_IdentityEqualsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_HandleFromPersistent => _library._Dart_HandleFromPersistentPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Handle Function(Dart_WeakPersistentHandle)>>
      get Dart_HandleFromWeakPersistent =>
          _library._Dart_HandleFromWeakPersistentPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_NewPersistentHandle => _library._Dart_NewPersistentHandlePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>
      get Dart_SetPersistentHandle => _library._Dart_SetPersistentHandlePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>
      get Dart_DeletePersistentHandle =>
          _library._Dart_DeletePersistentHandlePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Dart_WeakPersistentHandle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>> get Dart_NewWeakPersistentHandle =>
      _library._Dart_NewWeakPersistentHandlePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_WeakPersistentHandle)>>
      get Dart_DeleteWeakPersistentHandle =>
          _library._Dart_DeleteWeakPersistentHandlePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Dart_WeakPersistentHandle, ffi.IntPtr)>>
      get Dart_UpdateExternalSize => _library._Dart_UpdateExternalSizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Dart_FinalizableHandle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>> get Dart_NewFinalizableHandle =>
      _library._Dart_NewFinalizableHandlePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Dart_FinalizableHandle, ffi.Handle)>>
      get Dart_DeleteFinalizableHandle =>
          _library._Dart_DeleteFinalizableHandlePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Dart_FinalizableHandle, ffi.Handle, ffi.IntPtr)>>
      get Dart_UpdateFinalizableExternalSize =>
          _library._Dart_UpdateFinalizableExternalSizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      get Dart_VersionString => _library._Dart_VersionStringPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Dart_IsolateFlags>)>>
      get Dart_IsolateFlagsInitialize =>
          _library._Dart_IsolateFlagsInitializePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Dart_InitializeParams>)>> get Dart_Initialize =>
      _library._Dart_InitializePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      get Dart_Cleanup => _library._Dart_CleanupPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get Dart_SetVMFlags => _library._Dart_SetVMFlagsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>
      get Dart_IsVMFlagSet => _library._Dart_IsVMFlagSetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<Dart_IsolateFlags>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get Dart_CreateIsolateGroup => _library._Dart_CreateIsolateGroupPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  Dart_Isolate,
                  ffi.Pointer<ffi.Char>,
                  Dart_IsolateShutdownCallback,
                  Dart_IsolateCleanupCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get Dart_CreateIsolateInGroup => _library._Dart_CreateIsolateInGroupPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.IntPtr,
                  ffi.Pointer<Dart_IsolateFlags>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get Dart_CreateIsolateGroupFromKernel =>
          _library._Dart_CreateIsolateGroupFromKernelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get Dart_ShutdownIsolate => _library._Dart_ShutdownIsolatePtr;
  ffi.Pointer<ffi.NativeFunction<Dart_Isolate Function()>>
      get Dart_CurrentIsolate => _library._Dart_CurrentIsolatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      get Dart_CurrentIsolateData => _library._Dart_CurrentIsolateDataPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>
      get Dart_IsolateData => _library._Dart_IsolateDataPtr;
  ffi.Pointer<ffi.NativeFunction<Dart_IsolateGroup Function()>>
      get Dart_CurrentIsolateGroup => _library._Dart_CurrentIsolateGroupPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      get Dart_CurrentIsolateGroupData =>
          _library._Dart_CurrentIsolateGroupDataPtr;
  ffi.Pointer<ffi.NativeFunction<Dart_IsolateGroupId Function()>>
      get Dart_CurrentIsolateGroupId => _library._Dart_CurrentIsolateGroupIdPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>
      get Dart_IsolateGroupData => _library._Dart_IsolateGroupDataPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_DebugName =>
      _library._Dart_DebugNamePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>>
      get Dart_IsolateServiceId => _library._Dart_IsolateServiceIdPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>
      get Dart_EnterIsolate => _library._Dart_EnterIsolatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>
      get Dart_KillIsolate => _library._Dart_KillIsolatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>
      get Dart_NotifyIdle => _library._Dart_NotifyIdlePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get Dart_NotifyDetach =>
      _library._Dart_NotifyDetachPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get Dart_NotifyLowMemory => _library._Dart_NotifyLowMemoryPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>
      get Dart_SetPerformanceMode => _library._Dart_SetPerformanceModePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get Dart_StartProfiling => _library._Dart_StartProfilingPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get Dart_StopProfiling =>
      _library._Dart_StopProfilingPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get Dart_ThreadDisableProfiling =>
          _library._Dart_ThreadDisableProfilingPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get Dart_ThreadEnableProfiling => _library._Dart_ThreadEnableProfilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, ffi.IntPtr)>>
      get Dart_AddSymbols => _library._Dart_AddSymbolsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get Dart_ExitIsolate =>
      _library._Dart_ExitIsolatePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Bool)>> get Dart_CreateSnapshot =>
      _library._Dart_CreateSnapshotPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>
      get Dart_IsKernel => _library._Dart_IsKernelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>>
      get Dart_IsolateMakeRunnable => _library._Dart_IsolateMakeRunnablePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_MessageNotifyCallback)>>
      get Dart_SetMessageNotifyCallback =>
          _library._Dart_SetMessageNotifyCallbackPtr;
  ffi.Pointer<ffi.NativeFunction<Dart_MessageNotifyCallback Function()>>
      get Dart_GetMessageNotifyCallback =>
          _library._Dart_GetMessageNotifyCallbackPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_ShouldPauseOnStart => _library._Dart_ShouldPauseOnStartPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>
      get Dart_SetShouldPauseOnStart => _library._Dart_SetShouldPauseOnStartPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_IsPausedOnStart => _library._Dart_IsPausedOnStartPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>
      get Dart_SetPausedOnStart => _library._Dart_SetPausedOnStartPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_ShouldPauseOnExit => _library._Dart_ShouldPauseOnExitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>
      get Dart_SetShouldPauseOnExit => _library._Dart_SetShouldPauseOnExitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_IsPausedOnExit => _library._Dart_IsPausedOnExitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>
      get Dart_SetPausedOnExit => _library._Dart_SetPausedOnExitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>
      get Dart_SetStickyError => _library._Dart_SetStickyErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_HasStickyError => _library._Dart_HasStickyErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>>
      get Dart_GetStickyError => _library._Dart_GetStickyErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>>
      get Dart_HandleMessage => _library._Dart_HandleMessagePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>
      get Dart_WaitForEvent => _library._Dart_WaitForEventPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_HandleServiceMessages => _library._Dart_HandleServiceMessagesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_HasServiceMessages => _library._Dart_HasServiceMessagesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_RunLoop =>
      _library._Dart_RunLoopPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Bool, Dart_Port, Dart_Port,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> get Dart_RunLoopAsync =>
      _library._Dart_RunLoopAsyncPtr;
  ffi.Pointer<ffi.NativeFunction<Dart_Port Function()>>
      get Dart_GetMainPortId => _library._Dart_GetMainPortIdPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>> get Dart_HasLivePorts =>
      _library._Dart_HasLivePortsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Port, ffi.Handle)>>
      get Dart_Post => _library._Dart_PostPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(Dart_Port)>>
      get Dart_NewSendPort => _library._Dart_NewSendPortPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<Dart_Port>)>>
      get Dart_SendPortGetId => _library._Dart_SendPortGetIdPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get Dart_EnterScope =>
      _library._Dart_EnterScopePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get Dart_ExitScope =>
      _library._Dart_ExitScopePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr)>>
      get Dart_ScopeAllocate => _library._Dart_ScopeAllocatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_Null =>
      _library._Dart_NullPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsNull => _library._Dart_IsNullPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_EmptyString =>
      _library._Dart_EmptyStringPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_TypeDynamic =>
      _library._Dart_TypeDynamicPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_TypeVoid =>
      _library._Dart_TypeVoidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_TypeNever =>
      _library._Dart_TypeNeverPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_ObjectEquals => _library._Dart_ObjectEqualsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_ObjectIsType => _library._Dart_ObjectIsTypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsInstance => _library._Dart_IsInstancePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsNumber => _library._Dart_IsNumberPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsInteger => _library._Dart_IsIntegerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsDouble => _library._Dart_IsDoublePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsBoolean => _library._Dart_IsBooleanPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsString => _library._Dart_IsStringPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsStringLatin1 => _library._Dart_IsStringLatin1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsExternalString => _library._Dart_IsExternalStringPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsList => _library._Dart_IsListPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsMap => _library._Dart_IsMapPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsLibrary => _library._Dart_IsLibraryPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsType => _library._Dart_IsTypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsFunction => _library._Dart_IsFunctionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsVariable => _library._Dart_IsVariablePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsTypeVariable => _library._Dart_IsTypeVariablePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsClosure => _library._Dart_IsClosurePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsTypedData => _library._Dart_IsTypedDataPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsByteBuffer => _library._Dart_IsByteBufferPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsFuture => _library._Dart_IsFuturePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_InstanceGetType => _library._Dart_InstanceGetTypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_ClassName => _library._Dart_ClassNamePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_FunctionName => _library._Dart_FunctionNamePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_FunctionOwner => _library._Dart_FunctionOwnerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_FunctionIsStatic => _library._Dart_FunctionIsStaticPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>
      get Dart_IsTearOff => _library._Dart_IsTearOffPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_ClosureFunction => _library._Dart_ClosureFunctionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_ClassLibrary => _library._Dart_ClassLibraryPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_IntegerFitsIntoInt64 => _library._Dart_IntegerFitsIntoInt64Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_IntegerFitsIntoUint64 => _library._Dart_IntegerFitsIntoUint64Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>
      get Dart_NewInteger => _library._Dart_NewIntegerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Uint64)>>
      get Dart_NewIntegerFromUint64 => _library._Dart_NewIntegerFromUint64Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>
      get Dart_NewIntegerFromHexCString =>
          _library._Dart_NewIntegerFromHexCStringPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Int64>)>>
      get Dart_IntegerToInt64 => _library._Dart_IntegerToInt64Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint64>)>>
      get Dart_IntegerToUint64 => _library._Dart_IntegerToUint64Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get Dart_IntegerToHexCString => _library._Dart_IntegerToHexCStringPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Double)>>
      get Dart_NewDouble => _library._Dart_NewDoublePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Double>)>>
      get Dart_DoubleValue => _library._Dart_DoubleValuePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Handle)>>
      get Dart_GetStaticMethodClosure =>
          _library._Dart_GetStaticMethodClosurePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_True =>
      _library._Dart_TruePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_False =>
      _library._Dart_FalsePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Bool)>>
      get Dart_NewBoolean => _library._Dart_NewBooleanPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_BooleanValue => _library._Dart_BooleanValuePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>
      get Dart_StringLength => _library._Dart_StringLengthPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>
      get Dart_NewStringFromCString => _library._Dart_NewStringFromCStringPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>
      get Dart_NewStringFromUTF8 => _library._Dart_NewStringFromUTF8Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Pointer<ffi.Uint16>, ffi.IntPtr)>>
      get Dart_NewStringFromUTF16 => _library._Dart_NewStringFromUTF16Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Pointer<ffi.Int32>, ffi.IntPtr)>>
      get Dart_NewStringFromUTF32 => _library._Dart_NewStringFromUTF32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>> get Dart_NewExternalLatin1String =>
      _library._Dart_NewExternalLatin1StringPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>> get Dart_NewExternalUTF16String =>
      _library._Dart_NewExternalUTF16StringPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get Dart_StringToCString => _library._Dart_StringToCStringPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>> get Dart_StringToUTF8 =>
      _library._Dart_StringToUTF8Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.IntPtr>)>>
      get Dart_StringToLatin1 => _library._Dart_StringToLatin1Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.IntPtr>)>> get Dart_StringToUTF16 =>
      _library._Dart_StringToUTF16Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>
      get Dart_StringStorageSize => _library._Dart_StringStorageSizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get Dart_StringGetProperties => _library._Dart_StringGetPropertiesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>
      get Dart_NewList => _library._Dart_NewListPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.IntPtr)>>
      get Dart_NewListOf => _library._Dart_NewListOfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>
      get Dart_NewListOfType => _library._Dart_NewListOfTypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr)>>
      get Dart_NewListOfTypeFilled => _library._Dart_NewListOfTypeFilledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>
      get Dart_ListLength => _library._Dart_ListLengthPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>
      get Dart_ListGetAt => _library._Dart_ListGetAtPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.IntPtr, ffi.IntPtr, ffi.Pointer<ffi.Handle>)>>
      get Dart_ListGetRange => _library._Dart_ListGetRangePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.Handle)>>
      get Dart_ListSetAt => _library._Dart_ListSetAtPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>
      get Dart_ListGetAsBytes => _library._Dart_ListGetAsBytesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>
      get Dart_ListSetAsBytes => _library._Dart_ListSetAsBytesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>
      get Dart_MapGetAt => _library._Dart_MapGetAtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>
      get Dart_MapContainsKey => _library._Dart_MapContainsKeyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_MapKeys => _library._Dart_MapKeysPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>
      get Dart_GetTypeOfTypedData => _library._Dart_GetTypeOfTypedDataPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>
      get Dart_GetTypeOfExternalTypedData =>
          _library._Dart_GetTypeOfExternalTypedDataPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.IntPtr)>>
      get Dart_NewTypedData => _library._Dart_NewTypedDataPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Int32, ffi.Pointer<ffi.Void>, ffi.IntPtr)>>
      get Dart_NewExternalTypedData => _library._Dart_NewExternalTypedDataPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.IntPtr,
                  ffi.Pointer<ffi.Void>, ffi.IntPtr, Dart_HandleFinalizer)>>
      get Dart_NewExternalTypedDataWithFinalizer =>
          _library._Dart_NewExternalTypedDataWithFinalizerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.IntPtr,
                  ffi.Pointer<ffi.Void>, ffi.IntPtr, Dart_HandleFinalizer)>>
      get Dart_NewUnmodifiableExternalTypedDataWithFinalizer =>
          _library._Dart_NewUnmodifiableExternalTypedDataWithFinalizerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_NewByteBuffer => _library._Dart_NewByteBufferPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.IntPtr>)>> get Dart_TypedDataAcquireData =>
      _library._Dart_TypedDataAcquireDataPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_TypedDataReleaseData => _library._Dart_TypedDataReleaseDataPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_GetDataFromByteBuffer => _library._Dart_GetDataFromByteBufferPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.Int, ffi.Pointer<ffi.Handle>)>>
      get Dart_New => _library._Dart_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_Allocate => _library._Dart_AllocatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.IntPtr>)>>
      get Dart_AllocateWithNativeFields =>
          _library._Dart_AllocateWithNativeFieldsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.Int, ffi.Pointer<ffi.Handle>)>>
      get Dart_Invoke => _library._Dart_InvokePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Int, ffi.Pointer<ffi.Handle>)>>
      get Dart_InvokeClosure => _library._Dart_InvokeClosurePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.Int, ffi.Pointer<ffi.Handle>)>>
      get Dart_InvokeConstructor => _library._Dart_InvokeConstructorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>
      get Dart_GetField => _library._Dart_GetFieldPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Handle)>>
      get Dart_SetField => _library._Dart_SetFieldPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_ThrowException => _library._Dart_ThrowExceptionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>
      get Dart_ReThrowException => _library._Dart_ReThrowExceptionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Int>)>>
      get Dart_GetNativeInstanceFieldCount =>
          _library._Dart_GetNativeInstanceFieldCountPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Int, ffi.Pointer<ffi.IntPtr>)>>
      get Dart_GetNativeInstanceField =>
          _library._Dart_GetNativeInstanceFieldPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Int, ffi.IntPtr)>>
      get Dart_SetNativeInstanceField =>
          _library._Dart_SetNativeInstanceFieldPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(Dart_NativeArguments)>>
      get Dart_GetNativeIsolateGroupData =>
          _library._Dart_GetNativeIsolateGroupDataPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments,
                  ffi.Int,
                  ffi.Pointer<Dart_NativeArgument_Descriptor>,
                  ffi.Pointer<Dart_NativeArgument_Value>)>>
      get Dart_GetNativeArguments => _library._Dart_GetNativeArgumentsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(Dart_NativeArguments, ffi.Int)>>
      get Dart_GetNativeArgument => _library._Dart_GetNativeArgumentPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Dart_NativeArguments)>>
      get Dart_GetNativeArgumentCount =>
          _library._Dart_GetNativeArgumentCountPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.IntPtr>)>> get Dart_GetNativeFieldsOfArgument =>
      _library._Dart_GetNativeFieldsOfArgumentPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments, ffi.Pointer<ffi.IntPtr>)>>
      get Dart_GetNativeReceiver => _library._Dart_GetNativeReceiverPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(Dart_NativeArguments, ffi.Int,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get Dart_GetNativeStringArgument =>
          _library._Dart_GetNativeStringArgumentPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments, ffi.Int, ffi.Pointer<ffi.Int64>)>>
      get Dart_GetNativeIntegerArgument =>
          _library._Dart_GetNativeIntegerArgumentPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments, ffi.Int, ffi.Pointer<ffi.Bool>)>>
      get Dart_GetNativeBooleanArgument =>
          _library._Dart_GetNativeBooleanArgumentPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments, ffi.Int, ffi.Pointer<ffi.Double>)>>
      get Dart_GetNativeDoubleArgument =>
          _library._Dart_GetNativeDoubleArgumentPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Dart_NativeArguments, ffi.Handle)>>
      get Dart_SetReturnValue => _library._Dart_SetReturnValuePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Dart_NativeArguments, Dart_WeakPersistentHandle)>>
      get Dart_SetWeakHandleReturnValue =>
          _library._Dart_SetWeakHandleReturnValuePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Dart_NativeArguments, ffi.Bool)>>
      get Dart_SetBooleanReturnValue => _library._Dart_SetBooleanReturnValuePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Dart_NativeArguments, ffi.Int64)>>
      get Dart_SetIntegerReturnValue => _library._Dart_SetIntegerReturnValuePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Dart_NativeArguments, ffi.Double)>>
      get Dart_SetDoubleReturnValue => _library._Dart_SetDoubleReturnValuePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(Dart_EnvironmentCallback)>>
      get Dart_SetEnvironmentCallback =>
          _library._Dart_SetEnvironmentCallbackPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, Dart_NativeEntryResolver,
              Dart_NativeEntrySymbol)>> get Dart_SetNativeResolver =>
      _library._Dart_SetNativeResolverPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<Dart_NativeEntryResolver>)>>
      get Dart_GetNativeResolver => _library._Dart_GetNativeResolverPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<Dart_NativeEntrySymbol>)>>
      get Dart_GetNativeSymbol => _library._Dart_GetNativeSymbolPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, Dart_FfiNativeResolver)>>
      get Dart_SetFfiNativeResolver => _library._Dart_SetFfiNativeResolverPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(Dart_LibraryTagHandler)>>
      get Dart_SetLibraryTagHandler => _library._Dart_SetLibraryTagHandlerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(Dart_DeferredLoadHandler)>>
      get Dart_SetDeferredLoadHandler =>
          _library._Dart_SetDeferredLoadHandlerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.IntPtr, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>
      get Dart_DeferredLoadComplete => _library._Dart_DeferredLoadCompletePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.IntPtr, ffi.Pointer<ffi.Char>, ffi.Bool)>>
      get Dart_DeferredLoadCompleteError =>
          _library._Dart_DeferredLoadCompleteErrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>
      get Dart_DefaultCanonicalizeUrl =>
          _library._Dart_DefaultCanonicalizeUrlPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>
      get Dart_LoadScriptFromKernel => _library._Dart_LoadScriptFromKernelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_RootLibrary =>
      _library._Dart_RootLibraryPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_SetRootLibrary => _library._Dart_SetRootLibraryPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Handle>)>>
      get Dart_GetType => _library._Dart_GetTypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Handle>)>>
      get Dart_GetNullableType => _library._Dart_GetNullableTypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Handle>)>>
      get Dart_GetNonNullableType => _library._Dart_GetNonNullableTypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_TypeToNullableType => _library._Dart_TypeToNullableTypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_TypeToNonNullableType => _library._Dart_TypeToNonNullableTypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_IsNullableType => _library._Dart_IsNullableTypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_IsNonNullableType => _library._Dart_IsNonNullableTypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Bool>)>>
      get Dart_IsLegacyType => _library._Dart_IsLegacyTypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>
      get Dart_GetClass => _library._Dart_GetClassPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_LibraryUrl => _library._Dart_LibraryUrlPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_LibraryResolvedUrl => _library._Dart_LibraryResolvedUrlPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>>
      get Dart_GetLoadedLibraries => _library._Dart_GetLoadedLibrariesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>
      get Dart_LookupLibrary => _library._Dart_LookupLibraryPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>
      get Dart_LibraryHandleError => _library._Dart_LibraryHandleErrorPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>
      get Dart_LoadLibraryFromKernel => _library._Dart_LoadLibraryFromKernelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Bool)>>
      get Dart_FinalizeLoading => _library._Dart_FinalizeLoadingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get Dart_GetPeer => _library._Dart_GetPeerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Void>)>>
      get Dart_SetPeer => _library._Dart_SetPeerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Isolate)>>
      get Dart_IsKernelIsolate => _library._Dart_IsKernelIsolatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_KernelIsolateIsRunning =>
          _library._Dart_KernelIsolateIsRunningPtr;
  ffi.Pointer<ffi.NativeFunction<Dart_Port Function()>> get Dart_KernelPort =>
      _library._Dart_KernelPortPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Dart_KernelCompilationResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>> get Dart_CompileToKernel =>
      _library._Dart_CompileToKernelPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Dart_KernelCompilationResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Int32)>> get Dart_CompileToKernelWithGivenNullsafety =>
      _library._Dart_CompileToKernelWithGivenNullsafetyPtr;
  ffi.Pointer<ffi.NativeFunction<Dart_KernelCompilationResult Function()>>
      get Dart_KernelListDependencies =>
          _library._Dart_KernelListDependenciesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>
      get Dart_SetDartLibrarySourcesKernel =>
          _library._Dart_SetDartLibrarySourcesKernelPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>> get Dart_DetectNullSafety =>
      _library._Dart_DetectNullSafetyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Isolate)>>
      get Dart_IsServiceIsolate => _library._Dart_IsServiceIsolatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(Dart_Port, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get Dart_WriteProfileToTimeline =>
          _library._Dart_WriteProfileToTimelinePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_Precompile =>
      _library._Dart_PrecompilePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>
      get Dart_LoadingUnitLibraryUris =>
          _library._Dart_LoadingUnitLibraryUrisPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(Dart_StreamingWriteCallback,
                  ffi.Pointer<ffi.Void>, ffi.Bool, ffi.Pointer<ffi.Void>)>>
      get Dart_CreateAppAOTSnapshotAsAssembly =>
          _library._Dart_CreateAppAOTSnapshotAsAssemblyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_CreateLoadingUnitCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Bool,
                  Dart_StreamingWriteCallback,
                  Dart_StreamingCloseCallback)>>
      get Dart_CreateAppAOTSnapshotAsAssemblies =>
          _library._Dart_CreateAppAOTSnapshotAsAssembliesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Pointer<ffi.Void>)>> get Dart_CreateAppAOTSnapshotAsElf =>
      _library._Dart_CreateAppAOTSnapshotAsElfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_CreateLoadingUnitCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Bool,
                  Dart_StreamingWriteCallback,
                  Dart_StreamingCloseCallback)>>
      get Dart_CreateAppAOTSnapshotAsElfs =>
          _library._Dart_CreateAppAOTSnapshotAsElfsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>)>>
      get Dart_CreateVMAOTSnapshotAsAssembly =>
          _library._Dart_CreateVMAOTSnapshotAsAssemblyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_SortClasses =>
      _library._Dart_SortClassesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>> get Dart_CreateAppJITSnapshotAsBlobs =>
      _library._Dart_CreateAppJITSnapshotAsBlobsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                  ffi.Pointer<ffi.IntPtr>)>>
      get Dart_CreateCoreJITSnapshotAsBlobs =>
          _library._Dart_CreateCoreJITSnapshotAsBlobsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>> get Dart_GetObfuscationMap =>
      _library._Dart_GetObfuscationMapPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>
      get Dart_IsPrecompiledRuntime => _library._Dart_IsPrecompiledRuntimePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get Dart_DumpNativeStackTrace => _library._Dart_DumpNativeStackTracePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get Dart_PrepareToAbort => _library._Dart_PrepareToAbortPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(Dart_Port, ffi.Pointer<Dart_CObject>)>>
      get Dart_PostCObject => _library._Dart_PostCObjectPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Port, ffi.Int64)>>
      get Dart_PostInteger => _library._Dart_PostIntegerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Dart_Port Function(
                  ffi.Pointer<ffi.Char>, Dart_NativeMessageHandler, ffi.Bool)>>
      get Dart_NewNativePort => _library._Dart_NewNativePortPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Port)>>
      get Dart_CloseNativePort => _library._Dart_CloseNativePortPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>> get Dart_CompileAll =>
      _library._Dart_CompileAllPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>>
      get Dart_FinalizeAllClasses => _library._Dart_FinalizeAllClassesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>
      get Dart_ExecuteInternalCommand =>
          _library._Dart_ExecuteInternalCommandPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>
      get Dart_InitializeApiDL => _library._Dart_InitializeApiDLPtr;
  ffi.Pointer<Dart_PostCObject_Type> get Dart_PostCObject_DL =>
      _library._Dart_PostCObject_DL;
  ffi.Pointer<Dart_PostInteger_Type> get Dart_PostInteger_DL =>
      _library._Dart_PostInteger_DL;
  ffi.Pointer<Dart_NewNativePort_Type> get Dart_NewNativePort_DL =>
      _library._Dart_NewNativePort_DL;
  ffi.Pointer<Dart_CloseNativePort_Type> get Dart_CloseNativePort_DL =>
      _library._Dart_CloseNativePort_DL;
  ffi.Pointer<Dart_IsError_Type> get Dart_IsError_DL =>
      _library._Dart_IsError_DL;
  ffi.Pointer<Dart_IsApiError_Type> get Dart_IsApiError_DL =>
      _library._Dart_IsApiError_DL;
  ffi.Pointer<Dart_IsUnhandledExceptionError_Type>
      get Dart_IsUnhandledExceptionError_DL =>
          _library._Dart_IsUnhandledExceptionError_DL;
  ffi.Pointer<Dart_IsCompilationError_Type> get Dart_IsCompilationError_DL =>
      _library._Dart_IsCompilationError_DL;
  ffi.Pointer<Dart_IsFatalError_Type> get Dart_IsFatalError_DL =>
      _library._Dart_IsFatalError_DL;
  ffi.Pointer<Dart_GetError_Type> get Dart_GetError_DL =>
      _library._Dart_GetError_DL;
  ffi.Pointer<Dart_ErrorHasException_Type> get Dart_ErrorHasException_DL =>
      _library._Dart_ErrorHasException_DL;
  ffi.Pointer<Dart_ErrorGetException_Type> get Dart_ErrorGetException_DL =>
      _library._Dart_ErrorGetException_DL;
  ffi.Pointer<Dart_ErrorGetStackTrace_Type> get Dart_ErrorGetStackTrace_DL =>
      _library._Dart_ErrorGetStackTrace_DL;
  ffi.Pointer<Dart_NewApiError_Type> get Dart_NewApiError_DL =>
      _library._Dart_NewApiError_DL;
  ffi.Pointer<Dart_NewCompilationError_Type> get Dart_NewCompilationError_DL =>
      _library._Dart_NewCompilationError_DL;
  ffi.Pointer<Dart_NewUnhandledExceptionError_Type>
      get Dart_NewUnhandledExceptionError_DL =>
          _library._Dart_NewUnhandledExceptionError_DL;
  ffi.Pointer<Dart_PropagateError_Type> get Dart_PropagateError_DL =>
      _library._Dart_PropagateError_DL;
  ffi.Pointer<Dart_HandleFromPersistent_Type>
      get Dart_HandleFromPersistent_DL =>
          _library._Dart_HandleFromPersistent_DL;
  ffi.Pointer<Dart_HandleFromWeakPersistent_Type>
      get Dart_HandleFromWeakPersistent_DL =>
          _library._Dart_HandleFromWeakPersistent_DL;
  ffi.Pointer<Dart_NewPersistentHandle_Type> get Dart_NewPersistentHandle_DL =>
      _library._Dart_NewPersistentHandle_DL;
  ffi.Pointer<Dart_SetPersistentHandle_Type> get Dart_SetPersistentHandle_DL =>
      _library._Dart_SetPersistentHandle_DL;
  ffi.Pointer<Dart_DeletePersistentHandle_Type>
      get Dart_DeletePersistentHandle_DL =>
          _library._Dart_DeletePersistentHandle_DL;
  ffi.Pointer<Dart_NewWeakPersistentHandle_Type>
      get Dart_NewWeakPersistentHandle_DL =>
          _library._Dart_NewWeakPersistentHandle_DL;
  ffi.Pointer<Dart_DeleteWeakPersistentHandle_Type>
      get Dart_DeleteWeakPersistentHandle_DL =>
          _library._Dart_DeleteWeakPersistentHandle_DL;
  ffi.Pointer<Dart_UpdateExternalSize_Type> get Dart_UpdateExternalSize_DL =>
      _library._Dart_UpdateExternalSize_DL;
  ffi.Pointer<Dart_NewFinalizableHandle_Type>
      get Dart_NewFinalizableHandle_DL =>
          _library._Dart_NewFinalizableHandle_DL;
  ffi.Pointer<Dart_DeleteFinalizableHandle_Type>
      get Dart_DeleteFinalizableHandle_DL =>
          _library._Dart_DeleteFinalizableHandle_DL;
  ffi.Pointer<Dart_UpdateFinalizableExternalSize_Type>
      get Dart_UpdateFinalizableExternalSize_DL =>
          _library._Dart_UpdateFinalizableExternalSize_DL;
  ffi.Pointer<Dart_Post_Type> get Dart_Post_DL => _library._Dart_Post_DL;
  ffi.Pointer<Dart_NewSendPort_Type> get Dart_NewSendPort_DL =>
      _library._Dart_NewSendPort_DL;
  ffi.Pointer<Dart_SendPortGetId_Type> get Dart_SendPortGetId_DL =>
      _library._Dart_SendPortGetId_DL;
  ffi.Pointer<Dart_EnterScope_Type> get Dart_EnterScope_DL =>
      _library._Dart_EnterScope_DL;
  ffi.Pointer<Dart_ExitScope_Type> get Dart_ExitScope_DL =>
      _library._Dart_ExitScope_DL;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<transport_listener_t> Function(
                  ffi.Pointer<transport_listener_configuration_t>, ffi.Uint8)>>
      get transport_listener_initialize =>
          _library._transport_listener_initializePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_listener_t>)>>
      get transport_listener_close => _library._transport_listener_closePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<transport_listener_t>,
                  ffi.Pointer<ffi.Pointer<io_uring_cqe>>)>>
      get transport_listener_reap => _library._transport_listener_reapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_listener_t>)>>
      get transport_listener_destroy => _library._transport_listener_destroyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>> get transport_server_initialize_tcp =>
      _library._transport_server_initialize_tcpPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<transport_server_t> Function(
              ffi.Pointer<transport_server_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>> get transport_server_initialize_udp =>
      _library._transport_server_initialize_udpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<transport_server_t> Function(
                  ffi.Pointer<transport_server_configuration_t>,
                  ffi.Pointer<ffi.Char>)>>
      get transport_server_initialize_unix_stream =>
          _library._transport_server_initialize_unix_streamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<transport_server_t> Function(
                  ffi.Pointer<transport_server_configuration_t>,
                  ffi.Pointer<ffi.Char>)>>
      get transport_server_initialize_unix_dgram =>
          _library._transport_server_initialize_unix_dgramPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_server_t>)>>
      get transport_server_destroy => _library._transport_server_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get access => _library._accessPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>
      get faccessat => _library._faccessatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Long, ffi.Int)>>
      get lseek => _library._lseekPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get close =>
      _library._closePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get read => _library._readPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>
      get write => _library._writePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Long)>> get pread =>
      _library._preadPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(
                  ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Long)>>
      get pwrite => _library._pwritePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>
      get pipe => _library._pipePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>
      get alarm => _library._alarmPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>
      get sleep => _library._sleepPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.UnsignedInt)>>
      get ualarm => _library._ualarmPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>
      get usleep => _library._usleepPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get pause =>
      _library._pausePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.UnsignedInt)>>
      get chown => _library._chownPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.UnsignedInt, ffi.UnsignedInt)>>
      get fchown => _library._fchownPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.UnsignedInt)>>
      get lchown => _library._lchownPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.UnsignedInt, ffi.Int)>> get fchownat => _library._fchownatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get chdir => _library._chdirPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get fchdir =>
      _library._fchdirPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get getcwd => _library._getcwdPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get getwd =>
      _library._getwdPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get dup =>
      _library._dupPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get dup2 => _library._dup2Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> get execve =>
      _library._execvePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> get fexecve =>
      _library._fexecvePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get execv => _library._execvPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get execle => _library._execlePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get execl => _library._execlPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get execvp => _library._execvpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get execlp => _library._execlpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get nice =>
      _library._nicePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get pathconf => _library._pathconfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>
      get fpathconf => _library._fpathconfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Int)>> get sysconf =>
      _library._sysconfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get confstr => _library._confstrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getpid =>
      _library._getpidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getppid =>
      _library._getppidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getpgrp =>
      _library._getpgrpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get getpgid =>
      _library._getpgidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get setpgid => _library._setpgidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get setpgrp =>
      _library._setpgrpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get setsid =>
      _library._setsidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get getsid =>
      _library._getsidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function()>> get getuid =>
      _library._getuidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function()>> get geteuid =>
      _library._geteuidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function()>> get getgid =>
      _library._getgidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function()>> get getegid =>
      _library._getegidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.UnsignedInt>)>>
      get getgroups => _library._getgroupsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>
      get setuid => _library._setuidPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt)>> get setreuid =>
      _library._setreuidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>
      get seteuid => _library._seteuidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>
      get setgid => _library._setgidPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt)>> get setregid =>
      _library._setregidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>
      get setegid => _library._setegidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get fork =>
      _library._forkPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get vfork =>
      _library._vforkPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>
      get ttyname => _library._ttynamePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get ttyname_r => _library._ttyname_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get isatty =>
      _library._isattyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get ttyslot =>
      _library._ttyslotPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get link => _library._linkPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>> get linkat => _library._linkatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get symlink => _library._symlinkPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ssize_t Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get readlink => _library._readlinkPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      get symlinkat => _library._symlinkatPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>> get readlinkat => _library._readlinkatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get unlink => _library._unlinkPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get unlinkat => _library._unlinkatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get rmdir => _library._rmdirPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get tcgetpgrp =>
      _library._tcgetpgrpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get tcsetpgrp => _library._tcsetpgrpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      get getlogin => _library._getloginPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get getlogin_r => _library._getlogin_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get setlogin => _library._setloginPtr;
  ffi.Pointer<ffi.Pointer<ffi.Char>> get optarg => _library._optarg;
  ffi.Pointer<ffi.Int> get optind => _library._optind;
  ffi.Pointer<ffi.Int> get opterr => _library._opterr;
  ffi.Pointer<ffi.Int> get optopt => _library._optopt;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>> get getopt => _library._getoptPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get gethostname => _library._gethostnamePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get sethostname => _library._sethostnamePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Long)>> get sethostid =>
      _library._sethostidPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get getdomainname => _library._getdomainnamePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get setdomainname => _library._setdomainnamePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get vhangup =>
      _library._vhangupPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get revoke => _library._revokePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Size, ffi.Size,
              ffi.UnsignedInt)>> get profil => _library._profilPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get acct => _library._acctPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      get getusershell => _library._getusershellPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get endusershell =>
      _library._endusershellPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get setusershell =>
      _library._setusershellPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>
      get daemon => _library._daemonPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get chroot => _library._chrootPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get getpass =>
      _library._getpassPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get fsync =>
      _library._fsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function()>> get gethostid =>
      _library._gethostidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get sync1 =>
      _library._sync1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getpagesize =>
      _library._getpagesizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getdtablesize =>
      _library._getdtablesizePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Long)>>
      get truncate => _library._truncatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Long)>>
      get ftruncate => _library._ftruncatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      get brk => _library._brkPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.IntPtr)>>
      get sbrk => _library._sbrkPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Long)>> get syscall =>
      _library._syscallPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Long)>>
      get lockf => _library._lockfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get crypt =>
      _library._cryptPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      get getentropy => _library._getentropyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32)>> get strindex => _library._strindexPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Uint32)>> get strnindex => _library._strnindexPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      get close_all_xcpt => _library._close_all_xcptPtr;
  ffi.Pointer<
          ffi.NativeFunction<ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>)>>
      get fdprintf => _library._fdprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>
      get find_path => _library._find_pathPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get abspath =>
      _library._abspathPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get mkdirpath => _library._mkdirpathPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.LongLong)>>
      get int2str => _library._int2strPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get fpconv_check =>
      _library._fpconv_checkPtr;
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> get precision_fmts =>
      _library._precision_fmts;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strlcpy => _library._strlcpyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get strlcat => _library._strlcatPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>
      get utf8_check_printable => _library._utf8_check_printablePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>> get memmem => _library._memmemPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>> get memrchr =>
      _library._memrchrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>
      get gettimeofday => _library._gettimeofdayPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone1>)>>
      get settimeofday => _library._settimeofdayPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>
      get adjtime => _library._adjtimePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>)>>
      get getitimer => _library._getitimerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>>
      get setitimer => _library._setitimerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>
      get utimes => _library._utimesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>
      get lutimes => _library._lutimesPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>>
      get futimes => _library._futimesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      get json_escape => _library._json_escapePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Uint64, ffi.Int)>>
      get double_compare_uint64 => _library._double_compare_uint64Ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Int64, ffi.Int)>>
      get double_compare_nint64 => _library._double_compare_nint64Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>
      get thread_sleep => _library._thread_sleepPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get getenv_safe => _library._getenv_safePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<transport_listener_pool_t> Function()>>
      get transport_listener_pool_initialize =>
          _library._transport_listener_pool_initializePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_listener_pool_t>,
                  ffi.Pointer<transport_listener_t>)>>
      get transport_listener_pool_add =>
          _library._transport_listener_pool_addPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_listener_pool_t>,
                  ffi.Pointer<transport_listener_t>)>>
      get transport_listener_pool_remove =>
          _library._transport_listener_pool_removePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>> get transport_client_initialize_tcp =>
      _library._transport_client_initialize_tcpPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<transport_client_t> Function(
              ffi.Pointer<transport_client_configuration_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>> get transport_client_initialize_udp =>
      _library._transport_client_initialize_udpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<transport_client_t> Function(
                  ffi.Pointer<transport_client_configuration_t>,
                  ffi.Pointer<ffi.Char>)>>
      get transport_client_initialize_unix_stream =>
          _library._transport_client_initialize_unix_streamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<transport_client_t> Function(
                  ffi.Pointer<transport_client_configuration_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>
      get transport_client_initialize_unix_dgram =>
          _library._transport_client_initialize_unix_dgramPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<sockaddr> Function(ffi.Pointer<transport_client_t>)>>
      get transport_client_get_destination_address =>
          _library._transport_client_get_destination_addressPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_client_t>)>>
      get transport_client_destroy => _library._transport_client_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get acos =>
      _library._acosPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get asin =>
      _library._asinPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get atan =>
      _library._atanPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get atan2 => _library._atan2Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get cos =>
      _library._cosPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get sin =>
      _library._sinPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get tan =>
      _library._tanPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get cosh =>
      _library._coshPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get sinh =>
      _library._sinhPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get tanh =>
      _library._tanhPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get acosh =>
      _library._acoshPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get asinh =>
      _library._asinhPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get atanh =>
      _library._atanhPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get exp =>
      _library._expPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>> get frexp =>
      _library._frexpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>
      get ldexp => _library._ldexpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get log =>
      _library._logPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get log10 =>
      _library._log10Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>> get modf =>
      _library._modfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get expm1 =>
      _library._expm1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get log1p =>
      _library._log1pPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get logb =>
      _library._logbPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get exp2 =>
      _library._exp2Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get log2 =>
      _library._log2Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get pow => _library._powPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get sqrt =>
      _library._sqrtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get hypot => _library._hypotPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get cbrt =>
      _library._cbrtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get ceil =>
      _library._ceilPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get fabs =>
      _library._fabsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get floor =>
      _library._floorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get fmod => _library._fmodPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Double)>> get isinf =>
      _library._isinfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Double)>> get finite =>
      _library._finitePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get drem => _library._dremPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>
      get significand => _library._significandPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get copysign => _library._copysignPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>
      get nan => _library._nanPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Double)>> get isnan =>
      _library._isnanPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get j0 =>
      _library._j0Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get j1 =>
      _library._j1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>
      get jn => _library._jnPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get y0 =>
      _library._y0Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get y1 =>
      _library._y1Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>
      get yn => _library._ynPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get erf =>
      _library._erfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get erfc =>
      _library._erfcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get lgamma =>
      _library._lgammaPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get tgamma =>
      _library._tgammaPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get gamma =>
      _library._gammaPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>
      get lgamma_r => _library._lgamma_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get rint =>
      _library._rintPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get nextafter => _library._nextafterPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get remainder => _library._remainderPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>
      get scalbn => _library._scalbnPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Double)>> get ilogb =>
      _library._ilogbPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>
      get scalbln => _library._scalblnPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>
      get nearbyint => _library._nearbyintPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get round =>
      _library._roundPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double)>> get trunc =>
      _library._truncPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>> get remquo =>
      _library._remquoPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Double)>> get lrint =>
      _library._lrintPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>
      get llrint => _library._llrintPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Double)>> get lround =>
      _library._lroundPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>
      get llround => _library._llroundPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get fdim => _library._fdimPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get fmax => _library._fmaxPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get fmin => _library._fminPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>> get fma =>
      _library._fmaPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>
      get scalb => _library._scalbPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get acosf =>
      _library._acosfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get asinf =>
      _library._asinfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get atanf =>
      _library._atanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get atan2f => _library._atan2fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get cosf =>
      _library._cosfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get sinf =>
      _library._sinfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get tanf =>
      _library._tanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get coshf =>
      _library._coshfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get sinhf =>
      _library._sinhfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get tanhf =>
      _library._tanhfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get acoshf =>
      _library._acoshfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get asinhf =>
      _library._asinhfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get atanhf =>
      _library._atanhfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get expf =>
      _library._expfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>> get frexpf =>
      _library._frexpfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>
      get ldexpf => _library._ldexpfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get logf =>
      _library._logfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get log10f =>
      _library._log10fPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>> get modff =>
      _library._modffPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get expm1f =>
      _library._expm1fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get log1pf =>
      _library._log1pfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get logbf =>
      _library._logbfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get exp2f =>
      _library._exp2fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get log2f =>
      _library._log2fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get powf => _library._powfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get sqrtf =>
      _library._sqrtfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get hypotf => _library._hypotfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get cbrtf =>
      _library._cbrtfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get ceilf =>
      _library._ceilfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get fabsf =>
      _library._fabsfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get floorf =>
      _library._floorfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get fmodf => _library._fmodfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Float)>> get isinff =>
      _library._isinffPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Float)>> get finitef =>
      _library._finitefPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get dremf => _library._dremfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>
      get significandf => _library._significandfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get copysignf => _library._copysignfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>
      get nanf => _library._nanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Float)>> get isnanf =>
      _library._isnanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get j0f =>
      _library._j0fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get j1f =>
      _library._j1fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>
      get jnf => _library._jnfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get y0f =>
      _library._y0fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get y1f =>
      _library._y1fPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>
      get ynf => _library._ynfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get erff =>
      _library._erffPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get erfcf =>
      _library._erfcfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get lgammaf =>
      _library._lgammafPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get tgammaf =>
      _library._tgammafPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get gammaf =>
      _library._gammafPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>> get lgammaf_r =>
      _library._lgammaf_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get rintf =>
      _library._rintfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get nextafterf => _library._nextafterfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get remainderf => _library._remainderfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>
      get scalbnf => _library._scalbnfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Float)>> get ilogbf =>
      _library._ilogbfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>
      get scalblnf => _library._scalblnfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>
      get nearbyintf => _library._nearbyintfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get roundf =>
      _library._roundfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>> get truncf =>
      _library._truncfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>
      get remquof => _library._remquofPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Float)>> get lrintf =>
      _library._lrintfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>
      get llrintf => _library._llrintfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Float)>> get lroundf =>
      _library._lroundfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>
      get llroundf => _library._llroundfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get fdimf => _library._fdimfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get fmaxf => _library._fmaxfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get fminf => _library._fminfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>> get fmaf =>
      _library._fmafPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>
      get scalbf => _library._scalbfPtr;
  ffi.Pointer<ffi.Int> get signgam => _library._signgam;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<mh_i32_t> Function()>>
      get mh_i32_new => _library._mh_i32_newPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_i32_t>)>>
      get mh_i32_clear => _library._mh_i32_clearPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_i32_t>)>>
      get mh_i32_delete => _library._mh_i32_deletePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mh_i32_t>, ffi.Int32)>>
      get mh_i32_resize => _library._mh_i32_resizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<mh_i32_t>, mh_int_t, mh_int_t, ffi.Int32)>>
      get mh_i32_start_resize => _library._mh_i32_start_resizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<mh_i32_t>, mh_int_t, ffi.Int32)>>
      get mh_i32_reserve => _library._mh_i32_reservePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mh_i32_t>, mh_int_t, ffi.Int32)>>
      get mh_i32_del_resize => _library._mh_i32_del_resizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<mh_i32_t>)>>
      get mh_i32_memsize => _library._mh_i32_memsizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_i32_t>)>>
      get mh_i32_dump => _library._mh_i32_dumpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<mh_events_t> Function()>>
      get mh_events_new => _library._mh_events_newPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_events_t>)>>
      get mh_events_clear => _library._mh_events_clearPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_events_t>)>>
      get mh_events_delete => _library._mh_events_deletePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mh_events_t>, ffi.Uint64)>>
      get mh_events_resize => _library._mh_events_resizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<mh_events_t>, mh_int_t, mh_int_t, ffi.Uint64)>>
      get mh_events_start_resize => _library._mh_events_start_resizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<mh_events_t>, mh_int_t, ffi.Uint64)>>
      get mh_events_reserve => _library._mh_events_reservePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<mh_events_t>, mh_int_t, ffi.Uint64)>>
      get mh_events_del_resize => _library._mh_events_del_resizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<mh_events_t>)>>
      get mh_events_memsize => _library._mh_events_memsizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mh_events_t>)>>
      get mh_events_dump => _library._mh_events_dumpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<transport_worker_t> Function(
                  ffi.Pointer<transport_worker_configuration_t>, ffi.Uint8)>>
      get transport_worker_initialize =>
          _library._transport_worker_initializePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<transport_worker_t>, ffi.Uint16, ffi.Int64)>>
      get transport_worker_custom => _library._transport_worker_customPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Uint32,
              ffi.Int64,
              ffi.Uint16)>> get transport_worker_write =>
      _library._transport_worker_writePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Uint32,
              ffi.Int64,
              ffi.Uint16)>> get transport_worker_read =>
      _library._transport_worker_readPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Pointer<transport_client_t>,
              ffi.Int64)>> get transport_worker_connect =>
      _library._transport_worker_connectPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<transport_worker_t>,
              ffi.Pointer<transport_server_t>)>> get transport_worker_accept =>
      _library._transport_worker_acceptPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Pointer<sockaddr>,
              ffi.Int32,
              ffi.Int,
              ffi.Int64,
              ffi.Uint16)>> get transport_worker_send_message =>
      _library._transport_worker_send_messagePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Int32,
              ffi.Int,
              ffi.Int64,
              ffi.Uint16)>> get transport_worker_respond_message =>
      _library._transport_worker_respond_messagePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<transport_worker_t>,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Int32,
              ffi.Int,
              ffi.Int64,
              ffi.Uint16)>> get transport_worker_receive_message =>
      _library._transport_worker_receive_messagePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Int)>>
      get transport_worker_cancel_by_fd =>
          _library._transport_worker_cancel_by_fdPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_worker_t>)>>
      get transport_worker_check_event_timeouts =>
          _library._transport_worker_check_event_timeoutsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint64)>>
      get transport_worker_remove_event =>
          _library._transport_worker_remove_eventPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<transport_worker_t>)>>
      get transport_worker_get_buffer =>
          _library._transport_worker_get_bufferPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint16)>>
      get transport_worker_reuse_buffer =>
          _library._transport_worker_reuse_bufferPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint16)>>
      get transport_worker_release_buffer =>
          _library._transport_worker_release_bufferPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<sockaddr> Function(
                  ffi.Pointer<transport_worker_t>, ffi.Int32, ffi.Int)>>
      get transport_worker_get_endpoint_address =>
          _library._transport_worker_get_endpoint_addressPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint32, ffi.Pointer<ffi.Pointer<io_uring_cqe>>,
              ffi.Pointer<io_uring>)>> get transport_worker_peek =>
      _library._transport_worker_peekPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<transport_worker_t>)>>
      get transport_worker_destroy => _library._transport_worker_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<transport_t> Function(
                  ffi.Pointer<transport_listener_configuration_t>,
                  ffi.Pointer<transport_worker_configuration_t>,
                  ffi.Pointer<transport_worker_configuration_t>)>>
      get transport_initialize => _library._transport_initializePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<io_uring_cqe>> Function(ffi.Uint32)>>
      get transport_allocate_cqes => _library._transport_allocate_cqesPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<io_uring>, ffi.Int)>>
      get transport_cqe_advance => _library._transport_cqe_advancePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<transport_t>)>>
      get transport_destroy => _library._transport_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get transport_close_descritor => _library._transport_close_descritorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>
      get transport_get_kernel_error => _library._transport_get_kernel_errorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>
      get transport_file_open => _library._transport_file_openPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint16)>> get transport_socket_create_tcp =>
      _library._transport_socket_create_tcpPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint16,
              ffi.Pointer<ip_mreqn>,
              ffi.Uint32)>> get transport_socket_create_udp =>
      _library._transport_socket_create_udpPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int64 Function(
                  ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>
      get transport_socket_create_unix_stream =>
          _library._transport_socket_create_unix_streamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int64 Function(
                  ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>
      get transport_socket_create_unix_dgram =>
          _library._transport_socket_create_unix_dgramPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ip_mreqn> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get transport_socket_multicast_create_request =>
          _library._transport_socket_multicast_create_requestPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>> get transport_socket_multicast_add_membership =>
      _library._transport_socket_multicast_add_membershipPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>> get transport_socket_multicast_drop_membership =>
      _library._transport_socket_multicast_drop_membershipPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get transport_socket_multicast_add_source_membership =>
          _library._transport_socket_multicast_add_source_membershipPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get transport_socket_multicast_drop_source_membership =>
          _library._transport_socket_multicast_drop_source_membershipPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get transport_socket_get_interface_index =>
          _library._transport_socket_get_interface_indexPtr;
}

class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Size()
  external int iov_len;
}

class timeval extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Long> __fds_bits;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_internal_list __list;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

class __pthread_cond_s extends ffi.Struct {
  external UnnamedUnion1 unnamed;

  external UnnamedUnion1 unnamed1;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __wseq;

  external UnnamedStruct1 __wseq32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = ffi.UnsignedShort;

class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Size()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Size()
  external int msg_controllen;

  @ffi.Int()
  external int msg_flags;
}

typedef socklen_t = ffi.UnsignedInt;

class cmsghdr extends ffi.Opaque {}

class linger extends ffi.Struct {
  @ffi.Int()
  external int l_onoff;

  @ffi.Int()
  external int l_linger;
}

class osockaddr extends ffi.Struct {
  @ffi.UnsignedShort()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.UnsignedChar> sa_data;
}

typedef ssize_t = ffi.Long;

class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = ffi.Uint32;

class ip_opts extends ffi.Struct {
  external in_addr ip_dst;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> ip_opts1;
}

class ip_mreqn extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_address;

  @ffi.Int()
  external int imr_ifindex;
}

class in_pktinfo extends ffi.Struct {
  @ffi.Int()
  external int ipi_ifindex;

  external in_addr ipi_spec_dst;

  external in_addr ipi_addr;
}

class in6_addr extends ffi.Struct {
  external UnnamedUnion2 __in6_u;
}

class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> __u6_addr32;
}

class sockaddr_in extends ffi.Struct {
  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> sin_zero;
}

typedef in_port_t = ffi.Uint16;

class sockaddr_in6 extends ffi.Struct {
  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @ffi.Uint32()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @ffi.Uint32()
  external int sin6_scope_id;
}

class ip_mreq extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;
}

class ip_mreq_source extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;

  external in_addr imr_sourceaddr;
}

class ipv6_mreq extends ffi.Struct {
  external in6_addr ipv6mr_multiaddr;

  @ffi.UnsignedInt()
  external int ipv6mr_interface;
}

class group_req extends ffi.Struct {
  @ffi.Uint32()
  external int gr_interface;

  external sockaddr_storage gr_group;
}

class group_source_req extends ffi.Struct {
  @ffi.Uint32()
  external int gsr_interface;

  external sockaddr_storage gsr_group;

  external sockaddr_storage gsr_source;
}

class ip_msfilter extends ffi.Struct {
  external in_addr imsf_multiaddr;

  external in_addr imsf_interface;

  @ffi.Uint32()
  external int imsf_fmode;

  @ffi.Uint32()
  external int imsf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<in_addr> imsf_slist;
}

class group_filter extends ffi.Struct {
  @ffi.Uint32()
  external int gf_interface;

  external sockaddr_storage gf_group;

  @ffi.Uint32()
  external int gf_fmode;

  @ffi.Uint32()
  external int gf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<sockaddr_storage> gf_slist;
}

class stat extends ffi.Struct {
  @ffi.UnsignedLong()
  external int st_dev;

  @ffi.UnsignedLong()
  external int st_ino;

  @ffi.UnsignedLong()
  external int st_nlink;

  @ffi.UnsignedInt()
  external int st_mode;

  @ffi.UnsignedInt()
  external int st_uid;

  @ffi.UnsignedInt()
  external int st_gid;

  @ffi.Int()
  external int __pad0;

  @ffi.UnsignedLong()
  external int st_rdev;

  @ffi.Long()
  external int st_size;

  @ffi.Long()
  external int st_blksize;

  @ffi.Long()
  external int st_blocks;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Long> __glibc_reserved;
}

class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

class siginfo_t extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @ffi.Int()
  external int __pad0;

  external UnnamedUnion3 _sifields;
}

class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([28])
  external ffi.Array<ffi.Int> _pad;

  external UnnamedStruct2 _kill;

  external UnnamedStruct3 _timer;

  external UnnamedStruct4 _rt;

  external UnnamedStruct5 _sigchld;

  external UnnamedStruct6 _sigfault;

  external UnnamedStruct8 _sigpoll;

  external UnnamedStruct9 _sigsys;
}

class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int()
  external int si_pid;

  @ffi.UnsignedInt()
  external int si_uid;
}

class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int()
  external int si_tid;

  @ffi.Int()
  external int si_overrun;

  external sigval si_sigval;
}

class UnnamedStruct4 extends ffi.Struct {
  @ffi.Int()
  external int si_pid;

  @ffi.UnsignedInt()
  external int si_uid;

  external sigval si_sigval;
}

class UnnamedStruct5 extends ffi.Struct {
  @ffi.Int()
  external int si_pid;

  @ffi.UnsignedInt()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  @ffi.Long()
  external int si_utime;

  @ffi.Long()
  external int si_stime;
}

class UnnamedStruct6 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> si_addr;

  @ffi.Short()
  external int si_addr_lsb;

  external UnnamedUnion4 _bounds;
}

class UnnamedUnion4 extends ffi.Union {
  external UnnamedStruct7 _addr_bnd;

  @ffi.UnsignedInt()
  external int _pkey;
}

class UnnamedStruct7 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _lower;

  external ffi.Pointer<ffi.Void> _upper;
}

class UnnamedStruct8 extends ffi.Struct {
  @ffi.Long()
  external int si_band;

  @ffi.Int()
  external int si_fd;
}

class UnnamedStruct9 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _call_addr;

  @ffi.Int()
  external int _syscall;

  @ffi.UnsignedInt()
  external int _arch;
}

class sigevent extends ffi.Struct {
  external sigval sigev_value;

  @ffi.Int()
  external int sigev_signo;

  @ffi.Int()
  external int sigev_notify;

  external UnnamedUnion5 _sigev_un;
}

class UnnamedUnion5 extends ffi.Union {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Int> _pad;

  @ffi.Int()
  external int _tid;

  external UnnamedStruct10 _sigev_thread;
}

class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>> _function;

  external ffi.Pointer<pthread_attr_t> _attribute;
}

typedef sigset_t = __sigset_t;

class sigaction extends ffi.Struct {
  external UnnamedUnion6 __sigaction_handler;

  external __sigset_t sa_mask;

  @ffi.Int()
  external int sa_flags;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> sa_restorer;
}

class UnnamedUnion6 extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>>
      sa_sigaction;
}

class sigcontext extends ffi.Struct {
  @ffi.UnsignedLong()
  external int r8;

  @ffi.UnsignedLong()
  external int r9;

  @ffi.UnsignedLong()
  external int r10;

  @ffi.UnsignedLong()
  external int r11;

  @ffi.UnsignedLong()
  external int r12;

  @ffi.UnsignedLong()
  external int r13;

  @ffi.UnsignedLong()
  external int r14;

  @ffi.UnsignedLong()
  external int r15;

  @ffi.UnsignedLong()
  external int rdi;

  @ffi.UnsignedLong()
  external int rsi;

  @ffi.UnsignedLong()
  external int rbp;

  @ffi.UnsignedLong()
  external int rbx;

  @ffi.UnsignedLong()
  external int rdx;

  @ffi.UnsignedLong()
  external int rax;

  @ffi.UnsignedLong()
  external int rcx;

  @ffi.UnsignedLong()
  external int rsp;

  @ffi.UnsignedLong()
  external int rip;

  @ffi.UnsignedLong()
  external int eflags;

  @ffi.UnsignedShort()
  external int cs;

  @ffi.UnsignedShort()
  external int gs;

  @ffi.UnsignedShort()
  external int fs;

  @ffi.UnsignedShort()
  external int __pad0;

  @ffi.UnsignedLong()
  external int err;

  @ffi.UnsignedLong()
  external int trapno;

  @ffi.UnsignedLong()
  external int oldmask;

  @ffi.UnsignedLong()
  external int cr2;

  external UnnamedUnion7 unnamed;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedLong> __reserved1;
}

class UnnamedUnion7 extends ffi.Union {
  external ffi.Pointer<_fpstate> fpstate;

  @ffi.UnsignedLong()
  external int __fpstate_word;
}

class _fpstate extends ffi.Struct {
  @ffi.UnsignedShort()
  external int cwd;

  @ffi.UnsignedShort()
  external int swd;

  @ffi.UnsignedShort()
  external int ftw;

  @ffi.UnsignedShort()
  external int fop;

  @ffi.UnsignedLong()
  external int rip;

  @ffi.UnsignedLong()
  external int rdp;

  @ffi.UnsignedInt()
  external int mxcsr;

  @ffi.UnsignedInt()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<ffi.UnsignedInt> __glibc_reserved1;
}

class _fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

class _xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> element;
}

class stack_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_flags;

  @ffi.Size()
  external int ss_size;
}

class mcontext_t extends ffi.Struct {
  @ffi.Array.multi([23])
  external ffi.Array<greg_t> gregs;

  external fpregset_t fpregs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedLongLong> __reserved1;
}

typedef greg_t = ffi.LongLong;
typedef fpregset_t = ffi.Pointer<_libc_fpstate>;

class _libc_fpstate extends ffi.Struct {
  @ffi.UnsignedShort()
  external int cwd;

  @ffi.UnsignedShort()
  external int swd;

  @ffi.UnsignedShort()
  external int ftw;

  @ffi.UnsignedShort()
  external int fop;

  @ffi.UnsignedLong()
  external int rip;

  @ffi.UnsignedLong()
  external int rdp;

  @ffi.UnsignedInt()
  external int mxcsr;

  @ffi.UnsignedInt()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_libc_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_libc_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<ffi.UnsignedInt> __glibc_reserved1;
}

class _libc_fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

class _libc_xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> element;
}

class ucontext_t extends ffi.Struct {
  @ffi.UnsignedLong()
  external int uc_flags;

  external ffi.Pointer<ucontext_t> uc_link;

  external stack_t uc_stack;

  external mcontext_t uc_mcontext;

  external sigset_t uc_sigmask;

  external _libc_fpstate __fpregs_mem;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedLongLong> __ssp;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

typedef pthread_t = ffi.UnsignedLong;

class imaxdiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

typedef intmax_t = ffi.Long;
typedef uintmax_t = ffi.UnsignedLong;

class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

typedef clock_t = ffi.Long;
typedef time_t = ffi.Long;
typedef locale_t = ffi.Pointer<__locale_struct>;

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

class __locale_data extends ffi.Opaque {}

typedef clockid_t = ffi.Int;
typedef pid_t = ffi.Int;
typedef timer_t = ffi.Pointer<ffi.Void>;

class open_how extends ffi.Struct {
  @ffi.Uint64()
  external int flags;

  @ffi.Uint64()
  external int mode;

  @ffi.Uint64()
  external int resolve;
}

class fscrypt_policy_v1 extends ffi.Struct {
  @ffi.UnsignedChar()
  external int version;

  @ffi.UnsignedChar()
  external int contents_encryption_mode;

  @ffi.UnsignedChar()
  external int filenames_encryption_mode;

  @ffi.UnsignedChar()
  external int flags;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> master_key_descriptor;
}

class fscrypt_key extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mode;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.UnsignedChar> raw;

  @ffi.UnsignedInt()
  external int size;
}

class fscrypt_policy_v2 extends ffi.Struct {
  @ffi.UnsignedChar()
  external int version;

  @ffi.UnsignedChar()
  external int contents_encryption_mode;

  @ffi.UnsignedChar()
  external int filenames_encryption_mode;

  @ffi.UnsignedChar()
  external int flags;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> __reserved;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> master_key_identifier;
}

class fscrypt_get_policy_ex_arg extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int policy_size;

  external UnnamedUnion8 policy;
}

class UnnamedUnion8 extends ffi.Union {
  @ffi.UnsignedChar()
  external int version;

  external fscrypt_policy_v1 v1;

  external fscrypt_policy_v2 v2;
}

class fscrypt_key_specifier extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  @ffi.UnsignedInt()
  external int __reserved;

  external UnnamedUnion9 u;
}

class UnnamedUnion9 extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> __reserved;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> descriptor;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> identifier;
}

class fscrypt_provisioning_key_payload extends ffi.Opaque {}

class fscrypt_add_key_arg extends ffi.Opaque {}

class fscrypt_remove_key_arg extends ffi.Struct {
  external fscrypt_key_specifier key_spec;

  @ffi.UnsignedInt()
  external int removal_status_flags;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedInt> __reserved;
}

class fscrypt_get_key_status_arg extends ffi.Struct {
  external fscrypt_key_specifier key_spec;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.UnsignedInt> __reserved;

  @ffi.UnsignedInt()
  external int status;

  @ffi.UnsignedInt()
  external int status_flags;

  @ffi.UnsignedInt()
  external int user_count;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.UnsignedInt> __out_reserved;
}

abstract class fsconfig_command {
  static const int FSCONFIG_SET_FLAG = 0;
  static const int FSCONFIG_SET_STRING = 1;
  static const int FSCONFIG_SET_BINARY = 2;
  static const int FSCONFIG_SET_PATH = 3;
  static const int FSCONFIG_SET_PATH_EMPTY = 4;
  static const int FSCONFIG_SET_FD = 5;
  static const int FSCONFIG_CMD_CREATE = 6;
  static const int FSCONFIG_CMD_RECONFIGURE = 7;
}

class fstrim_range extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int start;

  @ffi.UnsignedLongLong()
  external int len;

  @ffi.UnsignedLongLong()
  external int minlen;
}

class files_stat_struct extends ffi.Struct {
  @ffi.UnsignedLong()
  external int nr_files;

  @ffi.UnsignedLong()
  external int nr_free_files;

  @ffi.UnsignedLong()
  external int max_files;
}

class inodes_stat_t extends ffi.Struct {
  @ffi.Long()
  external int nr_inodes;

  @ffi.Long()
  external int nr_unused;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Long> dummy;
}

class fsxattr extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fsx_xflags;

  @ffi.UnsignedInt()
  external int fsx_extsize;

  @ffi.UnsignedInt()
  external int fsx_nextents;

  @ffi.UnsignedInt()
  external int fsx_projid;

  @ffi.UnsignedInt()
  external int fsx_cowextsize;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> fsx_pad;
}

class io_uring_sqe extends ffi.Struct {
  @ffi.UnsignedChar()
  external int opcode;

  @ffi.UnsignedChar()
  external int flags;

  @ffi.UnsignedShort()
  external int ioprio;

  @ffi.Int()
  external int fd;

  external UnnamedUnion10 unnamed;

  external UnnamedUnion10 unnamed1;

  @ffi.UnsignedInt()
  external int len;

  external UnnamedUnion10 unnamed2;

  @ffi.UnsignedLongLong()
  external int user_data;

  external UnnamedUnion10 unnamed3;
}

class UnnamedUnion10 extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int off;

  @ffi.UnsignedLongLong()
  external int addr2;
}

class io_uring_cqe extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int user_data;

  @ffi.Int()
  external int res;

  @ffi.UnsignedInt()
  external int flags;
}

class io_sqring_offsets extends ffi.Struct {
  @ffi.UnsignedInt()
  external int head;

  @ffi.UnsignedInt()
  external int tail;

  @ffi.UnsignedInt()
  external int ring_mask;

  @ffi.UnsignedInt()
  external int ring_entries;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.UnsignedInt()
  external int dropped;

  @ffi.UnsignedInt()
  external int array;

  @ffi.UnsignedInt()
  external int resv1;

  @ffi.UnsignedLongLong()
  external int resv2;
}

class io_cqring_offsets extends ffi.Struct {
  @ffi.UnsignedInt()
  external int head;

  @ffi.UnsignedInt()
  external int tail;

  @ffi.UnsignedInt()
  external int ring_mask;

  @ffi.UnsignedInt()
  external int ring_entries;

  @ffi.UnsignedInt()
  external int overflow;

  @ffi.UnsignedInt()
  external int cqes;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.UnsignedInt()
  external int resv1;

  @ffi.UnsignedLongLong()
  external int resv2;
}

class io_uring_params extends ffi.Struct {
  @ffi.UnsignedInt()
  external int sq_entries;

  @ffi.UnsignedInt()
  external int cq_entries;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.UnsignedInt()
  external int sq_thread_cpu;

  @ffi.UnsignedInt()
  external int sq_thread_idle;

  @ffi.UnsignedInt()
  external int features;

  @ffi.UnsignedInt()
  external int wq_fd;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedInt> resv;

  external io_sqring_offsets sq_off;

  external io_cqring_offsets cq_off;
}

class io_uring_files_update extends ffi.Struct {
  @ffi.UnsignedInt()
  external int offset;

  @ffi.UnsignedInt()
  external int resv;

  @ffi.UnsignedLongLong()
  external int fds;
}

class io_uring_probe_op extends ffi.Struct {
  @ffi.UnsignedChar()
  external int op;

  @ffi.UnsignedChar()
  external int resv;

  @ffi.UnsignedShort()
  external int flags;

  @ffi.UnsignedInt()
  external int resv2;
}

abstract class memory_order {
  static const int memory_order_relaxed = 0;
  static const int memory_order_consume = 1;
  static const int memory_order_acquire = 2;
  static const int memory_order_release = 3;
  static const int memory_order_acq_rel = 4;
  static const int memory_order_seq_cst = 5;
}

class atomic_flag extends ffi.Opaque {}

class io_uring_sq extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedInt> khead;

  external ffi.Pointer<ffi.UnsignedInt> ktail;

  external ffi.Pointer<ffi.UnsignedInt> kring_mask;

  external ffi.Pointer<ffi.UnsignedInt> kring_entries;

  external ffi.Pointer<ffi.UnsignedInt> kflags;

  external ffi.Pointer<ffi.UnsignedInt> kdropped;

  external ffi.Pointer<ffi.UnsignedInt> array;

  external ffi.Pointer<io_uring_sqe> sqes;

  @ffi.UnsignedInt()
  external int sqe_head;

  @ffi.UnsignedInt()
  external int sqe_tail;

  @ffi.Size()
  external int ring_sz;

  external ffi.Pointer<ffi.Void> ring_ptr;
}

class io_uring_cq extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedInt> khead;

  external ffi.Pointer<ffi.UnsignedInt> ktail;

  external ffi.Pointer<ffi.UnsignedInt> kring_mask;

  external ffi.Pointer<ffi.UnsignedInt> kring_entries;

  external ffi.Pointer<ffi.UnsignedInt> kflags;

  external ffi.Pointer<ffi.UnsignedInt> koverflow;

  external ffi.Pointer<io_uring_cqe> cqes;

  @ffi.Size()
  external int ring_sz;

  external ffi.Pointer<ffi.Void> ring_ptr;
}

class io_uring extends ffi.Struct {
  external io_uring_sq sq;

  external io_uring_cq cq;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Int()
  external int ring_fd;
}

class statx extends ffi.Opaque {}

class epoll_event extends ffi.Opaque {}

typedef FILE = _IO_FILE;

class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @ffi.Long()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Long()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

class _IO_marker extends ffi.Opaque {}

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef fpos_t = _G_fpos_t;

class _G_fpos_t extends ffi.Struct {
  @ffi.Long()
  external int __pos;

  external __mbstate_t __state;
}

class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion11 __value;
}

class UnnamedUnion11 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

/// @module Input buffer.
class slab_cache extends ffi.Struct {
  external ffi.Pointer<slab_arena> arena;

  @ffi.Uint32()
  external int order0_size;

  @ffi.Uint8()
  external int order0_size_lb;

  @ffi.Uint8()
  external int order_max;

  /// All allocated slabs used in the cache.
  /// The stats reflect the total used/allocated
  /// memory in the cache.
  external slab_list allocated;

  @ffi.Array.multi([17])
  external ffi.Array<slab_list> orders;

  @pthread_t()
  external int thread_id;
}

/// slab_arena -- a source of large aligned blocks of memory.
/// MT-safe.
/// Uses a lock-free LIFO to maintain a cache of used slabs.
/// Uses a lock-free quota to limit allocating memory.
/// Never returns memory to the operating system.
class slab_arena extends ffi.Struct {
  /// A lock free list of cached slabs.
  /// Initially there are no cached slabs, only arena.
  /// As slabs are used and returned to arena, the cache is
  /// used to recycle them.
  external lf_lifo cache;

  /// A preallocated arena of size = prealloc.
  external ffi.Pointer<ffi.Void> arena;

  /// How much memory is preallocated during initialization
  /// of slab_arena.
  @ffi.Size()
  external int prealloc;

  /// How much memory in the arena has
  /// already been initialized for slabs.
  @ffi.Size()
  external int used;

  /// An external quota to which we must adhere.
  /// A quota exists to set a common limit on two arenas.
  external ffi.Pointer<quota> arena_quota;

  @ffi.Uint32()
  external int slab_size;

  /// SLAB_ARENA_ flags for mmap() and madvise() calls.
  @ffi.Int()
  external int flags;
}

/// A very primitive implementation of lock-free
/// LIFO (last in first out, AKA stack, AKA single-linked
/// list with head-only add and remove).
///
/// It is only usable to store free pages of a memory allocator
/// or similar, since it assumes that all addresses are aligned,
/// and lower 16 bits of address can be used as a counter-based
/// solution for ABA problem.
class lf_lifo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> next;
}

class quota extends ffi.Opaque {}

/// A general purpose list of slabs. Is used
/// to store unused slabs of a certain order in the
/// slab cache, as well as to contain allocated
/// slabs of a specialized allocator.
class slab_list extends ffi.Struct {
  external rlist slabs;

  /// Total/used bytes in this list.
  external small_stats stats;
}

/// list entry and head structure
class rlist extends ffi.Struct {
  external ffi.Pointer<rlist> prev;

  external ffi.Pointer<rlist> next;
}

/// Allocation statistics.
class small_stats extends ffi.Struct {
  @ffi.Size()
  external int used;

  @ffi.Size()
  external int total;
}

class ibuf extends ffi.Struct {
  external ffi.Pointer<slab_cache> slabc;

  external ffi.Pointer<ffi.Char> buf;

  /// Start of input.
  external ffi.Pointer<ffi.Char> rpos;

  /// End of useful input
  external ffi.Pointer<ffi.Char> wpos;

  /// End of buffer.
  external ffi.Pointer<ffi.Char> end;

  @ffi.Size()
  external int start_capacity;
}

/// Output buffer savepoint. It's possible to
/// save the current buffer state in a savepoint
/// and roll back to the saved state at any time
/// before obuf_reset()
class obuf_svp extends ffi.Struct {
  @ffi.Size()
  external int pos;

  @ffi.Size()
  external int iov_len;

  @ffi.Size()
  external int used;
}

/// An output buffer is a vector of struct iovec
/// for writev().
/// Each iovec buffer is allocated using slab allocator.
/// Buffer size grows by a factor of 2. With this growth factor,
/// the number of used buffers is unlikely to ever exceed the
/// hard limit of SMALL_OBUF_IOV_MAX. If it does, an exception is
/// raised.
class obuf extends ffi.Struct {
  external ffi.Pointer<slab_cache> slabc;

  /// Position of the "current" iovec.
  @ffi.Int()
  external int pos;

  @ffi.Int()
  external int n_iov;

  @ffi.Size()
  external int used;

  /// iov[0] size (allocations are normally a multiple of this number),
  /// but can be larger if a large chunk is requested by
  /// obuf_reserve().
  @ffi.Size()
  external int start_capacity;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Size> capacity;

  @ffi.Array.multi([32])
  external ffi.Array<iovec> iov;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

abstract class pm_memory_order {
  static const int pm_memory_order_relaxed = 0;
  static const int pm_memory_order_consume = 1;
  static const int pm_memory_order_acquire = 2;
  static const int pm_memory_order_release = 3;
  static const int pm_memory_order_acq_rel = 4;
  static const int pm_memory_order_seq_cst = 5;
}

typedef mode_t = ffi.UnsignedInt;

class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __bits;
}

typedef pthread_once_t = ffi.Int;
typedef pthread_key_t = ffi.UnsignedInt;

class slab extends ffi.Struct {
  external rlist next_in_cache;

  /// Next slab in slab_list->slabs list.
  external rlist next_in_list;

  /// Allocated size.
  /// Is different from (SLAB_MIN_SIZE << slab->order)
  /// when requested size is bigger than SLAB_MAX_SIZE
  /// (i.e. slab->order is SLAB_CLASS_LAST).
  @ffi.Size()
  external int size;

  /// Slab magic (for sanity checks).
  @ffi.Uint32()
  external int magic;

  /// Base of lb(size) for ordered slabs.
  @ffi.Uint8()
  external int order;

  /// Only used for buddy slabs. If the buddy of the current
  /// free slab is also free, both slabs are merged and
  /// a free slab of the higher order emerges.
  /// Value of 0 means the slab is free. Otherwise
  /// slab->in_use is set to slab->order + 1.
  @ffi.Uint8()
  external int in_use;
}

class lifo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> next;
}

/// mslab - a standard slab formatted to store objects of equal size.
class mslab extends ffi.Struct {
  external slab slab1;

  external ffi.Pointer<ffi.Void> free_list;

  /// Offset of an object that has never been allocated in mslab
  @ffi.Uint32()
  external int free_offset;

  /// Number of available slots in the slab.
  @ffi.Uint32()
  external int nfree;

  /// Used if this slab is a member of hot_slabs tree.
  external UnnamedStruct11 next_in_hot;

  /// Next slab in stagged slabs list in mempool object
  external rlist next_in_cold;

  /// Set if this slab is a member of hot_slabs tree
  @ffi.Bool()
  external bool in_hot_slabs;
}

class UnnamedStruct11 extends ffi.Struct {
  external ffi.Pointer<mslab> rbn_left;

  external ffi.Pointer<mslab> rbn_right_red;
}

class mslab_tree_t extends ffi.Struct {
  external ffi.Pointer<mslab> rbt_root;
}

/// A memory pool.
class mempool extends ffi.Struct {
  /// A link in delayed free list of pools. Must be the first
  /// member in the struct.
  /// @sa smfree_delayed().
  external lifo link;

  /// List of pointers for delayed free.
  external lifo delayed;

  /// The source of empty slabs.
  external ffi.Pointer<slab_cache> cache;

  /// All slabs.
  external slab_list slabs;

  /// Slabs with some amount of free space available are put
  /// into this red-black tree, which is sorted by slab
  /// address. A (partially) free slab with the smallest
  /// address is chosen for allocation. This reduces internal
  /// memory fragmentation across many slabs.
  external mslab_tree_t hot_slabs;

  /// Cached leftmost node of hot_slabs tree.
  external ffi.Pointer<mslab> first_hot_slab;

  /// Slabs with a little of free items count, staged to
  /// be added to hot_slabs tree. Are  used in case the
  /// tree is empty or the allocator runs out of memory.
  external rlist cold_slabs;

  /// A completely empty slab which is not freed only to
  /// avoid the overhead of slab_cache oscillation around
  /// a single element allocation.
  external ffi.Pointer<mslab> spare;

  /// The size of an individual object. All objects
  /// allocated on the pool have the same size.
  @ffi.Uint32()
  external int objsize;

  /// Mempool slabs are ordered (@sa slab_cache.h for
  /// definition of "ordered"). The order is calculated
  /// when the pool is initialized or is set explicitly.
  /// The latter is necessary for 'small' allocator,
  /// which needs to quickly find mempool containing
  /// an allocated object when the object is freed.
  @ffi.Uint8()
  external int slab_order;

  /// How many objects can fit in a slab.
  @ffi.Uint32()
  external int objcount;

  /// Offset from beginning of slab to the first object
  @ffi.Uint32()
  external int offset;

  /// Address mask to translate ptr to slab
  @ffi.IntPtr()
  external int slab_ptr_mask;
}

/// Allocation statistics.
class mempool_stats extends ffi.Struct {
  /// Object size.
  @ffi.Uint32()
  external int objsize;

  /// Total objects allocated.
  @ffi.Uint32()
  external int objcount;

  /// Size of the slab.
  @ffi.Uint32()
  external int slabsize;

  /// Number of slabs. All slabs are of the same size.
  @ffi.Uint32()
  external int slabcount;

  /// Memory used and booked but passive (to see fragmentation).
  external small_stats totals;
}

class small_class extends ffi.Struct {
  /// Every class size must be a multiple of this.
  @ffi.UnsignedInt()
  external int granularity;

  /// log2(granularity), ignore those number of the lowest bit of size.
  @ffi.UnsignedInt()
  external int ignore_bits_count;

  /// A number of bits (after the most significant bit) that are used in
  /// size class evaluation ('n' in the Explanation above).
  @ffi.UnsignedInt()
  external int effective_bits;

  /// 1u << effective_bits.
  @ffi.UnsignedInt()
  external int effective_size;

  /// effective_size - 1u.
  @ffi.UnsignedInt()
  external int effective_mask;

  /// By default the lowest possible allocation size (aka class size of
  /// class 0) is granularity. If a user wants different min_alloc, we
  /// simply shift sizes; min_alloc = granularity + size_shift.
  @ffi.UnsignedInt()
  external int size_shift;

  /// Actually we need 'size_shift + 1', so store it.
  @ffi.UnsignedInt()
  external int size_shift_plus_1;

  /// Exponential factor, approximation of which we managed to provide.
  /// It is calculated from requested_factor, it's guaranteed that
  /// it must be in range [requested_factor/k, requested_factor*k],
  /// where k = pow(requested_factor, 0.5).
  @ffi.Float()
  external double actual_factor;
}

abstract class small_opt {
  static const int SMALL_DELAYED_FREE_MODE = 0;
}

/// A mempool to store objects sized within one multiple of
/// alloc_factor. Is a member of the red-black tree which
/// contains all such pools.
///
/// Example: let's assume alloc_factor is 1.1. There will be an
/// instance of factor_pool for objects of size from 300 to 330,
/// from 330 to 363, and so on.
class factor_pool extends ffi.Struct {
  /// the pool itself.
  external mempool pool;

  /// Objects starting from this size and up to
  /// pool->objsize are stored in this factored
  /// pool.
  @ffi.Size()
  external int objsize_min;
}

/// Free mode
abstract class small_free_mode {
  /// Free objects immediately.
  static const int SMALL_FREE = 0;

  /// Collect garbage after delayed free.
  static const int SMALL_COLLECT_GARBAGE = 1;

  /// Postpone deletion of objects.
  static const int SMALL_DELAYED_FREE = 2;
}

/// A slab allocator for a wide range of object sizes.
class small_alloc extends ffi.Struct {
  external ffi.Pointer<slab_cache> cache;

  @ffi.Array.multi([1024])
  external ffi.Array<factor_pool> factor_pool_cache;

  @ffi.Uint32()
  external int factor_pool_cache_size;

  /// List of mempool which objects to be freed if delayed free mode.
  external lifo delayed;

  /// List of large allocations by malloc() to be freed in delayed mode.
  external lifo delayed_large;

  /// The factor used for factored pools. Must be > 1.
  /// Is provided during initialization.
  @ffi.Float()
  external double factor;

  /// Small class for this allocator
  external small_class small_class1;

  @ffi.Uint32()
  external int objsize_max;

  /// Free mode.
  @ffi.Int32()
  external int free_mode;
}

typedef mempool_stats_cb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<mempool_stats>, ffi.Pointer<ffi.Void>)>>;
typedef Dart_WeakPersistentHandle = ffi.Pointer<_Dart_WeakPersistentHandle>;

class _Dart_WeakPersistentHandle extends ffi.Opaque {}

typedef Dart_HandleFinalizer = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef Dart_FinalizableHandle = ffi.Pointer<_Dart_FinalizableHandle>;

class _Dart_FinalizableHandle extends ffi.Opaque {}

class Dart_IsolateFlags extends ffi.Struct {
  @ffi.Int32()
  external int version;

  @ffi.Bool()
  external bool enable_asserts;

  @ffi.Bool()
  external bool use_field_guards;

  @ffi.Bool()
  external bool use_osr;

  @ffi.Bool()
  external bool obfuscate;

  @ffi.Bool()
  external bool load_vmservice_library;

  @ffi.Bool()
  external bool copy_parent_code;

  @ffi.Bool()
  external bool null_safety;

  @ffi.Bool()
  external bool is_system_isolate;

  @ffi.Bool()
  external bool snapshot_is_dontneed_safe;

  @ffi.Bool()
  external bool branch_coverage;
}

/// Forward declaration
class Dart_CodeObserver extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external Dart_OnNewCodeCallback on_new_code;
}

/// Callback provided by the embedder that is used by the VM to notify on code
/// object creation, *before* it is invoked the first time.
/// This is useful for embedders wanting to e.g. keep track of PCs beyond
/// the lifetime of the garbage collected code objects.
/// Note that an address range may be used by more than one code object over the
/// lifecycle of a process. Clients of this function should record timestamps for
/// these compilation events and when collecting PCs to disambiguate reused
/// address ranges.
typedef Dart_OnNewCodeCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<Dart_CodeObserver>, ffi.Pointer<ffi.Char>,
            ffi.UintPtr, ffi.UintPtr)>>;

/// Describes how to initialize the VM. Used with Dart_Initialize.
class Dart_InitializeParams extends ffi.Struct {
  /// Identifies the version of the struct used by the client.
  /// should be initialized to DART_INITIALIZE_PARAMS_CURRENT_VERSION.
  @ffi.Int32()
  external int version;

  /// A buffer containing snapshot data, or NULL if no snapshot is provided.
  ///
  /// If provided, the buffer must remain valid until Dart_Cleanup returns.
  external ffi.Pointer<ffi.Uint8> vm_snapshot_data;

  /// A buffer containing a snapshot of precompiled instructions, or NULL if
  /// no snapshot is provided.
  ///
  /// If provided, the buffer must remain valid until Dart_Cleanup returns.
  external ffi.Pointer<ffi.Uint8> vm_snapshot_instructions;

  /// A function to be called during isolate group creation.
  /// See Dart_IsolateGroupCreateCallback.
  external Dart_IsolateGroupCreateCallback create_group;

  /// A function to be called during isolate
  /// initialization inside an existing isolate group.
  /// See Dart_InitializeIsolateCallback.
  external Dart_InitializeIsolateCallback initialize_isolate;

  /// A function to be called right before an isolate is shutdown.
  /// See Dart_IsolateShutdownCallback.
  external Dart_IsolateShutdownCallback shutdown_isolate;

  /// A function to be called after an isolate was shutdown.
  /// See Dart_IsolateCleanupCallback.
  external Dart_IsolateCleanupCallback cleanup_isolate;

  /// A function to be called after an isolate group is
  /// shutdown. See Dart_IsolateGroupCleanupCallback.
  external Dart_IsolateGroupCleanupCallback cleanup_group;

  external Dart_ThreadStartCallback thread_start;

  external Dart_ThreadExitCallback thread_exit;

  external Dart_FileOpenCallback file_open;

  external Dart_FileReadCallback file_read;

  external Dart_FileWriteCallback file_write;

  external Dart_FileCloseCallback file_close;

  external Dart_EntropySource entropy_source;

  /// A function to be called by the service isolate when it requires the
  /// vmservice assets archive. See Dart_GetVMServiceAssetsArchive.
  external Dart_GetVMServiceAssetsArchive get_service_assets;

  @ffi.Bool()
  external bool start_kernel_isolate;

  /// An external code observer callback function. The observer can be invoked
  /// as early as during the Dart_Initialize() call.
  external ffi.Pointer<Dart_CodeObserver> code_observer;

  /// Kernel blob registration callback function. See Dart_RegisterKernelBlobCallback.
  external Dart_RegisterKernelBlobCallback register_kernel_blob;

  /// Kernel blob unregistration callback function. See Dart_UnregisterKernelBlobCallback.
  external Dart_UnregisterKernelBlobCallback unregister_kernel_blob;
}

/// An isolate creation and initialization callback function.
///
/// This callback, provided by the embedder, is called when the VM
/// needs to create an isolate. The callback should create an isolate
/// by calling Dart_CreateIsolateGroup and load any scripts required for
/// execution.
///
/// This callback may be called on a different thread than the one
/// running the parent isolate.
///
/// When the function returns NULL, it is the responsibility of this
/// function to ensure that Dart_ShutdownIsolate has been called if
/// required (for example, if the isolate was created successfully by
/// Dart_CreateIsolateGroup() but the root library fails to load
/// successfully, then the function should call Dart_ShutdownIsolate
/// before returning).
///
/// When the function returns NULL, the function should set *error to
/// a malloc-allocated buffer containing a useful error message.  The
/// caller of this function (the VM) will make sure that the buffer is
/// freed.
///
/// \param script_uri The uri of the main source file or snapshot to load.
/// Either the URI of the parent isolate set in Dart_CreateIsolateGroup for
/// Isolate.spawn, or the argument to Isolate.spawnUri canonicalized by the
/// library tag handler of the parent isolate.
/// The callback is responsible for loading the program by a call to
/// Dart_LoadScriptFromKernel.
/// \param main The name of the main entry point this isolate will
/// eventually run.  This is provided for advisory purposes only to
/// improve debugging messages.  The main function is not invoked by
/// this function.
/// \param package_root Ignored.
/// \param package_config Uri of the package configuration file (either in format
/// of .packages or .dart_tool/package_config.json) for this isolate
/// to resolve package imports against. If this parameter is not passed the
/// package resolution of the parent isolate should be used.
/// \param flags Default flags for this isolate being spawned. Either inherited
/// from the spawning isolate or passed as parameters when spawning the
/// isolate from Dart code.
/// \param isolate_data The isolate data which was passed to the
/// parent isolate when it was created by calling Dart_CreateIsolateGroup().
/// \param error A structure into which the embedder can place a
/// C string containing an error message in the case of failures.
///
/// \return The embedder returns NULL if the creation and
/// initialization was not successful and the isolate if successful.
typedef Dart_IsolateGroupCreateCallback = ffi.Pointer<
    ffi.NativeFunction<
        Dart_Isolate Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<Dart_IsolateFlags>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;

/// An isolate is the unit of concurrency in Dart. Each isolate has
/// its own memory and thread of control. No state is shared between
/// isolates. Instead, isolates communicate by message passing.
///
/// Each thread keeps track of its current isolate, which is the
/// isolate which is ready to execute on the current thread. The
/// current isolate may be NULL, in which case no isolate is ready to
/// execute. Most of the Dart apis require there to be a current
/// isolate in order to function without error. The current isolate is
/// set by any call to Dart_CreateIsolateGroup or Dart_EnterIsolate.
typedef Dart_Isolate = ffi.Pointer<_Dart_Isolate>;

class _Dart_Isolate extends ffi.Opaque {}

/// An isolate initialization callback function.
///
/// This callback, provided by the embedder, is called when the VM has created an
/// isolate within an existing isolate group (i.e. from the same source as an
/// existing isolate).
///
/// The callback should setup native resolvers and might want to set a custom
/// message handler via [Dart_SetMessageNotifyCallback] and mark the isolate as
/// runnable.
///
/// This callback may be called on a different thread than the one
/// running the parent isolate.
///
/// When the function returns `false`, it is the responsibility of this
/// function to ensure that `Dart_ShutdownIsolate` has been called.
///
/// When the function returns `false`, the function should set *error to
/// a malloc-allocated buffer containing a useful error message.  The
/// caller of this function (the VM) will make sure that the buffer is
/// freed.
///
/// \param child_isolate_data The callback data to associate with the new
/// child isolate.
/// \param error A structure into which the embedder can place a
/// C string containing an error message in the case the initialization fails.
///
/// \return The embedder returns true if the initialization was successful and
/// false otherwise (in which case the VM will terminate the isolate).
typedef Dart_InitializeIsolateCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;

/// An isolate shutdown callback function.
///
/// This callback, provided by the embedder, is called before the vm
/// shuts down an isolate.  The isolate being shutdown will be the current
/// isolate. It is safe to run Dart code.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
/// \param isolate_data The same callback data which was passed to the isolate
/// when it was created.
typedef Dart_IsolateShutdownCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

/// An isolate cleanup callback function.
///
/// This callback, provided by the embedder, is called after the vm
/// shuts down an isolate. There will be no current isolate and it is *not*
/// safe to run Dart code.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
/// \param isolate_data The same callback data which was passed to the isolate
/// when it was created.
typedef Dart_IsolateCleanupCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

/// An isolate group cleanup callback function.
///
/// This callback, provided by the embedder, is called after the vm
/// shuts down an isolate group.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
typedef Dart_IsolateGroupCleanupCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

/// A thread start callback function.
/// This callback, provided by the embedder, is called after a thread in the
/// vm thread pool starts.
/// This function could be used to adjust thread priority or attach native
/// resources to the thread.
typedef Dart_ThreadStartCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

/// A thread death callback function.
/// This callback, provided by the embedder, is called before a thread in the
/// vm thread pool exits.
/// This function could be used to dispose of native resources that
/// are associated and attached to the thread, in order to avoid leaks.
typedef Dart_ThreadExitCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

/// Opens a file for reading or writing.
///
/// Callback provided by the embedder for file operations. If the
/// embedder does not allow file operations this callback can be
/// NULL.
///
/// \param name The name of the file to open.
/// \param write A boolean variable which indicates if the file is to
/// opened for writing. If there is an existing file it needs to truncated.
typedef Dart_FileOpenCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>, ffi.Bool)>>;

/// Read contents of file.
///
/// Callback provided by the embedder for file operations. If the
/// embedder does not allow file operations this callback can be
/// NULL.
///
/// \param data Buffer allocated in the callback into which the contents
/// of the file are read into. It is the responsibility of the caller to
/// free this buffer.
/// \param file_length A variable into which the length of the file is returned.
/// In the case of an error this value would be -1.
/// \param stream Handle to the opened file.
typedef Dart_FileReadCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Void>)>>;

/// Write data into file.
///
/// Callback provided by the embedder for file operations. If the
/// embedder does not allow file operations this callback can be
/// NULL.
///
/// \param data Buffer which needs to be written into the file.
/// \param length Length of the buffer.
/// \param stream Handle to the opened file.
typedef Dart_FileWriteCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.IntPtr, ffi.Pointer<ffi.Void>)>>;

/// Closes the opened file.
///
/// Callback provided by the embedder for file operations. If the
/// embedder does not allow file operations this callback can be
/// NULL.
///
/// \param stream Handle to the opened file.
typedef Dart_FileCloseCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef Dart_EntropySource = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>;

/// Callback provided by the embedder that is used by the vmservice isolate
/// to request the asset archive. The asset archive must be an uncompressed tar
/// archive that is stored in a Uint8List.
///
/// If the embedder has no vmservice isolate assets, the callback can be NULL.
///
/// \return The embedder must return a handle to a Uint8List containing an
/// uncompressed tar archive or null.
typedef Dart_GetVMServiceAssetsArchive
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>>;

/// Optional callback provided by the embedder that is used by the VM to
/// implement registration of kernel blobs for the subsequent Isolate.spawnUri
/// If no callback is provided, the registration of kernel blobs will throw
/// an error.
///
/// \param kernel_buffer A buffer which contains a kernel program. Callback
/// should copy the contents of `kernel_buffer` as
/// it may be freed immediately after registration.
/// \param kernel_buffer_size The size of `kernel_buffer`.
///
/// \return A C string representing URI which can be later used
/// to spawn a new isolate. This C String should be scope allocated
/// or owned by the embedder.
/// Returns NULL if embedder runs out of memory.
typedef Dart_RegisterKernelBlobCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>;

/// Optional callback provided by the embedder that is used by the VM to
/// unregister kernel blobs.
/// If no callback is provided, the unregistration of kernel blobs will throw
/// an error.
///
/// \param kernel_blob_uri URI of the kernel blob to unregister.
typedef Dart_UnregisterKernelBlobCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;
typedef Dart_IsolateGroup = ffi.Pointer<_Dart_IsolateGroup>;

class _Dart_IsolateGroup extends ffi.Opaque {}

/// Gets an id that uniquely identifies current isolate group.
///
/// It is the responsibility of the caller to free the returned ID.
typedef Dart_IsolateGroupId = ffi.Int64;

abstract class Dart_PerformanceMode {
  /// Balanced
  static const int Dart_PerformanceMode_Default = 0;

  /// Optimize for low latency, at the expense of throughput and memory overhead
  /// by performing work in smaller batches (requiring more overhead) or by
  /// delaying work (requiring more memory). An embedder should not remain in
  /// this mode indefinitely.
  static const int Dart_PerformanceMode_Latency = 1;

  /// Optimize for high throughput, at the expense of latency and memory overhead
  /// by performing work in larger batches with more intervening growth.
  static const int Dart_PerformanceMode_Throughput = 2;

  /// Optimize for low memory, at the expensive of throughput and latency by more
  /// frequently performing work.
  static const int Dart_PerformanceMode_Memory = 3;
}

/// A message notification callback.
///
/// This callback allows the embedder to provide a custom wakeup mechanism for
/// the delivery of inter-isolate messages. This function is called once per
/// message on an arbitrary thread. It is the responsibility of the embedder to
/// eventually call Dart_HandleMessage once per callback received with the
/// destination isolate set as the current isolate to process the message.
typedef Dart_MessageNotifyCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>;

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;

abstract class Dart_CoreType_Id {
  static const int Dart_CoreType_Dynamic = 0;
  static const int Dart_CoreType_Int = 1;
  static const int Dart_CoreType_String = 2;
}

abstract class Dart_TypedData_Type {
  static const int Dart_TypedData_kByteData = 0;
  static const int Dart_TypedData_kInt8 = 1;
  static const int Dart_TypedData_kUint8 = 2;
  static const int Dart_TypedData_kUint8Clamped = 3;
  static const int Dart_TypedData_kInt16 = 4;
  static const int Dart_TypedData_kUint16 = 5;
  static const int Dart_TypedData_kInt32 = 6;
  static const int Dart_TypedData_kUint32 = 7;
  static const int Dart_TypedData_kInt64 = 8;
  static const int Dart_TypedData_kUint64 = 9;
  static const int Dart_TypedData_kFloat32 = 10;
  static const int Dart_TypedData_kFloat64 = 11;
  static const int Dart_TypedData_kInt32x4 = 12;
  static const int Dart_TypedData_kFloat32x4 = 13;
  static const int Dart_TypedData_kFloat64x2 = 14;
  static const int Dart_TypedData_kInvalid = 15;
}

/// The arguments to a native function.
///
/// This object is passed to a native function to represent its
/// arguments and return value. It allows access to the arguments to a
/// native function by index. It also allows the return value of a
/// native function to be set.
typedef Dart_NativeArguments = ffi.Pointer<_Dart_NativeArguments>;

class _Dart_NativeArguments extends ffi.Opaque {}

abstract class Dart_NativeArgument_Type {
  static const int Dart_NativeArgument_kBool = 0;
  static const int Dart_NativeArgument_kInt32 = 1;
  static const int Dart_NativeArgument_kUint32 = 2;
  static const int Dart_NativeArgument_kInt64 = 3;
  static const int Dart_NativeArgument_kUint64 = 4;
  static const int Dart_NativeArgument_kDouble = 5;
  static const int Dart_NativeArgument_kString = 6;
  static const int Dart_NativeArgument_kInstance = 7;
  static const int Dart_NativeArgument_kNativeFields = 8;
}

class _Dart_NativeArgument_Value extends ffi.Opaque {}

typedef Dart_NativeArgument_Descriptor = _Dart_NativeArgument_Descriptor;

class _Dart_NativeArgument_Descriptor extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint8()
  external int index;
}

typedef Dart_NativeArgument_Value = _Dart_NativeArgument_Value;

/// An environment lookup callback function.
///
/// \param name The name of the value to lookup in the environment.
///
/// \return A valid handle to a string if the name exists in the
/// current environment or Dart_Null() if not.
typedef Dart_EnvironmentCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;

/// Native entry resolution callback.
///
/// For libraries and scripts which have native functions, the embedder
/// can provide a native entry resolver. This callback is used to map a
/// name/arity to a Dart_NativeFunction. If no function is found, the
/// callback should return NULL.
///
/// The parameters to the native resolver function are:
/// \param name a Dart string which is the name of the native function.
/// \param num_of_arguments is the number of arguments expected by the
/// native function.
/// \param auto_setup_scope is a boolean flag that can be set by the resolver
/// to indicate if this function needs a Dart API scope (see Dart_EnterScope/
/// Dart_ExitScope) to be setup automatically by the VM before calling into
/// the native function. By default most native functions would require this
/// to be true but some light weight native functions which do not call back
/// into the VM through the Dart API may not require a Dart scope to be
/// setup automatically.
///
/// \return A valid Dart_NativeFunction which resolves to a native entry point
/// for the native function.
///
/// See Dart_SetNativeResolver.
typedef Dart_NativeEntryResolver = ffi.Pointer<
    ffi.NativeFunction<
        Dart_NativeFunction Function(
            ffi.Handle, ffi.Int, ffi.Pointer<ffi.Bool>)>>;

/// A native function.
typedef Dart_NativeFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_NativeArguments)>>;

/// Native entry symbol lookup callback.
///
/// For libraries and scripts which have native functions, the embedder
/// can provide a callback for mapping a native entry to a symbol. This callback
/// maps a native function entry PC to the native function name. If no native
/// entry symbol can be found, the callback should return NULL.
///
/// The parameters to the native reverse resolver function are:
/// \param nf A Dart_NativeFunction.
///
/// \return A const UTF-8 string containing the symbol name or NULL.
///
/// See Dart_SetNativeResolver.
typedef Dart_NativeEntrySymbol = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(Dart_NativeFunction)>>;

/// FFI Native C function pointer resolver callback.
///
/// See Dart_SetFfiNativeResolver.
typedef Dart_FfiNativeResolver = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>, ffi.UintPtr)>>;

abstract class Dart_LibraryTag {
  static const int Dart_kCanonicalizeUrl = 0;
  static const int Dart_kImportTag = 1;
  static const int Dart_kKernelTag = 2;
}

/// The library tag handler is a multi-purpose callback provided by the
/// embedder to the Dart VM. The embedder implements the tag handler to
/// provide the ability to load Dart scripts and imports.
///
/// -- TAGS --
///
/// Dart_kCanonicalizeUrl
///
/// This tag indicates that the embedder should canonicalize 'url' with
/// respect to 'library'.  For most embedders, the
/// Dart_DefaultCanonicalizeUrl function is a sufficient implementation
/// of this tag.  The return value should be a string holding the
/// canonicalized url.
///
/// Dart_kImportTag
///
/// This tag is used to load a library from IsolateMirror.loadUri. The embedder
/// should call Dart_LoadLibraryFromKernel to provide the library to the VM. The
/// return value should be an error or library (the result from
/// Dart_LoadLibraryFromKernel).
///
/// Dart_kKernelTag
///
/// This tag is used to load the intermediate file (kernel) generated by
/// the Dart front end. This tag is typically used when a 'hot-reload'
/// of an application is needed and the VM is 'use dart front end' mode.
/// The dart front end typically compiles all the scripts, imports and part
/// files into one intermediate file hence we don't use the source/import or
/// script tags. The return value should be an error or a TypedData containing
/// the kernel bytes.
typedef Dart_LibraryTagHandler = ffi.Pointer<
    ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.Handle, ffi.Handle)>>;

/// Handles deferred loading requests. When this handler is invoked, it should
/// eventually load the deferred loading unit with the given id and call
/// Dart_DeferredLoadComplete or Dart_DeferredLoadCompleteError. It is
/// recommended that the loading occur asynchronously, but it is permitted to
/// call Dart_DeferredLoadComplete or Dart_DeferredLoadCompleteError before the
/// handler returns.
///
/// If an error is returned, it will be propagated through
/// `prefix.loadLibrary()`. This is useful for synchronous
/// implementations, which must propagate any unwind errors from
/// Dart_DeferredLoadComplete or Dart_DeferredLoadComplete. Otherwise the handler
/// should return a non-error such as `Dart_Null()`.
typedef Dart_DeferredLoadHandler
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>;

/// Experimental support for Dart to Kernel parser isolate.
///
/// TODO(hausner): Document finalized interface.
abstract class Dart_KernelCompilationStatus {
  static const int Dart_KernelCompilationStatus_Unknown = -1;
  static const int Dart_KernelCompilationStatus_Ok = 0;
  static const int Dart_KernelCompilationStatus_Error = 1;
  static const int Dart_KernelCompilationStatus_Crash = 2;
  static const int Dart_KernelCompilationStatus_MsgFailed = 3;
}

class Dart_KernelCompilationResult extends ffi.Struct {
  @ffi.Int32()
  external int status;

  @ffi.Bool()
  external bool null_safety;

  external ffi.Pointer<ffi.Char> error;

  external ffi.Pointer<ffi.Uint8> kernel;

  @ffi.IntPtr()
  external int kernel_size;
}

abstract class Dart_KernelCompilationVerbosityLevel {
  static const int Dart_KernelCompilationVerbosityLevel_Error = 0;
  static const int Dart_KernelCompilationVerbosityLevel_Warning = 1;
  static const int Dart_KernelCompilationVerbosityLevel_Info = 2;
  static const int Dart_KernelCompilationVerbosityLevel_All = 3;
}

class Dart_SourceFile extends ffi.Struct {
  external ffi.Pointer<ffi.Char> uri;

  external ffi.Pointer<ffi.Char> source;
}

typedef Dart_StreamingWriteCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>;
typedef Dart_CreateLoadingUnitCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.IntPtr,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef Dart_StreamingCloseCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_HandleFinalizer callback; a non-NULL callback must be provided.
///
/// Note that Dart_CObject_kNativePointer is intended for internal use by
/// dart:io implementation and has no connection to dart:ffi Pointer class.
/// It represents a pointer to a native resource of a known type.
/// The receiving side will only see this pointer as an integer and will not
/// see the specified finalizer.
/// The specified finalizer will only be invoked if the message is not delivered.
abstract class Dart_CObject_Type {
  static const int Dart_CObject_kNull = 0;
  static const int Dart_CObject_kBool = 1;
  static const int Dart_CObject_kInt32 = 2;
  static const int Dart_CObject_kInt64 = 3;
  static const int Dart_CObject_kDouble = 4;
  static const int Dart_CObject_kString = 5;
  static const int Dart_CObject_kArray = 6;
  static const int Dart_CObject_kTypedData = 7;
  static const int Dart_CObject_kExternalTypedData = 8;
  static const int Dart_CObject_kUnmodifiableExternalTypedData = 9;
  static const int Dart_CObject_kSendPort = 10;
  static const int Dart_CObject_kCapability = 11;
  static const int Dart_CObject_kNativePointer = 12;
  static const int Dart_CObject_kUnsupported = 13;
  static const int Dart_CObject_kNumberOfTypes = 14;
}

typedef Dart_CObject = _Dart_CObject;

class _Dart_CObject extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion12 value;
}

class UnnamedUnion12 extends ffi.Union {
  @ffi.Bool()
  external bool as_bool;

  @ffi.Int32()
  external int as_int32;

  @ffi.Int64()
  external int as_int64;

  @ffi.Double()
  external double as_double;

  external ffi.Pointer<ffi.Char> as_string;

  external UnnamedStruct14 as_send_port;

  external UnnamedStruct15 as_capability;

  external UnnamedStruct16 as_array;

  external UnnamedStruct17 as_typed_data;

  external UnnamedStruct18 as_external_typed_data;

  external UnnamedStruct19 as_native_pointer;
}

class UnnamedStruct14 extends ffi.Struct {
  @Dart_Port()
  external int id;

  @Dart_Port()
  external int origin_id;
}

class UnnamedStruct15 extends ffi.Struct {
  @ffi.Int64()
  external int id;
}

class UnnamedStruct16 extends ffi.Struct {
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Pointer<_Dart_CObject>> values;
}

class UnnamedStruct17 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> values;
}

class UnnamedStruct18 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<ffi.Void> peer;

  external Dart_HandleFinalizer callback;
}

class UnnamedStruct19 extends ffi.Struct {
  @ffi.IntPtr()
  external int ptr;

  @ffi.IntPtr()
  external int size;

  external Dart_HandleFinalizer callback;
}

/// A native message handler.
///
/// This handler is associated with a native port by calling
/// Dart_NewNativePort.
///
/// The message received is decoded into the message structure. The
/// lifetime of the message data is controlled by the caller. All the
/// data references from the message are allocated by the caller and
/// will be reclaimed when returning to it.
typedef Dart_NativeMessageHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_Port, ffi.Pointer<Dart_CObject>)>>;
typedef Dart_PostCObject_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(Dart_Port_DL, ffi.Pointer<Dart_CObject>)>>;
typedef Dart_Port_DL = ffi.Int64;
typedef Dart_PostInteger_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Port_DL, ffi.Int64)>>;
typedef Dart_NewNativePort_Type = ffi.Pointer<
    ffi.NativeFunction<
        Dart_Port_DL Function(
            ffi.Pointer<ffi.Char>, Dart_NativeMessageHandler_DL, ffi.Bool)>>;
typedef Dart_NativeMessageHandler_DL = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_Port_DL, ffi.Pointer<Dart_CObject>)>>;
typedef Dart_CloseNativePort_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Port_DL)>>;
typedef Dart_IsError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>;
typedef Dart_IsApiError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>;
typedef Dart_IsUnhandledExceptionError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>;
typedef Dart_IsCompilationError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>;
typedef Dart_IsFatalError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>;
typedef Dart_GetError_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>;
typedef Dart_ErrorHasException_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>;
typedef Dart_ErrorGetException_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_ErrorGetStackTrace_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_NewApiError_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>;
typedef Dart_NewCompilationError_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>;
typedef Dart_NewUnhandledExceptionError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_PropagateError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>;
typedef Dart_HandleFromPersistent_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_HandleFromWeakPersistent_Type = ffi.Pointer<
    ffi.NativeFunction<ffi.Handle Function(Dart_WeakPersistentHandle)>>;
typedef Dart_NewPersistentHandle_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_SetPersistentHandle_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>;
typedef Dart_DeletePersistentHandle_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>;
typedef Dart_NewWeakPersistentHandle_Type = ffi.Pointer<
    ffi.NativeFunction<
        Dart_WeakPersistentHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
            ffi.IntPtr, Dart_HandleFinalizer)>>;
typedef Dart_DeleteWeakPersistentHandle_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(Dart_WeakPersistentHandle)>>;
typedef Dart_UpdateExternalSize_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_WeakPersistentHandle, ffi.IntPtr)>>;
typedef Dart_NewFinalizableHandle_Type = ffi.Pointer<
    ffi.NativeFunction<
        Dart_FinalizableHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
            ffi.IntPtr, Dart_HandleFinalizer)>>;
typedef Dart_DeleteFinalizableHandle_Type = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(Dart_FinalizableHandle, ffi.Handle)>>;
typedef Dart_UpdateFinalizableExternalSize_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_FinalizableHandle, ffi.Handle, ffi.IntPtr)>>;
typedef Dart_Post_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Bool Function(Dart_Port_DL, ffi.Handle)>>;
typedef Dart_NewSendPort_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(Dart_Port_DL)>>;
typedef Dart_SendPortGetId_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Handle Function(ffi.Handle, ffi.Pointer<Dart_Port_DL>)>>;
typedef Dart_EnterScope_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef Dart_ExitScope_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

abstract class transport_socket_family {
  static const int INET = 0;
  static const int UNIX = 1;
}

class transport_listener_configuration extends ffi.Struct {
  @ffi.Size()
  external int ring_size;

  @ffi.Uint16()
  external int workers_count;

  @ffi.Int()
  external int ring_flags;
}

class transport_listener extends ffi.Struct {
  @ffi.Uint8()
  external int id;

  external ffi.Pointer<io_uring> ring;

  @ffi.Size()
  external int ring_size;

  external rlist listener_pool_link;

  external ffi.Pointer<ffi.Int> ready_workers;

  @ffi.Uint16()
  external int workers_count;
}

typedef transport_listener_t = transport_listener;
typedef transport_listener_configuration_t = transport_listener_configuration;

class sockaddr_un extends ffi.Struct {
  @sa_family_t()
  external int sun_family;

  @ffi.Array.multi([108])
  external ffi.Array<ffi.Char> sun_path;
}

class transport_server_configuration extends ffi.Struct {
  @ffi.Int32()
  external int socket_max_connections;

  @ffi.Uint64()
  external int socket_configuration_flags;

  @ffi.Uint32()
  external int socket_receive_buffer_size;

  @ffi.Uint32()
  external int socket_send_buffer_size;

  @ffi.Uint32()
  external int socket_receive_low_at;

  @ffi.Uint32()
  external int socket_send_low_at;

  @ffi.Uint16()
  external int ip_ttl;

  @ffi.Uint32()
  external int tcp_keep_alive_idle;

  @ffi.Uint32()
  external int tcp_keep_alive_max_count;

  @ffi.Uint32()
  external int tcp_keep_alive_individual_count;

  @ffi.Uint32()
  external int tcp_max_segment_size;

  @ffi.Uint16()
  external int tcp_syn_count;

  external ffi.Pointer<ip_mreqn> ip_multicast_interface;

  @ffi.Uint32()
  external int ip_multicast_ttl;
}

class transport_server extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Int32()
  external int family;

  external sockaddr_in inet_server_address;

  external sockaddr_un unix_server_address;

  @socklen_t()
  external int server_address_length;
}

typedef transport_server_t = transport_server;
typedef transport_server_configuration_t = transport_server_configuration;

class timezone1 extends ffi.Struct {
  @ffi.Int()
  external int tz_minuteswest;

  @ffi.Int()
  external int tz_dsttime;
}

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

class transport_listener_pool extends ffi.Struct {
  external rlist listeners;

  external ffi.Pointer<rlist> next_listener;

  @ffi.Uint16()
  external int next_listener_index;

  @ffi.Size()
  external int count;
}

typedef transport_listener_pool_t = transport_listener_pool;

class transport_client_configuration extends ffi.Struct {
  @ffi.Uint64()
  external int socket_configuration_flags;

  @ffi.Uint32()
  external int socket_receive_buffer_size;

  @ffi.Uint32()
  external int socket_send_buffer_size;

  @ffi.Uint32()
  external int socket_receive_low_at;

  @ffi.Uint32()
  external int socket_send_low_at;

  @ffi.Uint16()
  external int ip_ttl;

  @ffi.Uint32()
  external int tcp_keep_alive_idle;

  @ffi.Uint32()
  external int tcp_keep_alive_max_count;

  @ffi.Uint32()
  external int tcp_keep_alive_individual_count;

  @ffi.Uint32()
  external int tcp_max_segment_size;

  @ffi.Uint16()
  external int tcp_syn_count;

  external ffi.Pointer<ip_mreqn> ip_multicast_interface;

  @ffi.Uint32()
  external int ip_multicast_ttl;
}

class transport_client extends ffi.Struct {
  @ffi.Int()
  external int fd;

  external sockaddr_in inet_destination_address;

  external sockaddr_in inet_source_address;

  external sockaddr_un unix_destination_address;

  external sockaddr_un unix_source_address;

  @socklen_t()
  external int client_address_length;

  @ffi.Int32()
  external int family;
}

typedef transport_client_t = transport_client;
typedef transport_client_configuration_t = transport_client_configuration;

class mh_i32_node_t extends ffi.Struct {
  @ffi.Int32()
  external int key;

  @ffi.Int64()
  external int value;
}

class mh_i32_t extends ffi.Struct {
  external ffi.Pointer<mh_i32_node_t> p;

  external ffi.Pointer<ffi.Uint32> b;

  @mh_int_t()
  external int n_buckets;

  @mh_int_t()
  external int n_dirty;

  @mh_int_t()
  external int size;

  @mh_int_t()
  external int upper_bound;

  @mh_int_t()
  external int prime;

  @mh_int_t()
  external int resize_cnt;

  @mh_int_t()
  external int resize_position;

  @mh_int_t()
  external int batch;

  external ffi.Pointer<mh_i32_t> shadow;
}

typedef mh_int_t = ffi.Uint32;

class mh_events_node_t extends ffi.Struct {
  @ffi.Uint64()
  external int data;

  @ffi.Int64()
  external int timeout;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Int()
  external int fd;
}

class mh_events_t extends ffi.Struct {
  external ffi.Pointer<mh_events_node_t> p;

  external ffi.Pointer<ffi.Uint32> b;

  @mh_int_t()
  external int n_buckets;

  @mh_int_t()
  external int n_dirty;

  @mh_int_t()
  external int size;

  @mh_int_t()
  external int upper_bound;

  @mh_int_t()
  external int prime;

  @mh_int_t()
  external int resize_cnt;

  @mh_int_t()
  external int resize_position;

  @mh_int_t()
  external int batch;

  external ffi.Pointer<mh_events_t> shadow;
}

class transport_buffers_pool extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ids;

  @ffi.Size()
  external int count;

  @ffi.Size()
  external int size;
}

class transport_worker_configuration extends ffi.Struct {
  @ffi.Uint16()
  external int buffers_count;

  @ffi.Uint32()
  external int buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Int()
  external int ring_flags;

  @ffi.Uint64()
  external int timeout_checker_period_millis;
}

class transport_worker extends ffi.Struct {
  @ffi.Uint8()
  external int id;

  external transport_buffers_pool free_buffers;

  external ffi.Pointer<io_uring> ring;

  external ffi.Pointer<transport_listener_pool_t> listeners;

  external ffi.Pointer<iovec> buffers;

  @ffi.Uint32()
  external int buffer_size;

  @ffi.Uint16()
  external int buffers_count;

  @ffi.Uint64()
  external int timeout_checker_period_millis;

  external ffi.Pointer<msghdr> inet_used_messages;

  external ffi.Pointer<msghdr> unix_used_messages;

  external ffi.Pointer<mh_events_t> events;
}

typedef transport_worker_t = transport_worker;
typedef transport_worker_configuration_t = transport_worker_configuration;

class transport extends ffi.Struct {
  external ffi.Pointer<transport_listener_configuration_t>
      listener_configuration;

  external ffi.Pointer<transport_worker_configuration_t>
      inbound_worker_configuration;

  external ffi.Pointer<transport_worker_configuration_t>
      outbound_worker_configuration;
}

typedef transport_t = transport;

class _Dart_Handle extends ffi.Opaque {}

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_EGP = 8;

const int IPPROTO_PUP = 12;

const int IPPROTO_UDP = 17;

const int IPPROTO_IDP = 22;

const int IPPROTO_TP = 29;

const int IPPROTO_DCCP = 33;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_MTP = 92;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_PIM = 103;

const int IPPROTO_COMP = 108;

const int IPPROTO_SCTP = 132;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_MPLS = 137;

const int IPPROTO_RAW = 255;

const int IPPROTO_MAX = 256;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_MH = 135;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int SI_ASYNCNL = -60;

const int SI_DETHREAD = -7;

const int SI_TKILL = -6;

const int SI_SIGIO = -5;

const int SI_ASYNCIO = -4;

const int SI_MESGQ = -3;

const int SI_TIMER = -2;

const int SI_QUEUE = -1;

const int SI_USER = 0;

const int SI_KERNEL = 128;

const int ILL_ILLOPC = 1;

const int ILL_ILLOPN = 2;

const int ILL_ILLADR = 3;

const int ILL_ILLTRP = 4;

const int ILL_PRVOPC = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int ILL_BADIADDR = 9;

const int FPE_INTDIV = 1;

const int FPE_INTOVF = 2;

const int FPE_FLTDIV = 3;

const int FPE_FLTOVF = 4;

const int FPE_FLTUND = 5;

const int FPE_FLTRES = 6;

const int FPE_FLTINV = 7;

const int FPE_FLTSUB = 8;

const int FPE_FLTUNK = 14;

const int FPE_CONDTRAP = 15;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int SEGV_BNDERR = 3;

const int SEGV_PKUERR = 4;

const int SEGV_ACCADI = 5;

const int SEGV_ADIDERR = 6;

const int SEGV_ADIPERR = 7;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int BUS_MCEERR_AR = 4;

const int BUS_MCEERR_AO = 5;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SIGEV_SIGNAL = 0;

const int SIGEV_NONE = 1;

const int SIGEV_THREAD = 2;

const int SIGEV_THREAD_ID = 4;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 2;

const int IOSQE_FIXED_FILE_BIT = 0;

const int IOSQE_IO_DRAIN_BIT = 1;

const int IOSQE_IO_LINK_BIT = 2;

const int IOSQE_IO_HARDLINK_BIT = 3;

const int IOSQE_ASYNC_BIT = 4;

const int IOSQE_BUFFER_SELECT_BIT = 5;

const int IORING_OP_NOP = 0;

const int IORING_OP_READV = 1;

const int IORING_OP_WRITEV = 2;

const int IORING_OP_FSYNC = 3;

const int IORING_OP_READ_FIXED = 4;

const int IORING_OP_WRITE_FIXED = 5;

const int IORING_OP_POLL_ADD = 6;

const int IORING_OP_POLL_REMOVE = 7;

const int IORING_OP_SYNC_FILE_RANGE = 8;

const int IORING_OP_SENDMSG = 9;

const int IORING_OP_RECVMSG = 10;

const int IORING_OP_TIMEOUT = 11;

const int IORING_OP_TIMEOUT_REMOVE = 12;

const int IORING_OP_ACCEPT = 13;

const int IORING_OP_ASYNC_CANCEL = 14;

const int IORING_OP_LINK_TIMEOUT = 15;

const int IORING_OP_CONNECT = 16;

const int IORING_OP_FALLOCATE = 17;

const int IORING_OP_OPENAT = 18;

const int IORING_OP_CLOSE = 19;

const int IORING_OP_FILES_UPDATE = 20;

const int IORING_OP_STATX = 21;

const int IORING_OP_READ = 22;

const int IORING_OP_WRITE = 23;

const int IORING_OP_FADVISE = 24;

const int IORING_OP_MADVISE = 25;

const int IORING_OP_SEND = 26;

const int IORING_OP_RECV = 27;

const int IORING_OP_OPENAT2 = 28;

const int IORING_OP_EPOLL_CTL = 29;

const int IORING_OP_SPLICE = 30;

const int IORING_OP_PROVIDE_BUFFERS = 31;

const int IORING_OP_REMOVE_BUFFERS = 32;

const int IORING_OP_TEE = 33;

const int IORING_OP_LAST = 34;

const int IORING_CQE_BUFFER_SHIFT = 16;

const int SMALL_OBUF_IOV_MAX = 31;

const int SLAB_MIN_SIZE = 65536;

const int SMALL_UNLIMITED = -9223372036854775808;

const int SLAB_ARENA_PRIVATE = -2147483647;

const int SLAB_ARENA_SHARED = -2147483646;

const int SLAB_ARENA_DONTDUMP = -2147483644;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int ORDER_MAX = 16;

const int RB_WALK_LEFT = 1;

const int RB_WALK_RIGHT = 2;

const int FACTOR_POOL_MAX = 1024;

const int kNativeArgNumberPos = 0;

const int kNativeArgNumberSize = 8;

const int kNativeArgTypePos = 8;

const int kNativeArgTypeSize = 8;

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int FPCONV_G_FMT_BUFSIZE = 32;

const int FPCONV_G_FMT_MAX_PRECISION = 14;

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MAX = 45;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MAX = 45;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOMAXCONN = 4096;

const int MSG_OOB1 = 1;

const int MSG_PEEK1 = 2;

const int MSG_DONTROUTE1 = 4;

const int MSG_CTRUNC1 = 8;

const int MSG_PROXY1 = 16;

const int MSG_TRUNC1 = 32;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR1 = 128;

const int MSG_WAITALL1 = 256;

const int MSG_FIN1 = 512;

const int MSG_SYN1 = 1024;

const int MSG_CONFIRM1 = 2048;

const int MSG_RST1 = 4096;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_MORE1 = 32768;

const int MSG_WAITFORONE1 = 65536;

const int MSG_BATCH1 = 262144;

const int MSG_ZEROCOPY1 = 67108864;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int SCM_RIGHTS1 = 1;

const int FIOSETOWN = 35073;

const int SIOCSPGRP = 35074;

const int FIOGETOWN = 35075;

const int SIOCGPGRP = 35076;

const int SIOCATMARK = 35077;

const int SIOCGSTAMP = 35078;

const int SIOCGSTAMPNS = 35079;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SCM_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SCM_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TIMESTAMPING = 37;

const int SHUT_RD1 = 0;

const int SHUT_WR1 = 1;

const int SHUT_RDWR1 = 2;

const int IP_OPTIONS = 4;

const int IP_HDRINCL = 3;

const int IP_TOS = 1;

const int IP_TTL = 2;

const int IP_RECVOPTS = 6;

const int IP_RECVRETOPTS = 7;

const int IP_RETOPTS = 7;

const int IP_MULTICAST_IF = 32;

const int IP_MULTICAST_TTL = 33;

const int IP_MULTICAST_LOOP = 34;

const int IP_ADD_MEMBERSHIP = 35;

const int IP_DROP_MEMBERSHIP = 36;

const int IP_UNBLOCK_SOURCE = 37;

const int IP_BLOCK_SOURCE = 38;

const int IP_ADD_SOURCE_MEMBERSHIP = 39;

const int IP_DROP_SOURCE_MEMBERSHIP = 40;

const int IP_MSFILTER = 41;

const int MCAST_JOIN_GROUP = 42;

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MCAST_LEAVE_GROUP = 45;

const int MCAST_JOIN_SOURCE_GROUP = 46;

const int MCAST_LEAVE_SOURCE_GROUP = 47;

const int MCAST_MSFILTER = 48;

const int IP_MULTICAST_ALL = 49;

const int IP_UNICAST_IF = 50;

const int MCAST_EXCLUDE = 0;

const int MCAST_INCLUDE = 1;

const int IP_ROUTER_ALERT = 5;

const int IP_PKTINFO = 8;

const int IP_PKTOPTIONS = 9;

const int IP_PMTUDISC = 10;

const int IP_MTU_DISCOVER = 10;

const int IP_RECVERR = 11;

const int IP_RECVTTL = 12;

const int IP_RECVTOS = 13;

const int IP_MTU = 14;

const int IP_FREEBIND = 15;

const int IP_IPSEC_POLICY = 16;

const int IP_XFRM_POLICY = 17;

const int IP_PASSSEC = 18;

const int IP_TRANSPARENT = 19;

const int IP_ORIGDSTADDR = 20;

const int IP_RECVORIGDSTADDR = 20;

const int IP_MINTTL = 21;

const int IP_NODEFRAG = 22;

const int IP_CHECKSUM = 23;

const int IP_BIND_ADDRESS_NO_PORT = 24;

const int IP_RECVFRAGSIZE = 25;

const int IP_PMTUDISC_DONT = 0;

const int IP_PMTUDISC_WANT = 1;

const int IP_PMTUDISC_DO = 2;

const int IP_PMTUDISC_PROBE = 3;

const int IP_PMTUDISC_INTERFACE = 4;

const int IP_PMTUDISC_OMIT = 5;

const int SOL_IP = 0;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_MAX_MEMBERSHIPS = 20;

const int IPV6_ADDRFORM = 1;

const int IPV6_2292PKTINFO = 2;

const int IPV6_2292HOPOPTS = 3;

const int IPV6_2292DSTOPTS = 4;

const int IPV6_2292RTHDR = 5;

const int IPV6_2292PKTOPTIONS = 6;

const int IPV6_CHECKSUM = 7;

const int IPV6_2292HOPLIMIT = 8;

const int IPV6_NEXTHOP = 9;

const int IPV6_AUTHHDR = 10;

const int IPV6_UNICAST_HOPS = 16;

const int IPV6_MULTICAST_IF = 17;

const int IPV6_MULTICAST_HOPS = 18;

const int IPV6_MULTICAST_LOOP = 19;

const int IPV6_JOIN_GROUP = 20;

const int IPV6_LEAVE_GROUP = 21;

const int IPV6_ROUTER_ALERT = 22;

const int IPV6_MTU_DISCOVER = 23;

const int IPV6_MTU = 24;

const int IPV6_RECVERR = 25;

const int IPV6_V6ONLY = 26;

const int IPV6_JOIN_ANYCAST = 27;

const int IPV6_LEAVE_ANYCAST = 28;

const int IPV6_MULTICAST_ALL = 29;

const int IPV6_ROUTER_ALERT_ISOLATE = 30;

const int IPV6_IPSEC_POLICY = 34;

const int IPV6_XFRM_POLICY = 35;

const int IPV6_HDRINCL = 36;

const int IPV6_RECVPKTINFO = 49;

const int IPV6_PKTINFO = 50;

const int IPV6_RECVHOPLIMIT = 51;

const int IPV6_HOPLIMIT = 52;

const int IPV6_RECVHOPOPTS = 53;

const int IPV6_HOPOPTS = 54;

const int IPV6_RTHDRDSTOPTS = 55;

const int IPV6_RECVRTHDR = 56;

const int IPV6_RTHDR = 57;

const int IPV6_RECVDSTOPTS = 58;

const int IPV6_DSTOPTS = 59;

const int IPV6_RECVPATHMTU = 60;

const int IPV6_PATHMTU = 61;

const int IPV6_DONTFRAG = 62;

const int IPV6_RECVTCLASS = 66;

const int IPV6_TCLASS = 67;

const int IPV6_AUTOFLOWLABEL = 70;

const int IPV6_ADDR_PREFERENCES = 72;

const int IPV6_MINHOPCOUNT = 73;

const int IPV6_ORIGDSTADDR = 74;

const int IPV6_RECVORIGDSTADDR = 74;

const int IPV6_TRANSPARENT = 75;

const int IPV6_UNICAST_IF = 76;

const int IPV6_RECVFRAGSIZE = 77;

const int IPV6_FREEBIND = 78;

const int IPV6_ADD_MEMBERSHIP = 20;

const int IPV6_DROP_MEMBERSHIP = 21;

const int IPV6_RXHOPOPTS = 54;

const int IPV6_RXDSTOPTS = 59;

const int IPV6_PMTUDISC_DONT = 0;

const int IPV6_PMTUDISC_WANT = 1;

const int IPV6_PMTUDISC_DO = 2;

const int IPV6_PMTUDISC_PROBE = 3;

const int IPV6_PMTUDISC_INTERFACE = 4;

const int IPV6_PMTUDISC_OMIT = 5;

const int SOL_IPV6 = 41;

const int SOL_ICMPV6 = 58;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPPROTO_IP1 = 0;

const int IPPROTO_ICMP1 = 1;

const int IPPROTO_IGMP1 = 2;

const int IPPROTO_IPIP1 = 4;

const int IPPROTO_TCP1 = 6;

const int IPPROTO_EGP1 = 8;

const int IPPROTO_PUP1 = 12;

const int IPPROTO_UDP1 = 17;

const int IPPROTO_IDP1 = 22;

const int IPPROTO_TP1 = 29;

const int IPPROTO_DCCP1 = 33;

const int IPPROTO_IPV61 = 41;

const int IPPROTO_RSVP1 = 46;

const int IPPROTO_GRE1 = 47;

const int IPPROTO_ESP1 = 50;

const int IPPROTO_AH1 = 51;

const int IPPROTO_MTP1 = 92;

const int IPPROTO_BEETPH1 = 94;

const int IPPROTO_ENCAP1 = 98;

const int IPPROTO_PIM1 = 103;

const int IPPROTO_COMP1 = 108;

const int IPPROTO_SCTP1 = 132;

const int IPPROTO_UDPLITE1 = 136;

const int IPPROTO_MPLS1 = 137;

const int IPPROTO_RAW1 = 255;

const int IPPROTO_HOPOPTS1 = 0;

const int IPPROTO_ROUTING1 = 43;

const int IPPROTO_FRAGMENT1 = 44;

const int IPPROTO_ICMPV61 = 58;

const int IPPROTO_NONE1 = 59;

const int IPPROTO_DSTOPTS1 = 60;

const int IPPROTO_MH1 = 135;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int INADDR_ANY = 0;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_NONE = 4294967295;

const int IN_LOOPBACKNET = 127;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_UNSPEC_GROUP = 3758096384;

const int INADDR_ALLHOSTS_GROUP = 3758096385;

const int INADDR_ALLRTRS_GROUP = 3758096386;

const int INADDR_ALLSNOOPERS_GROUP = 3758096490;

const int INADDR_MAX_LOCAL_GROUP = 3758096639;

const int INET_ADDRSTRLEN = 16;

const int INET6_ADDRSTRLEN = 46;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int UIO_MAXIOV = 1024;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXU = 448;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXG = 56;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_IRWXO = 7;

const int ACCESSPERMS = 511;

const int ALLPERMS = 4095;

const int DEFFILEMODE = 438;

const int S_BLKSIZE = 512;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int SIGINT = 2;

const int SIGILL = 4;

const int SIGABRT = 6;

const int SIGFPE = 8;

const int SIGSEGV = 11;

const int SIGTERM = 15;

const int SIGHUP = 1;

const int SIGQUIT = 3;

const int SIGTRAP = 5;

const int SIGKILL = 9;

const int SIGBUS = 7;

const int SIGSYS = 31;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGURG = 23;

const int SIGSTOP = 19;

const int SIGTSTP = 20;

const int SIGCONT = 18;

const int SIGCHLD = 17;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGPOLL = 29;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGUSR1 = 10;

const int SIGUSR2 = 12;

const int SIGWINCH = 28;

const int SIGIO = 29;

const int SIGIOT = 6;

const int SIGCLD = 17;

const int SIGSTKFLT = 16;

const int SIGPWR = 30;

const int SI_ASYNCNL1 = -60;

const int SI_DETHREAD1 = -7;

const int SI_TKILL1 = -6;

const int SI_SIGIO1 = -5;

const int SI_ASYNCIO1 = -4;

const int SI_MESGQ1 = -3;

const int SI_TIMER1 = -2;

const int SI_QUEUE1 = -1;

const int SI_USER1 = 0;

const int SI_KERNEL1 = 128;

const int ILL_ILLOPC1 = 1;

const int ILL_ILLOPN1 = 2;

const int ILL_ILLADR1 = 3;

const int ILL_ILLTRP1 = 4;

const int ILL_PRVOPC1 = 5;

const int ILL_PRVREG1 = 6;

const int ILL_COPROC1 = 7;

const int ILL_BADSTK1 = 8;

const int ILL_BADIADDR1 = 9;

const int FPE_INTDIV1 = 1;

const int FPE_INTOVF1 = 2;

const int FPE_FLTDIV1 = 3;

const int FPE_FLTOVF1 = 4;

const int FPE_FLTUND1 = 5;

const int FPE_FLTRES1 = 6;

const int FPE_FLTINV1 = 7;

const int FPE_FLTSUB1 = 8;

const int FPE_FLTUNK1 = 14;

const int FPE_CONDTRAP1 = 15;

const int SEGV_MAPERR1 = 1;

const int SEGV_ACCERR1 = 2;

const int SEGV_BNDERR1 = 3;

const int SEGV_PKUERR1 = 4;

const int SEGV_ACCADI1 = 5;

const int SEGV_ADIDERR1 = 6;

const int SEGV_ADIPERR1 = 7;

const int BUS_ADRALN1 = 1;

const int BUS_ADRERR1 = 2;

const int BUS_OBJERR1 = 3;

const int BUS_MCEERR_AR1 = 4;

const int BUS_MCEERR_AO1 = 5;

const int CLD_EXITED1 = 1;

const int CLD_KILLED1 = 2;

const int CLD_DUMPED1 = 3;

const int CLD_TRAPPED1 = 4;

const int CLD_STOPPED1 = 5;

const int CLD_CONTINUED1 = 6;

const int POLL_IN1 = 1;

const int POLL_OUT1 = 2;

const int POLL_MSG1 = 3;

const int POLL_ERR1 = 4;

const int POLL_PRI1 = 5;

const int POLL_HUP1 = 6;

const int SIGEV_SIGNAL1 = 0;

const int SIGEV_NONE1 = 1;

const int SIGEV_THREAD1 = 2;

const int SIGEV_THREAD_ID1 = 4;

const int NSIG = 65;

const int SA_NOCLDSTOP = 1;

const int SA_NOCLDWAIT = 2;

const int SA_SIGINFO = 4;

const int SA_ONSTACK = 134217728;

const int SA_RESTART = 268435456;

const int SA_NODEFER = 1073741824;

const int SA_RESETHAND = 2147483648;

const int SA_INTERRUPT = 536870912;

const int SA_NOMASK = 1073741824;

const int SA_ONESHOT = 2147483648;

const int SA_STACK = 134217728;

const int SIG_BLOCK = 0;

const int SIG_UNBLOCK = 1;

const int SIG_SETMASK = 2;

const int FP_XSTATE_MAGIC1 = 1179670611;

const int FP_XSTATE_MAGIC2 = 1179670597;

const int FP_XSTATE_MAGIC2_SIZE = 4;

const int NGREG = 23;

const int MINSIGSTKSZ = 2048;

const int SIGSTKSZ = 8192;

const int SS_ONSTACK1 = 1;

const int SS_DISABLE1 = 2;

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int NULL = 0;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int TIME_UTC = 1;

const int NGROUPS_MAX = 65536;

const int ARG_MAX = 131072;

const int LINK_MAX = 127;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int IOC_IN = 1073741824;

const int IOC_OUT = 2147483648;

const int IOC_INOUT = 3221225472;

const int IOCSIZE_MASK = 1073676288;

const int IOCSIZE_SHIFT = 16;

const int FSCRYPT_POLICY_FLAGS_PAD_4 = 0;

const int FSCRYPT_POLICY_FLAGS_PAD_8 = 1;

const int FSCRYPT_POLICY_FLAGS_PAD_16 = 2;

const int FSCRYPT_POLICY_FLAGS_PAD_32 = 3;

const int FSCRYPT_POLICY_FLAGS_PAD_MASK = 3;

const int FSCRYPT_POLICY_FLAG_DIRECT_KEY = 4;

const int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64 = 8;

const int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32 = 16;

const int FSCRYPT_MODE_AES_256_XTS = 1;

const int FSCRYPT_MODE_AES_256_CTS = 4;

const int FSCRYPT_MODE_AES_128_CBC = 5;

const int FSCRYPT_MODE_AES_128_CTS = 6;

const int FSCRYPT_MODE_ADIANTUM = 9;

const int FSCRYPT_POLICY_V1 = 0;

const int FSCRYPT_KEY_DESCRIPTOR_SIZE = 8;

const String FSCRYPT_KEY_DESC_PREFIX = 'fscrypt:';

const int FSCRYPT_KEY_DESC_PREFIX_SIZE = 8;

const int FSCRYPT_MAX_KEY_SIZE = 64;

const int FSCRYPT_POLICY_V2 = 2;

const int FSCRYPT_KEY_IDENTIFIER_SIZE = 16;

const int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR = 1;

const int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER = 2;

const int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY = 1;

const int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS = 2;

const int FSCRYPT_KEY_STATUS_ABSENT = 1;

const int FSCRYPT_KEY_STATUS_PRESENT = 2;

const int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED = 3;

const int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF = 1;

const int FS_IOC_SET_ENCRYPTION_POLICY = 2148296211;

const int FS_IOC_GET_ENCRYPTION_PWSALT = 1074816532;

const int FS_IOC_GET_ENCRYPTION_POLICY = 1074554389;

const int FS_IOC_GET_ENCRYPTION_POLICY_EX = 3221841430;

const int FS_IOC_ADD_ENCRYPTION_KEY = 3226494487;

const int FS_IOC_REMOVE_ENCRYPTION_KEY = 3225445912;

const int FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS = 3225445913;

const int FS_IOC_GET_ENCRYPTION_KEY_STATUS = 3229640218;

const int FS_IOC_GET_ENCRYPTION_NONCE = 2148558363;

const int FS_KEY_DESCRIPTOR_SIZE = 8;

const int FS_POLICY_FLAGS_PAD_4 = 0;

const int FS_POLICY_FLAGS_PAD_8 = 1;

const int FS_POLICY_FLAGS_PAD_16 = 2;

const int FS_POLICY_FLAGS_PAD_32 = 3;

const int FS_POLICY_FLAGS_PAD_MASK = 3;

const int FS_POLICY_FLAG_DIRECT_KEY = 4;

const int FS_POLICY_FLAGS_VALID = 7;

const int FS_ENCRYPTION_MODE_INVALID = 0;

const int FS_ENCRYPTION_MODE_AES_256_XTS = 1;

const int FS_ENCRYPTION_MODE_AES_256_GCM = 2;

const int FS_ENCRYPTION_MODE_AES_256_CBC = 3;

const int FS_ENCRYPTION_MODE_AES_256_CTS = 4;

const int FS_ENCRYPTION_MODE_AES_128_CBC = 5;

const int FS_ENCRYPTION_MODE_AES_128_CTS = 6;

const int FS_ENCRYPTION_MODE_SPECK128_256_XTS = 7;

const int FS_ENCRYPTION_MODE_SPECK128_256_CTS = 8;

const int FS_ENCRYPTION_MODE_ADIANTUM = 9;

const String FS_KEY_DESC_PREFIX = 'fscrypt:';

const int FS_KEY_DESC_PREFIX_SIZE = 8;

const int FS_MAX_KEY_SIZE = 64;

const int MS_RDONLY = 1;

const int MS_NOSUID = 2;

const int MS_NODEV = 4;

const int MS_NOEXEC = 8;

const int MS_SYNCHRONOUS = 16;

const int MS_REMOUNT = 32;

const int MS_MANDLOCK = 64;

const int MS_DIRSYNC = 128;

const int MS_NOSYMFOLLOW = 256;

const int MS_NOATIME = 1024;

const int MS_NODIRATIME = 2048;

const int MS_BIND = 4096;

const int MS_MOVE = 8192;

const int MS_REC = 16384;

const int MS_VERBOSE = 32768;

const int MS_SILENT = 32768;

const int MS_POSIXACL = 65536;

const int MS_UNBINDABLE = 131072;

const int MS_PRIVATE = 262144;

const int MS_SLAVE = 524288;

const int MS_SHARED = 1048576;

const int MS_RELATIME = 2097152;

const int MS_KERNMOUNT = 4194304;

const int MS_I_VERSION = 8388608;

const int MS_STRICTATIME = 16777216;

const int MS_LAZYTIME = 33554432;

const int MS_SUBMOUNT = 67108864;

const int MS_NOREMOTELOCK = 134217728;

const int MS_NOSEC = 268435456;

const int MS_BORN = 536870912;

const int MS_ACTIVE = 1073741824;

const int MS_NOUSER = -2147483648;

const int MS_RMT_MASK = 41943121;

const int MS_MGC_VAL = 3236757504;

const int MS_MGC_MSK = 4294901760;

const int OPEN_TREE_CLONE = 1;

const int MOVE_MOUNT_F_SYMLINKS = 1;

const int MOVE_MOUNT_F_AUTOMOUNTS = 2;

const int MOVE_MOUNT_F_EMPTY_PATH = 4;

const int MOVE_MOUNT_T_SYMLINKS = 16;

const int MOVE_MOUNT_T_AUTOMOUNTS = 32;

const int MOVE_MOUNT_T_EMPTY_PATH = 64;

const int MOVE_MOUNT__MASK = 119;

const int FSOPEN_CLOEXEC = 1;

const int FSPICK_CLOEXEC = 1;

const int FSPICK_SYMLINK_NOFOLLOW = 2;

const int FSPICK_NO_AUTOMOUNT = 4;

const int FSPICK_EMPTY_PATH = 8;

const int FSMOUNT_CLOEXEC = 1;

const int MOUNT_ATTR_RDONLY = 1;

const int MOUNT_ATTR_NOSUID = 2;

const int MOUNT_ATTR_NODEV = 4;

const int MOUNT_ATTR_NOEXEC = 8;

const int MOUNT_ATTR__ATIME = 112;

const int MOUNT_ATTR_RELATIME = 0;

const int MOUNT_ATTR_NOATIME = 16;

const int MOUNT_ATTR_STRICTATIME = 32;

const int MOUNT_ATTR_NODIRATIME = 128;

const int INR_OPEN_CUR = 1024;

const int INR_OPEN_MAX = 4096;

const int BLOCK_SIZE_BITS = 10;

const int BLOCK_SIZE = 1024;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_DATA = 3;

const int SEEK_HOLE = 4;

const int SEEK_MAX = 4;

const int RENAME_NOREPLACE = 1;

const int RENAME_EXCHANGE = 2;

const int RENAME_WHITEOUT = 4;

const int FILE_DEDUPE_RANGE_SAME = 0;

const int FILE_DEDUPE_RANGE_DIFFERS = 1;

const int NR_FILE = 8192;

const int FS_XFLAG_REALTIME = 1;

const int FS_XFLAG_PREALLOC = 2;

const int FS_XFLAG_IMMUTABLE = 8;

const int FS_XFLAG_APPEND = 16;

const int FS_XFLAG_SYNC = 32;

const int FS_XFLAG_NOATIME = 64;

const int FS_XFLAG_NODUMP = 128;

const int FS_XFLAG_RTINHERIT = 256;

const int FS_XFLAG_PROJINHERIT = 512;

const int FS_XFLAG_NOSYMLINKS = 1024;

const int FS_XFLAG_EXTSIZE = 2048;

const int FS_XFLAG_EXTSZINHERIT = 4096;

const int FS_XFLAG_NODEFRAG = 8192;

const int FS_XFLAG_FILESTREAM = 16384;

const int FS_XFLAG_DAX = 32768;

const int FS_XFLAG_COWEXTSIZE = 65536;

const int FS_XFLAG_HASATTR = 2147483648;

const int BLKROSET = 4701;

const int BLKROGET = 4702;

const int BLKRRPART = 4703;

const int BLKGETSIZE = 4704;

const int BLKFLSBUF = 4705;

const int BLKRASET = 4706;

const int BLKRAGET = 4707;

const int BLKFRASET = 4708;

const int BLKFRAGET = 4709;

const int BLKSECTSET = 4710;

const int BLKSECTGET = 4711;

const int BLKSSZGET = 4712;

const int BLKBSZGET = 2148012656;

const int BLKBSZSET = 1074270833;

const int BLKGETSIZE64 = 2148012658;

const int BLKTRACESTART = 4724;

const int BLKTRACESTOP = 4725;

const int BLKTRACETEARDOWN = 4726;

const int BLKDISCARD = 4727;

const int BLKIOMIN = 4728;

const int BLKIOOPT = 4729;

const int BLKALIGNOFF = 4730;

const int BLKPBSZGET = 4731;

const int BLKDISCARDZEROES = 4732;

const int BLKSECDISCARD = 4733;

const int BLKROTATIONAL = 4734;

const int BLKZEROOUT = 4735;

const int BMAP_IOCTL = 1;

const int FIBMAP = 1;

const int FIGETBSZ = 2;

const int FIFREEZE = 3221510263;

const int FITHAW = 3221510264;

const int FITRIM = 3222820985;

const int FICLONE = 1074041865;

const int FICLONERANGE = 1075876877;

const int FIDEDUPERANGE = 3222836278;

const int FSLABEL_MAX = 256;

const int FS_IOC_GETFLAGS = 2148034049;

const int FS_IOC_SETFLAGS = 1074292226;

const int FS_IOC_GETVERSION = 2148038145;

const int FS_IOC_SETVERSION = 1074296322;

const int FS_IOC32_GETFLAGS = 2147771905;

const int FS_IOC32_SETFLAGS = 1074030082;

const int FS_IOC32_GETVERSION = 2147776001;

const int FS_IOC32_SETVERSION = 1074034178;

const int FS_IOC_FSGETXATTR = 2149341215;

const int FS_IOC_FSSETXATTR = 1075599392;

const int FS_IOC_GETFSLABEL = 2164298801;

const int FS_IOC_SETFSLABEL = 1090556978;

const int FS_SECRM_FL = 1;

const int FS_UNRM_FL = 2;

const int FS_COMPR_FL = 4;

const int FS_SYNC_FL = 8;

const int FS_IMMUTABLE_FL = 16;

const int FS_APPEND_FL = 32;

const int FS_NODUMP_FL = 64;

const int FS_NOATIME_FL = 128;

const int FS_DIRTY_FL = 256;

const int FS_COMPRBLK_FL = 512;

const int FS_NOCOMP_FL = 1024;

const int FS_ENCRYPT_FL = 2048;

const int FS_BTREE_FL = 4096;

const int FS_INDEX_FL = 4096;

const int FS_IMAGIC_FL = 8192;

const int FS_JOURNAL_DATA_FL = 16384;

const int FS_NOTAIL_FL = 32768;

const int FS_DIRSYNC_FL = 65536;

const int FS_TOPDIR_FL = 131072;

const int FS_HUGE_FILE_FL = 262144;

const int FS_EXTENT_FL = 524288;

const int FS_VERITY_FL = 1048576;

const int FS_EA_INODE_FL = 2097152;

const int FS_EOFBLOCKS_FL = 4194304;

const int FS_NOCOW_FL = 8388608;

const int FS_DAX_FL = 33554432;

const int FS_INLINE_DATA_FL = 268435456;

const int FS_PROJINHERIT_FL = 536870912;

const int FS_CASEFOLD_FL = 1073741824;

const int FS_RESERVED_FL = 2147483648;

const int FS_FL_USER_VISIBLE = 253951;

const int FS_FL_USER_MODIFIABLE = 229631;

const int SYNC_FILE_RANGE_WAIT_BEFORE = 1;

const int SYNC_FILE_RANGE_WRITE = 2;

const int SYNC_FILE_RANGE_WAIT_AFTER = 4;

const int SYNC_FILE_RANGE_WRITE_AND_WAIT = 7;

const int RWF_HIPRI = 1;

const int RWF_DSYNC = 2;

const int RWF_SYNC = 4;

const int RWF_NOWAIT = 8;

const int RWF_APPEND = 16;

const int RWF_SUPPORTED = 31;

const int IOSQE_FIXED_FILE = 1;

const int IOSQE_IO_DRAIN = 2;

const int IOSQE_IO_LINK = 4;

const int IOSQE_IO_HARDLINK = 8;

const int IOSQE_ASYNC = 16;

const int IOSQE_BUFFER_SELECT = 32;

const int IORING_SETUP_IOPOLL = 1;

const int IORING_SETUP_SQPOLL = 2;

const int IORING_SETUP_SQ_AFF = 4;

const int IORING_SETUP_CQSIZE = 8;

const int IORING_SETUP_CLAMP = 16;

const int IORING_SETUP_ATTACH_WQ = 32;

const int IORING_FSYNC_DATASYNC = 1;

const int IORING_TIMEOUT_ABS = 1;

const int SPLICE_F_FD_IN_FIXED = 2147483648;

const int IORING_CQE_F_BUFFER = 1;

const int IORING_OFF_SQ_RING = 0;

const int IORING_OFF_CQ_RING = 134217728;

const int IORING_OFF_SQES = 268435456;

const int IORING_SQ_NEED_WAKEUP = 1;

const int IORING_SQ_CQ_OVERFLOW = 2;

const int IORING_CQ_EVENTFD_DISABLED = 1;

const int IORING_ENTER_GETEVENTS = 1;

const int IORING_ENTER_SQ_WAKEUP = 2;

const int IORING_FEAT_SINGLE_MMAP = 1;

const int IORING_FEAT_NODROP = 2;

const int IORING_FEAT_SUBMIT_STABLE = 4;

const int IORING_FEAT_RW_CUR_POS = 8;

const int IORING_FEAT_CUR_PERSONALITY = 16;

const int IORING_FEAT_FAST_POLL = 32;

const int IORING_FEAT_POLL_32BITS = 64;

const int IORING_REGISTER_BUFFERS = 0;

const int IORING_UNREGISTER_BUFFERS = 1;

const int IORING_REGISTER_FILES = 2;

const int IORING_UNREGISTER_FILES = 3;

const int IORING_REGISTER_EVENTFD = 4;

const int IORING_UNREGISTER_EVENTFD = 5;

const int IORING_REGISTER_FILES_UPDATE = 6;

const int IORING_REGISTER_EVENTFD_ASYNC = 7;

const int IORING_REGISTER_PROBE = 8;

const int IORING_REGISTER_PERSONALITY = 9;

const int IORING_UNREGISTER_PERSONALITY = 10;

const int IO_URING_OP_SUPPORTED = 1;

const int ATOMIC_BOOL_LOCK_FREE = 2;

const int ATOMIC_CHAR_LOCK_FREE = 2;

const int ATOMIC_CHAR16_T_LOCK_FREE = 2;

const int ATOMIC_CHAR32_T_LOCK_FREE = 2;

const int ATOMIC_WCHAR_T_LOCK_FREE = 2;

const int ATOMIC_SHORT_LOCK_FREE = 2;

const int ATOMIC_INT_LOCK_FREE = 2;

const int ATOMIC_LONG_LOCK_FREE = 2;

const int ATOMIC_LLONG_LOCK_FREE = 2;

const int ATOMIC_POINTER_LOCK_FREE = 2;

const int LIBURING_UDATA_TIMEOUT = -1;

const int BUFSIZ = 8192;

const int EOF = -1;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int PTHREAD_KEYS_MAX = 1024;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int MAP_32BIT = 64;

const int MAP_GROWSDOWN = 256;

const int MAP_DENYWRITE = 2048;

const int MAP_EXECUTABLE = 4096;

const int MAP_LOCKED = 8192;

const int MAP_NORESERVE = 16384;

const int MAP_POPULATE = 32768;

const int MAP_NONBLOCK = 65536;

const int MAP_STACK = 131072;

const int MAP_HUGETLB = 262144;

const int MAP_SYNC = 524288;

const int MAP_FIXED_NOREPLACE = 1048576;

const int PROT_READ = 1;

const int PROT_WRITE = 2;

const int PROT_EXEC = 4;

const int PROT_NONE = 0;

const int PROT_GROWSDOWN = 16777216;

const int PROT_GROWSUP = 33554432;

const int MAP_SHARED = 1;

const int MAP_PRIVATE = 2;

const int MAP_SHARED_VALIDATE = 3;

const int MAP_TYPE = 15;

const int MAP_FIXED = 16;

const int MAP_FILE = 0;

const int MAP_ANONYMOUS = 32;

const int MAP_ANON = 32;

const int MAP_HUGE_SHIFT = 26;

const int MAP_HUGE_MASK = 63;

const int MS_ASYNC = 1;

const int MS_SYNC = 4;

const int MS_INVALIDATE = 2;

const int MADV_NORMAL = 0;

const int MADV_RANDOM = 1;

const int MADV_SEQUENTIAL = 2;

const int MADV_WILLNEED = 3;

const int MADV_DONTNEED = 4;

const int MADV_FREE = 8;

const int MADV_REMOVE = 9;

const int MADV_DONTFORK = 10;

const int MADV_DOFORK = 11;

const int MADV_MERGEABLE = 12;

const int MADV_UNMERGEABLE = 13;

const int MADV_HUGEPAGE = 14;

const int MADV_NOHUGEPAGE = 15;

const int MADV_DONTDUMP = 16;

const int MADV_DODUMP = 17;

const int MADV_WIPEONFORK = 18;

const int MADV_KEEPONFORK = 19;

const int MADV_COLD = 20;

const int MADV_PAGEOUT = 21;

const int MADV_HWPOISON = 100;

const int POSIX_MADV_NORMAL = 0;

const int POSIX_MADV_RANDOM = 1;

const int POSIX_MADV_SEQUENTIAL = 2;

const int POSIX_MADV_WILLNEED = 3;

const int POSIX_MADV_DONTNEED = 4;

const int MCL_CURRENT = 1;

const int MCL_FUTURE = 2;

const int MCL_ONFAULT = 4;

const int SLAB_ARENA_FLAG_MARK = 2147483648;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int RB_COMPACT = 1;

const int RB_MAX_TREE_HEIGHT = 48;

const int DART_FLAGS_CURRENT_VERSION = 12;

const int DART_INITIALIZE_PARAMS_CURRENT_VERSION = 7;

const int ILLEGAL_PORT = 0;

const String DART_KERNEL_ISOLATE_NAME = 'kernel-service';

const String DART_VM_SERVICE_ISOLATE_NAME = 'vm-service';

const String kSnapshotBuildIdCSymbol = '_kDartSnapshotBuildId';

const String kVmSnapshotDataCSymbol = '_kDartVmSnapshotData';

const String kVmSnapshotInstructionsCSymbol = '_kDartVmSnapshotInstructions';

const String kVmSnapshotBssCSymbol = '_kDartVmSnapshotBss';

const String kIsolateSnapshotDataCSymbol = '_kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsCSymbol =
    '_kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssCSymbol = '_kDartIsolateSnapshotBss';

const String kSnapshotBuildIdAsmSymbol = '_kDartSnapshotBuildId';

const String kVmSnapshotDataAsmSymbol = '_kDartVmSnapshotData';

const String kVmSnapshotInstructionsAsmSymbol = '_kDartVmSnapshotInstructions';

const String kVmSnapshotBssAsmSymbol = '_kDartVmSnapshotBss';

const String kIsolateSnapshotDataAsmSymbol = '_kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsAsmSymbol =
    '_kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssAsmSymbol = '_kDartIsolateSnapshotBss';

const int TRANSPORT_EVENT_READ = 1;

const int TRANSPORT_EVENT_WRITE = 2;

const int TRANSPORT_EVENT_RECEIVE_MESSAGE = 4;

const int TRANSPORT_EVENT_SEND_MESSAGE = 8;

const int TRANSPORT_EVENT_ACCEPT = 16;

const int TRANSPORT_EVENT_CONNECT = 32;

const int TRANSPORT_EVENT_CLIENT = 64;

const int TRANSPORT_EVENT_CUSTOM = 128;

const int TRANSPORT_EVENT_FILE = 256;

const int TRANSPORT_BUFFER_USED = -1;

const int TRANSPORT_TIMEOUT_INFINITY = -1;

const int TRANSPORT_SOCKET_OPTION_SOCKET_NONBLOCK = 2;

const int TRANSPORT_SOCKET_OPTION_SOCKET_CLOCKEXEC = 4;

const int TRANSPORT_SOCKET_OPTION_SOCKET_REUSEADDR = 8;

const int TRANSPORT_SOCKET_OPTION_SOCKET_REUSEPORT = 16;

const int TRANSPORT_SOCKET_OPTION_SOCKET_RCVBUF = 32;

const int TRANSPORT_SOCKET_OPTION_SOCKET_SNDBUF = 64;

const int TRANSPORT_SOCKET_OPTION_SOCKET_BROADCAST = 128;

const int TRANSPORT_SOCKET_OPTION_SOCKET_KEEPALIVE = 256;

const int TRANSPORT_SOCKET_OPTION_SOCKET_RCVLOWAT = 512;

const int TRANSPORT_SOCKET_OPTION_SOCKET_SNDLOWAT = 1024;

const int TRANSPORT_SOCKET_OPTION_IP_TTL = 2048;

const int TRANSPORT_SOCKET_OPTION_IP_ADD_MEMBERSHIP = 4096;

const int TRANSPORT_SOCKET_OPTION_IP_ADD_SOURCE_MEMBERSHIP = 8192;

const int TRANSPORT_SOCKET_OPTION_IP_DROP_MEMBERSHIP = 16384;

const int TRANSPORT_SOCKET_OPTION_IP_DROP_SOURCE_MEMBERSHIP = 32768;

const int TRANSPORT_SOCKET_OPTION_IP_FREEBIND = 65536;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_ALL = 131072;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_IF = 262144;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_LOOP = 524288;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_TTL = 1048576;

const int TRANSPORT_SOCKET_OPTION_TCP_QUICKACK = 2097152;

const int TRANSPORT_SOCKET_OPTION_TCP_DEFER_ACCEPT = 4194304;

const int TRANSPORT_SOCKET_OPTION_TCP_FASTOPEN = 8388608;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPIDLE = 16777216;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPCNT = 33554432;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPINTVL = 67108864;

const int TRANSPORT_SOCKET_OPTION_TCP_MAXSEG = 134217728;

const int TRANSPORT_SOCKET_OPTION_TCP_NODELAY = 268435456;

const int TRANSPORT_SOCKET_OPTION_TCP_SYNCNT = 536870912;

const String PACKAGE_VERSION = '';

const String PACKAGE = '';

const String TRANSPORT_LIBEXT = 'so';

const int HAVE_CLOCK_GETTIME_DECL = 1;

const String SYSCONF_DIR = 'etc';

const String INSTALL_PREFIX = '/usr/local';

const String BUILD_TYPE = 'RelWithDebInfo';

const String BUILD_INFO = '';

const String BUILD_OPTIONS = 'cmake . ';

const String COMPILER_INFO = 'GNU-10.2.1';

const String TRANSPORT_C_FLAGS = '';

const String TRANSPORT_CXX_FLAGS = '';

const String MODULE_LIBDIR = '';

const String MODULE_LUADIR = '';

const String MODULE_INCLUDEDIR = '';

const String MODULE_LUAPATH = '';

const String MODULE_LIBPATH = '';

const String MODULE_LIBSUFFIX = '';

const int CACHELINE_SIZE = 64;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int MH_INCREMENTAL_RESIZE = 1;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int FP_NAN1 = 0;

const int FP_INFINITE1 = 1;

const int FP_ZERO1 = 2;

const int FP_SUBNORMAL1 = 3;

const int FP_NORMAL1 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const int MH_TYPEDEFS = 1;
